
Telemetry2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e600  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  0800e790  0800e790  0000f790  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f238  0800f238  00011204  2**0
                  CONTENTS
  4 .ARM          00000008  0800f238  0800f238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f240  0800f240  00011204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f240  0800f240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f244  0800f244  00010244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800f248  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001008  20000204  0800f44c  00011204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000120c  0800f44c  0001120c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c6a1  00000000  00000000  00011234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042f1  00000000  00000000  0002d8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00031bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f97  00000000  00000000  000330e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b68  00000000  00000000  00034077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dcbe  00000000  00000000  0005abdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db4f0  00000000  00000000  0007889d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00153d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d08  00000000  00000000  00153e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015ab50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000016fd  00000000  00000000  0015abbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000060  00000000  00000000  0015c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e778 	.word	0x0800e778

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800e778 	.word	0x0800e778

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <bno055_set_i2c_handler>:
    .mag_id = 0,
    .gyr_id = 0,
    .bl_rev_id = 0
};

void bno055_set_i2c_handler(I2C_HandleTypeDef* hi2c){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
    i2c_dev = hi2c;
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <bno055_set_i2c_handler+0x1c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000220 	.word	0x20000220

08001024 <bno055_writeData>:

uint8_t bno055_writeData(uint8_t* txdata) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af02      	add	r7, sp, #8
 800102a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, txdata, sizeof(txdata), 10);
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <bno055_writeData+0x158>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	230a      	movs	r3, #10
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	2304      	movs	r3, #4
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	2150      	movs	r1, #80	@ 0x50
 800103a:	f004 fd13 	bl	8005a64 <HAL_I2C_Master_Transmit>
 800103e:	4603      	mov	r3, r0
 8001040:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK) {
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <bno055_writeData+0x28>
        return 0;
 8001048:	2300      	movs	r3, #0
 800104a:	e093      	b.n	8001174 <bno055_writeData+0x150>
    }

    if (status == HAL_ERROR) {
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d103      	bne.n	800105a <bno055_writeData+0x36>
        printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001052:	484b      	ldr	r0, [pc, #300]	@ (8001180 <bno055_writeData+0x15c>)
 8001054:	f00a fd7c 	bl	800bb50 <puts>
 8001058:	e012      	b.n	8001080 <bno055_writeData+0x5c>
    } else if (status == HAL_TIMEOUT) {
 800105a:	7dfb      	ldrb	r3, [r7, #23]
 800105c:	2b03      	cmp	r3, #3
 800105e:	d103      	bne.n	8001068 <bno055_writeData+0x44>
        printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001060:	4848      	ldr	r0, [pc, #288]	@ (8001184 <bno055_writeData+0x160>)
 8001062:	f00a fd75 	bl	800bb50 <puts>
 8001066:	e00b      	b.n	8001080 <bno055_writeData+0x5c>
    } else if (status == HAL_BUSY) {
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d103      	bne.n	8001076 <bno055_writeData+0x52>
        printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800106e:	4846      	ldr	r0, [pc, #280]	@ (8001188 <bno055_writeData+0x164>)
 8001070:	f00a fd6e 	bl	800bb50 <puts>
 8001074:	e004      	b.n	8001080 <bno055_writeData+0x5c>
    } else {
        printf("Unknown status data %d", status);
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	4619      	mov	r1, r3
 800107a:	4844      	ldr	r0, [pc, #272]	@ (800118c <bno055_writeData+0x168>)
 800107c:	f00a fd00 	bl	800ba80 <iprintf>
    }

    uint32_t error = HAL_I2C_GetError(i2c_dev);
 8001080:	4b3e      	ldr	r3, [pc, #248]	@ (800117c <bno055_writeData+0x158>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f004 ff09 	bl	8005e9c <HAL_I2C_GetError>
 800108a:	6138      	str	r0, [r7, #16]
    if (error == HAL_I2C_ERROR_NONE) {
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <bno055_writeData+0x72>
        return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	e06e      	b.n	8001174 <bno055_writeData+0x150>
    } else if (error == HAL_I2C_ERROR_BERR) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d103      	bne.n	80010a4 <bno055_writeData+0x80>
        printf("HAL_I2C_ERROR_BERR\r\n");
 800109c:	483c      	ldr	r0, [pc, #240]	@ (8001190 <bno055_writeData+0x16c>)
 800109e:	f00a fd57 	bl	800bb50 <puts>
 80010a2:	e021      	b.n	80010e8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_ARLO) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d103      	bne.n	80010b2 <bno055_writeData+0x8e>
        printf("HAL_I2C_ERROR_ARLO\r\n");
 80010aa:	483a      	ldr	r0, [pc, #232]	@ (8001194 <bno055_writeData+0x170>)
 80010ac:	f00a fd50 	bl	800bb50 <puts>
 80010b0:	e01a      	b.n	80010e8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_AF) {
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	2b04      	cmp	r3, #4
 80010b6:	d103      	bne.n	80010c0 <bno055_writeData+0x9c>
        printf("HAL_I2C_ERROR_AF\r\n");
 80010b8:	4837      	ldr	r0, [pc, #220]	@ (8001198 <bno055_writeData+0x174>)
 80010ba:	f00a fd49 	bl	800bb50 <puts>
 80010be:	e013      	b.n	80010e8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_OVR) {
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d103      	bne.n	80010ce <bno055_writeData+0xaa>
        printf("HAL_I2C_ERROR_OVR\r\n");
 80010c6:	4835      	ldr	r0, [pc, #212]	@ (800119c <bno055_writeData+0x178>)
 80010c8:	f00a fd42 	bl	800bb50 <puts>
 80010cc:	e00c      	b.n	80010e8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_DMA) {
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d103      	bne.n	80010dc <bno055_writeData+0xb8>
        printf("HAL_I2C_ERROR_DMA\r\n");
 80010d4:	4832      	ldr	r0, [pc, #200]	@ (80011a0 <bno055_writeData+0x17c>)
 80010d6:	f00a fd3b 	bl	800bb50 <puts>
 80010da:	e005      	b.n	80010e8 <bno055_writeData+0xc4>
    } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b20      	cmp	r3, #32
 80010e0:	d102      	bne.n	80010e8 <bno055_writeData+0xc4>
        printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80010e2:	4830      	ldr	r0, [pc, #192]	@ (80011a4 <bno055_writeData+0x180>)
 80010e4:	f00a fd34 	bl	800bb50 <puts>
    }

    HAL_I2C_StateTypeDef state = HAL_I2C_GetState(i2c_dev);
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <bno055_writeData+0x158>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fec7 	bl	8005e80 <HAL_I2C_GetState>
 80010f2:	4603      	mov	r3, r0
 80010f4:	73fb      	strb	r3, [r7, #15]
    if (state == HAL_I2C_STATE_RESET) {
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d103      	bne.n	8001104 <bno055_writeData+0xe0>
        printf("HAL_I2C_STATE_RESET\r\n");
 80010fc:	482a      	ldr	r0, [pc, #168]	@ (80011a8 <bno055_writeData+0x184>)
 80010fe:	f00a fd27 	bl	800bb50 <puts>
 8001102:	e036      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_READY) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b20      	cmp	r3, #32
 8001108:	d103      	bne.n	8001112 <bno055_writeData+0xee>
        printf("HAL_I2C_STATE_RESET\r\n");
 800110a:	4827      	ldr	r0, [pc, #156]	@ (80011a8 <bno055_writeData+0x184>)
 800110c:	f00a fd20 	bl	800bb50 <puts>
 8001110:	e02f      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_BUSY) {
 8001112:	7bfb      	ldrb	r3, [r7, #15]
 8001114:	2b24      	cmp	r3, #36	@ 0x24
 8001116:	d103      	bne.n	8001120 <bno055_writeData+0xfc>
        printf("HAL_I2C_STATE_BUSY\r\n");
 8001118:	4824      	ldr	r0, [pc, #144]	@ (80011ac <bno055_writeData+0x188>)
 800111a:	f00a fd19 	bl	800bb50 <puts>
 800111e:	e028      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b21      	cmp	r3, #33	@ 0x21
 8001124:	d103      	bne.n	800112e <bno055_writeData+0x10a>
        printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001126:	4822      	ldr	r0, [pc, #136]	@ (80011b0 <bno055_writeData+0x18c>)
 8001128:	f00a fd12 	bl	800bb50 <puts>
 800112c:	e021      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b22      	cmp	r3, #34	@ 0x22
 8001132:	d103      	bne.n	800113c <bno055_writeData+0x118>
        printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001134:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <bno055_writeData+0x190>)
 8001136:	f00a fd0b 	bl	800bb50 <puts>
 800113a:	e01a      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_LISTEN) {
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b28      	cmp	r3, #40	@ 0x28
 8001140:	d103      	bne.n	800114a <bno055_writeData+0x126>
        printf("HAL_I2C_STATE_LISTEN\r\n");
 8001142:	481d      	ldr	r0, [pc, #116]	@ (80011b8 <bno055_writeData+0x194>)
 8001144:	f00a fd04 	bl	800bb50 <puts>
 8001148:	e013      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	2b29      	cmp	r3, #41	@ 0x29
 800114e:	d103      	bne.n	8001158 <bno055_writeData+0x134>
        printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001150:	481a      	ldr	r0, [pc, #104]	@ (80011bc <bno055_writeData+0x198>)
 8001152:	f00a fcfd 	bl	800bb50 <puts>
 8001156:	e00c      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	2b2a      	cmp	r3, #42	@ 0x2a
 800115c:	d103      	bne.n	8001166 <bno055_writeData+0x142>
        printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800115e:	4818      	ldr	r0, [pc, #96]	@ (80011c0 <bno055_writeData+0x19c>)
 8001160:	f00a fcf6 	bl	800bb50 <puts>
 8001164:	e005      	b.n	8001172 <bno055_writeData+0x14e>
    } else if (state == HAL_I2C_STATE_ABORT) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	2b60      	cmp	r3, #96	@ 0x60
 800116a:	d102      	bne.n	8001172 <bno055_writeData+0x14e>
        printf("HAL_I2C_STATE_ABORT\r\n");
 800116c:	4815      	ldr	r0, [pc, #84]	@ (80011c4 <bno055_writeData+0x1a0>)
 800116e:	f00a fcef 	bl	800bb50 <puts>
//   else if (state == HAL_I2C_STATE_TIMEOUT) {
//        printf("HAL_I2C_STATE_TIMEOUT\r\n");
//    } else if (state == HAL_I2C_STATE_ERROR) {
//        printf("HAL_I2C_STATE_ERROR\r\n");
//    }
    return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000220 	.word	0x20000220
 8001180:	0800e790 	.word	0x0800e790
 8001184:	0800e7b4 	.word	0x0800e7b4
 8001188:	0800e7dc 	.word	0x0800e7dc
 800118c:	0800e800 	.word	0x0800e800
 8001190:	0800e818 	.word	0x0800e818
 8001194:	0800e82c 	.word	0x0800e82c
 8001198:	0800e840 	.word	0x0800e840
 800119c:	0800e854 	.word	0x0800e854
 80011a0:	0800e868 	.word	0x0800e868
 80011a4:	0800e87c 	.word	0x0800e87c
 80011a8:	0800e894 	.word	0x0800e894
 80011ac:	0800e8ac 	.word	0x0800e8ac
 80011b0:	0800e8c0 	.word	0x0800e8c0
 80011b4:	0800e8d8 	.word	0x0800e8d8
 80011b8:	0800e8f0 	.word	0x0800e8f0
 80011bc:	0800e908 	.word	0x0800e908
 80011c0:	0800e928 	.word	0x0800e928
 80011c4:	0800e948 	.word	0x0800e948

080011c8 <bno055_readData>:


uint8_t bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	status = HAL_I2C_Master_Transmit(i2c_dev, BNO055_I2C_ADDR_LO << 1, &reg, 1, 10);
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <bno055_readData+0x68>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	1dfa      	adds	r2, r7, #7
 80011de:	230a      	movs	r3, #10
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2150      	movs	r1, #80	@ 0x50
 80011e6:	f004 fc3d 	bl	8005a64 <HAL_I2C_Master_Transmit>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <bno055_readData+0x30>
		return 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e017      	b.n	8001228 <bno055_readData+0x60>
	}
    bno055_delay(10);
 80011f8:	200a      	movs	r0, #10
 80011fa:	f000 f81b 	bl	8001234 <bno055_delay>
    status = HAL_I2C_Master_Receive(i2c_dev, BNO055_I2C_ADDR_LO << 1, data, len, 10);
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <bno055_readData+0x68>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	79bb      	ldrb	r3, [r7, #6]
 8001204:	b29b      	uxth	r3, r3
 8001206:	220a      	movs	r2, #10
 8001208:	9200      	str	r2, [sp, #0]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	2150      	movs	r1, #80	@ 0x50
 800120e:	f004 fd41 	bl	8005c94 <HAL_I2C_Master_Receive>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
    bno055_delay(10);
 8001216:	200a      	movs	r0, #10
 8001218:	f000 f80c 	bl	8001234 <bno055_delay>
    if (status == HAL_OK) {
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <bno055_readData+0x5e>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <bno055_readData+0x60>
	}
	else{
		return 1;
 8001226:	2301      	movs	r3, #1
	}
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000220 	.word	0x20000220

08001234 <bno055_delay>:


void bno055_delay(uint32_t ms){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f002 fe95 	bl	8003f6c <HAL_Delay>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <bno055_init>:

BNO055_FUNC_RETURN bno055_init(bno055_conf_t * bno055_conf, bno055_verification_t * bno055_verification){
 800124a:	b580      	push	{r7, lr}
 800124c:	b090      	sub	sp, #64	@ 0x40
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t conf_page0 [2] = {BNO055_PAGE_ID, 0x00};
 800125a:	2307      	movs	r3, #7
 800125c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    uint8_t op_mode_conf [2] = {BNO055_OPR_MODE, OPERATION_MODE_CONFIG};
 800125e:	233d      	movs	r3, #61	@ 0x3d
 8001260:	873b      	strh	r3, [r7, #56]	@ 0x38

    ret += bno055_writeData(conf_page0);
 8001262:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fedc 	bl	8001024 <bno055_writeData>
 800126c:	4603      	mov	r3, r0
 800126e:	461a      	mov	r2, r3
 8001270:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001274:	4413      	add	r3, r2
 8001276:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 800127a:	200a      	movs	r0, #10
 800127c:	f7ff ffda 	bl	8001234 <bno055_delay>

    ret +=bno055_writeData(op_mode_conf);
 8001280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fecd 	bl	8001024 <bno055_writeData>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001292:	4413      	add	r3, r2
 8001294:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(550);
 8001298:	f240 2026 	movw	r0, #550	@ 0x226
 800129c:	f7ff ffca 	bl	8001234 <bno055_delay>

	uint8_t conf_page1 [2] = {BNO055_PAGE_ID, 0x01};
 80012a0:	f240 1307 	movw	r3, #263	@ 0x107
 80012a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint8_t acc_conf [2] = {BNO055_ACC_CONFIG, bno055_conf->acc_operation_mode << 5 | bno055_conf->acc_bandwidth << 2 | bno055_conf->acc_g_range };
 80012a6:	2308      	movs	r3, #8
 80012a8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	799b      	ldrb	r3, [r3, #6]
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	b25a      	sxtb	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	795b      	ldrb	r3, [r3, #5]
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25a      	sxtb	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	791b      	ldrb	r3, [r3, #4]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint8_t gyr_conf0 [2] = {BNO055_GYRO_CONFIG_0, bno055_conf->gyr_bandwidth << 3 | bno055_conf->gyr_range };
 80012d0:	230a      	movs	r3, #10
 80012d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a1b      	ldrb	r3, [r3, #8]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	b25a      	sxtb	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	79db      	ldrb	r3, [r3, #7]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t gyr_conf1 [2] = {BNO055_GYRO_CONFIG_1, bno055_conf->gyr_op_mode };
 80012ee:	230b      	movs	r3, #11
 80012f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	7a5b      	ldrb	r3, [r3, #9]
 80012f8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t mag_conf [2] = {BNO055_MAG_CONFIG, bno055_conf->mag_pwr_mode << 5 | bno055_conf->mag_op_mode << 3 | bno055_conf->mag_data_rate };
 80012fc:	2309      	movs	r3, #9
 80012fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7b1b      	ldrb	r3, [r3, #12]
 8001306:	015b      	lsls	r3, r3, #5
 8001308:	b25a      	sxtb	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7adb      	ldrb	r3, [r3, #11]
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7a9b      	ldrb	r3, [r3, #10]
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	ret += bno055_writeData(conf_page1);
 8001326:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe7a 	bl	8001024 <bno055_writeData>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001338:	4413      	add	r3, r2
 800133a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 800133e:	200a      	movs	r0, #10
 8001340:	f7ff ff78 	bl	8001234 <bno055_delay>


	ret += bno055_writeData(acc_conf);
 8001344:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe6b 	bl	8001024 <bno055_writeData>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001356:	4413      	add	r3, r2
 8001358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 800135c:	200a      	movs	r0, #10
 800135e:	f7ff ff69 	bl	8001234 <bno055_delay>

	ret += bno055_writeData(gyr_conf0);
 8001362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe5c 	bl	8001024 <bno055_writeData>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001374:	4413      	add	r3, r2
 8001376:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 800137a:	200a      	movs	r0, #10
 800137c:	f7ff ff5a 	bl	8001234 <bno055_delay>

	ret += bno055_writeData(gyr_conf1);
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe4d 	bl	8001024 <bno055_writeData>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001392:	4413      	add	r3, r2
 8001394:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 8001398:	200a      	movs	r0, #10
 800139a:	f7ff ff4b 	bl	8001234 <bno055_delay>

	ret += bno055_writeData(mag_conf);
 800139e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe3e 	bl	8001024 <bno055_writeData>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80013b0:	4413      	add	r3, r2
 80013b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f7ff ff3c 	bl	8001234 <bno055_delay>


    uint8_t pwr_mode [2] = {BNO055_PWR_MODE, bno055_conf->pwr_mode};
 80013bc:	233e      	movs	r3, #62	@ 0x3e
 80013be:	f887 3020 	strb.w	r3, [r7, #32]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    uint8_t op_mode [2] = {BNO055_OPR_MODE, bno055_conf->op_mode};
 80013ca:	233d      	movs	r3, #61	@ 0x3d
 80013cc:	773b      	strb	r3, [r7, #28]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	777b      	strb	r3, [r7, #29]
    uint8_t axis_remap_conf [2] = {BNO055_AXIS_MAP_CONFIG, bno055_conf->axis_remap_conf};
 80013d4:	2341      	movs	r3, #65	@ 0x41
 80013d6:	763b      	strb	r3, [r7, #24]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	789b      	ldrb	r3, [r3, #2]
 80013dc:	767b      	strb	r3, [r7, #25]
    uint8_t axis_remap_sign [2] = {BNO055_AXIS_MAP_SIGN, bno055_conf->axis_remap_sign};
 80013de:	2342      	movs	r3, #66	@ 0x42
 80013e0:	753b      	strb	r3, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	78db      	ldrb	r3, [r3, #3]
 80013e6:	757b      	strb	r3, [r7, #21]

    uint8_t unit_sel [2] = {BNO055_UNIT_SEL, bno055_conf->unit_sel};
 80013e8:	233b      	movs	r3, #59	@ 0x3b
 80013ea:	743b      	strb	r3, [r7, #16]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b5b      	ldrb	r3, [r3, #13]
 80013f0:	747b      	strb	r3, [r7, #17]

    ret += bno055_writeData(conf_page0);
 80013f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe14 	bl	8001024 <bno055_writeData>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001404:	4413      	add	r3, r2
 8001406:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	bno055_delay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f7ff ff12 	bl	8001234 <bno055_delay>

	ret += bno055_writeData(pwr_mode);
 8001410:	f107 0320 	add.w	r3, r7, #32
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe05 	bl	8001024 <bno055_writeData>
 800141a:	4603      	mov	r3, r0
 800141c:	461a      	mov	r2, r3
 800141e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001422:	4413      	add	r3, r2
 8001424:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 8001428:	200a      	movs	r0, #10
 800142a:	f7ff ff03 	bl	8001234 <bno055_delay>

    ret += bno055_writeData(axis_remap_conf);
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fdf6 	bl	8001024 <bno055_writeData>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001440:	4413      	add	r3, r2
 8001442:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f7ff fef4 	bl	8001234 <bno055_delay>

    ret += bno055_writeData(axis_remap_sign);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fde7 	bl	8001024 <bno055_writeData>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800145e:	4413      	add	r3, r2
 8001460:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f7ff fee5 	bl	8001234 <bno055_delay>

    ret += bno055_writeData(unit_sel);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fdd8 	bl	8001024 <bno055_writeData>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800147c:	4413      	add	r3, r2
 800147e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 8001482:	200a      	movs	r0, #10
 8001484:	f7ff fed6 	bl	8001234 <bno055_delay>

    ret += bno055_writeData(op_mode);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fdc9 	bl	8001024 <bno055_writeData>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800149a:	4413      	add	r3, r2
 800149c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_delay(10);
 80014a0:	200a      	movs	r0, #10
 80014a2:	f7ff fec7 	bl	8001234 <bno055_delay>

    uint8_t sw_id[2] = {0, 0};
 80014a6:	2300      	movs	r3, #0
 80014a8:	81bb      	strh	r3, [r7, #12]
    uint8_t data = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	72fb      	strb	r3, [r7, #11]

    ret += bno055_readData(BNO055_CHIP_ID, &data, 1);
 80014ae:	f107 030b 	add.w	r3, r7, #11
 80014b2:	2201      	movs	r2, #1
 80014b4:	4619      	mov	r1, r3
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fe86 	bl	80011c8 <bno055_readData>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80014c4:	4413      	add	r3, r2
 80014c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->chip_id = data;
 80014ca:	7afa      	ldrb	r2, [r7, #11]
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
    bno055_delay(10);
 80014d0:	200a      	movs	r0, #10
 80014d2:	f7ff feaf 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_ACC_ID, &data, 1);
 80014d6:	f107 030b 	add.w	r3, r7, #11
 80014da:	2201      	movs	r2, #1
 80014dc:	4619      	mov	r1, r3
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff fe72 	bl	80011c8 <bno055_readData>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80014ec:	4413      	add	r3, r2
 80014ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->acc_id = data;
 80014f2:	7afa      	ldrb	r2, [r7, #11]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	715a      	strb	r2, [r3, #5]
    bno055_delay(10);
 80014f8:	200a      	movs	r0, #10
 80014fa:	f7ff fe9b 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_MAG_ID, &data, 1);
 80014fe:	f107 030b 	add.w	r3, r7, #11
 8001502:	2201      	movs	r2, #1
 8001504:	4619      	mov	r1, r3
 8001506:	2002      	movs	r0, #2
 8001508:	f7ff fe5e 	bl	80011c8 <bno055_readData>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001514:	4413      	add	r3, r2
 8001516:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->mag_id = data;
 800151a:	7afa      	ldrb	r2, [r7, #11]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	719a      	strb	r2, [r3, #6]
    bno055_delay(10);
 8001520:	200a      	movs	r0, #10
 8001522:	f7ff fe87 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_GYR_ID, &data, 1);
 8001526:	f107 030b 	add.w	r3, r7, #11
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	2003      	movs	r0, #3
 8001530:	f7ff fe4a 	bl	80011c8 <bno055_readData>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800153c:	4413      	add	r3, r2
 800153e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->gyr_id = data;
 8001542:	7afa      	ldrb	r2, [r7, #11]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	71da      	strb	r2, [r3, #7]
    bno055_delay(10);
 8001548:	200a      	movs	r0, #10
 800154a:	f7ff fe73 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_BL_REV_ID, &data, 1);
 800154e:	f107 030b 	add.w	r3, r7, #11
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	2006      	movs	r0, #6
 8001558:	f7ff fe36 	bl	80011c8 <bno055_readData>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001564:	4413      	add	r3, r2
 8001566:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->bl_rev_id = data;
 800156a:	7afa      	ldrb	r2, [r7, #11]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	721a      	strb	r2, [r3, #8]
    bno055_delay(10);
 8001570:	200a      	movs	r0, #10
 8001572:	f7ff fe5f 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_SW_REV_ID_LSB, sw_id, 2);
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2202      	movs	r2, #2
 800157c:	4619      	mov	r1, r3
 800157e:	2004      	movs	r0, #4
 8001580:	f7ff fe22 	bl	80011c8 <bno055_readData>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800158c:	4413      	add	r3, r2
 800158e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->sw_rev_id = (uint16_t)((sw_id[1] << 8)|(sw_id[0]));
 8001592:	7b7b      	ldrb	r3, [r7, #13]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	b21a      	sxth	r2, r3
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	b21b      	sxth	r3, r3
 800159c:	4313      	orrs	r3, r2
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	805a      	strh	r2, [r3, #2]
    bno055_delay(10);
 80015a6:	200a      	movs	r0, #10
 80015a8:	f7ff fe44 	bl	8001234 <bno055_delay>

    ret += bno055_readData(BNO055_PAGE_ID, &data, 1);
 80015ac:	f107 030b 	add.w	r3, r7, #11
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	2007      	movs	r0, #7
 80015b6:	f7ff fe07 	bl	80011c8 <bno055_readData>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015c2:	4413      	add	r3, r2
 80015c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    bno055_verification->page_id = data;
 80015c8:	7afa      	ldrb	r2, [r7, #11]
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	711a      	strb	r2, [r3, #4]
    bno055_delay(100);
 80015ce:	2064      	movs	r0, #100	@ 0x64
 80015d0:	f7ff fe30 	bl	8001234 <bno055_delay>

    return ret;
 80015d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3740      	adds	r7, #64	@ 0x40
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <bno055_read_acc_xyz>:
    uint8_t data[2] = {0,0};
    ret += bno055_readData(BNO055_ACC_DATA_Z_LSB, data, 2);
    *acc_z = (uint16_t)((data[1] << 8)|(data[0]));
    return ret;
}
BNO055_FUNC_RETURN bno055_read_acc_xyz(bno055_acc_t* acc_xyz){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
    uint8_t data[6] = {0,0,0,0,0,0};
 80015ec:	4a2b      	ldr	r2, [pc, #172]	@ (800169c <bno055_read_acc_xyz+0xbc>)
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f6:	6018      	str	r0, [r3, #0]
 80015f8:	3304      	adds	r3, #4
 80015fa:	8019      	strh	r1, [r3, #0]
    ret += bno055_readData(BNO055_ACC_DATA_X_LSB, data, 6);
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2206      	movs	r2, #6
 8001602:	4619      	mov	r1, r3
 8001604:	2008      	movs	r0, #8
 8001606:	f7ff fddf 	bl	80011c8 <bno055_readData>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	7ffb      	ldrb	r3, [r7, #31]
 8001610:	4413      	add	r3, r2
 8001612:	77fb      	strb	r3, [r7, #31]
    // Combine MSB and LSB, interpret as signed 16-bit integers
	int16_t rawX = (int16_t)((data[1] << 8) | data[0]);
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	83bb      	strh	r3, [r7, #28]
	int16_t rawY = (int16_t)((data[3] << 8) | data[2]);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	b21b      	sxth	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	837b      	strh	r3, [r7, #26]
	int16_t rawZ = (int16_t)((data[5] << 8) | data[4]);
 8001630:	7c7b      	ldrb	r3, [r7, #17]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	833b      	strh	r3, [r7, #24]
	// Scale the raw data to m/s²
	const float accScale = 1.0 / 100.0; // Scale factor for accelerometer data (±4g default)
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <bno055_read_acc_xyz+0xc0>)
 8001640:	617b      	str	r3, [r7, #20]
	acc_xyz->x = rawX * accScale;
 8001642:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edc3 7a00 	vstr	s15, [r3]
	acc_xyz->y = rawY * accScale;
 800165c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001668:	edd7 7a05 	vldr	s15, [r7, #20]
 800166c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	edc3 7a01 	vstr	s15, [r3, #4]
	acc_xyz->z = rawZ * accScale;
 8001676:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001682:	edd7 7a05 	vldr	s15, [r7, #20]
 8001686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a02 	vstr	s15, [r3, #8]
    return ret;
 8001690:	7ffb      	ldrb	r3, [r7, #31]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3720      	adds	r7, #32
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	0800e960 	.word	0x0800e960
 80016a0:	3c23d70a 	.word	0x3c23d70a

080016a4 <bno055_read_euler_hrp>:
    uint8_t data[2] = {0,0};
    ret += bno055_readData(BNO055_EUL_PITCH_LSB, data, 2);
    *euler_p = (uint16_t)((data[1] << 8)|(data[0]));
    return ret;
}
BNO055_FUNC_RETURN bno055_read_euler_hrp(bno055_euler_t* euler_hrp){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    BNO055_FUNC_RETURN ret = ERROR_DEFAULT;
 80016ac:	2300      	movs	r3, #0
 80016ae:	77fb      	strb	r3, [r7, #31]
    uint8_t data[6] = {0,0,0,0,0,0};
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <bno055_read_euler_hrp+0xbc>)
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ba:	6018      	str	r0, [r3, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	8019      	strh	r1, [r3, #0]
    ret += bno055_readData(BNO055_EUL_HEADING_LSB, data, 6);
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2206      	movs	r2, #6
 80016c6:	4619      	mov	r1, r3
 80016c8:	201a      	movs	r0, #26
 80016ca:	f7ff fd7d 	bl	80011c8 <bno055_readData>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	7ffb      	ldrb	r3, [r7, #31]
 80016d4:	4413      	add	r3, r2
 80016d6:	77fb      	strb	r3, [r7, #31]
    // Combine MSB and LSB, interpret as signed 16-bit, and scale to degrees
	int16_t rawHeading = (int16_t)((data[1] << 8) | data[0]);
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7b3b      	ldrb	r3, [r7, #12]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	83bb      	strh	r3, [r7, #28]
	int16_t rawRoll = (int16_t)((data[3] << 8) | data[2]);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	b21a      	sxth	r2, r3
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b21b      	sxth	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	837b      	strh	r3, [r7, #26]
	int16_t rawPitch = (int16_t)((data[5] << 8) | data[4]);
 80016f4:	7c7b      	ldrb	r3, [r7, #17]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7c3b      	ldrb	r3, [r7, #16]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	833b      	strh	r3, [r7, #24]
	// Convert raw values to degrees
	float scaleFactor = 1.0 / 16.0;
 8001702:	f04f 5376 	mov.w	r3, #1031798784	@ 0x3d800000
 8001706:	617b      	str	r3, [r7, #20]
	euler_hrp->h = rawHeading * scaleFactor;
 8001708:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	edd7 7a05 	vldr	s15, [r7, #20]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edc3 7a00 	vstr	s15, [r3]
	euler_hrp->r = rawRoll * scaleFactor;
 8001722:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edc3 7a01 	vstr	s15, [r3, #4]
	euler_hrp->p = rawPitch * scaleFactor;
 800173c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001748:	edd7 7a05 	vldr	s15, [r7, #20]
 800174c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edc3 7a02 	vstr	s15, [r3, #8]
    return ret;
 8001756:	7ffb      	ldrb	r3, [r7, #31]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	0800e960 	.word	0x0800e960
 8001764:	00000000 	.word	0x00000000

08001768 <deg_to_rad>:
#include "Conversions.h"

inline float deg_to_rad(float deg) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	ed87 0a01 	vstr	s0, [r7, #4]
    return deg * (M_PI / 180.0f);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe fef8 	bl	8000568 <__aeabi_f2d>
 8001778:	a309      	add	r3, pc, #36	@ (adr r3, 80017a0 <deg_to_rad+0x38>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ff4b 	bl	8000618 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa3d 	bl	8000c08 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	ee07 3a90 	vmov	s15, r3
}
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	a2529d39 	.word	0xa2529d39
 80017a4:	3f91df46 	.word	0x3f91df46

080017a8 <latlon_to_xy>:

// Convert GPS degrees to relative X,Y for Kalman Filter
// NOTE: lat0 and lon0 are the reference coordinates for your point (0,0) in the space
void latlon_to_xy(float lat0, float lon0, float lat, float lon, float *x, float *y) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	ed2d 8b02 	vpush	{d8}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80017b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80017ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80017be:	edc7 1a02 	vstr	s3, [r7, #8]
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
    float dlat = deg_to_rad(lat - lat0);
 80017c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80017ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	f7ff ffc7 	bl	8001768 <deg_to_rad>
 80017da:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float dlon = deg_to_rad(lon - lon0);
 80017de:	ed97 7a02 	vldr	s14, [r7, #8]
 80017e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	f7ff ffbb 	bl	8001768 <deg_to_rad>
 80017f2:	ed87 0a08 	vstr	s0, [r7, #32]

    float mean_lat = deg_to_rad((lat + lat0) / 2.0f);
 80017f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80017fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001806:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800180a:	eeb0 0a47 	vmov.f32	s0, s14
 800180e:	f7ff ffab 	bl	8001768 <deg_to_rad>
 8001812:	ed87 0a07 	vstr	s0, [r7, #28]

    *x = EARTH_RADIUS * dlon * cosf(mean_lat);  // East-West
 8001816:	edd7 7a08 	vldr	s15, [r7, #32]
 800181a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001858 <latlon_to_xy+0xb0>
 800181e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001822:	ed97 0a07 	vldr	s0, [r7, #28]
 8001826:	f007 fd13 	bl	8009250 <cosf>
 800182a:	eef0 7a40 	vmov.f32	s15, s0
 800182e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	edc3 7a00 	vstr	s15, [r3]
    *y = EARTH_RADIUS * dlat;                   // North-South
 8001838:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800183c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001858 <latlon_to_xy+0xb0>
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	edc3 7a00 	vstr	s15, [r3]
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	@ 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	ecbd 8b02 	vpop	{d8}
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	4ac26d70 	.word	0x4ac26d70

0800185c <get_GPS_VelocityComponents>:


void get_GPS_VelocityComponents(float speed_knots, float heading_deg, float* vx, float* vy){
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	ed87 0a03 	vstr	s0, [r7, #12]
 8001866:	edc7 0a02 	vstr	s1, [r7, #8]
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    float speed_mps = speed_knots * KNOTS_TO_MPS;
 800186e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001872:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80018c8 <get_GPS_VelocityComponents+0x6c>
 8001876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187a:	edc7 7a05 	vstr	s15, [r7, #20]
    float heading_rad = deg_to_rad(heading_deg);
 800187e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001882:	f7ff ff71 	bl	8001768 <deg_to_rad>
 8001886:	ed87 0a04 	vstr	s0, [r7, #16]

    // Note: heading 0° is North, 90° is East (standard in GPS)
    //   X = East = sin(heading)
    //   Y = North = cos(heading)

    *vx = speed_mps * sinf(heading_rad);  // East
 800188a:	ed97 0a04 	vldr	s0, [r7, #16]
 800188e:	f007 fd23 	bl	80092d8 <sinf>
 8001892:	eeb0 7a40 	vmov.f32	s14, s0
 8001896:	edd7 7a05 	vldr	s15, [r7, #20]
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	edc3 7a00 	vstr	s15, [r3]
    *vy = speed_mps * cosf(heading_rad);  // North
 80018a4:	ed97 0a04 	vldr	s0, [r7, #16]
 80018a8:	f007 fcd2 	bl	8009250 <cosf>
 80018ac:	eeb0 7a40 	vmov.f32	s14, s0
 80018b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	edc3 7a00 	vstr	s15, [r3]
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	3f03b29a 	.word	0x3f03b29a

080018cc <KF_Init>:
static void matricesToZero(KalmanFusion* kf);
static void matrixToZero(float32_t*, uint8_t);
static void initMatrices(KalmanFusion* kf);


void KF_Init(KalmanFusion* kf) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	// Start allocated matrices in a known value (0)
	matricesToZero(kf);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fb82 	bl	8001fde <matricesToZero>
	// Initialize matrices
	initMatrices(kf);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa28 	bl	8001d30 <initMatrices>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <KF_Predict>:


void KF_Predict(KalmanFusion* kf, float32_t* in_data){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0dc      	sub	sp, #368	@ 0x170
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80018f2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018f6:	6018      	str	r0, [r3, #0]
 80018f8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80018fc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001900:	6019      	str	r1, [r3, #0]
	float32_t temp2_data[SQUARE_MATRIX_SIZE];
	float32_t control_aux_data[STATE_SPACE_VECTOR_ROWS];
	float32_t input_data[CONTROL_INPUTS];

	// Start to known values
	matrixToZero(temp1_data, SQUARE_MATRIX_SIZE);
 8001902:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001906:	2124      	movs	r1, #36	@ 0x24
 8001908:	4618      	mov	r0, r3
 800190a:	f000 fb57 	bl	8001fbc <matrixToZero>
	matrixToZero(temp2_data, SQUARE_MATRIX_SIZE);
 800190e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001912:	2124      	movs	r1, #36	@ 0x24
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fb51 	bl	8001fbc <matrixToZero>
	matrixToZero(control_aux_data, STATE_SPACE_VECTOR_ROWS);
 800191a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800191e:	2106      	movs	r1, #6
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fb4b 	bl	8001fbc <matrixToZero>
	// Set control inputs
	input_data[0] = *in_data;
 8001926:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800192a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001936:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800193a:	601a      	str	r2, [r3, #0]
	input_data[1] = *(in_data + 1);
 800193c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001940:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800194c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001950:	605a      	str	r2, [r3, #4]
	input_data[2] = *(in_data + 2);
 8001952:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001956:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001962:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001966:	609a      	str	r2, [r3, #8]
	arm_matrix_instance_f32 control_aux;
	arm_matrix_instance_f32 temp1;
	arm_matrix_instance_f32 temp2;
	arm_matrix_instance_f32 input;
	// Initialize
	arm_mat_init_f32(&control_aux, STATE_SPACE_VECTOR_ROWS, 1, control_aux_data);
 8001968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800196c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001970:	2201      	movs	r2, #1
 8001972:	2106      	movs	r1, #6
 8001974:	f007 fbfe 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&temp1, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, temp1_data);
 8001978:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800197c:	f107 001c 	add.w	r0, r7, #28
 8001980:	2206      	movs	r2, #6
 8001982:	2106      	movs	r1, #6
 8001984:	f007 fbf6 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&temp2, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, temp2_data);
 8001988:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800198c:	f107 0014 	add.w	r0, r7, #20
 8001990:	2206      	movs	r2, #6
 8001992:	2106      	movs	r1, #6
 8001994:	f007 fbee 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&input, CONTROL_INPUTS, 1, input_data);
 8001998:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800199c:	f107 000c 	add.w	r0, r7, #12
 80019a0:	2201      	movs	r2, #1
 80019a2:	2103      	movs	r1, #3
 80019a4:	f007 fbe6 	bl	8009174 <arm_mat_init_f32>
	// Prediction stage 1
	// x_check_k = F * x_hat_prev + B * v_prev
	arm_mat_mult_f32(&kf->F, &kf->x_hat_prev, &kf->x_check);     // F * x_hat_prev
 80019a8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f103 0010 	add.w	r0, r3, #16
 80019b6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019be:	6819      	ldr	r1, [r3, #0]
 80019c0:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019c4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3350      	adds	r3, #80	@ 0x50
 80019cc:	461a      	mov	r2, r3
 80019ce:	f007 fa2b 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &input, &control_aux);		 		 // B * u
 80019d2:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019d6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3318      	adds	r3, #24
 80019de:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80019e2:	f107 010c 	add.w	r1, r7, #12
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fa1e 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->x_check, &control_aux, &kf->x_check);   // F * x_hat_prev + B * u
 80019ec:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019f0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80019fa:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8001a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f007 fbb5 	bl	800917c <arm_mat_add_f32>

	// Prediction stage 2
	// P_check_k = F * P_hat_prev * F^T + Q
	arm_mat_mult_f32(&kf->F, &kf->P_hat_prev, &temp1);
 8001a12:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a16:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f103 0010 	add.w	r0, r3, #16
 8001a20:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	f107 021c 	add.w	r2, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	f007 f9f9 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_trans_f32(&kf->F, &temp2);
 8001a36:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a3a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	3310      	adds	r3, #16
 8001a42:	f107 0214 	add.w	r2, r7, #20
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f007 f927 	bl	8008c9c <arm_mat_trans_f32>
	arm_mat_mult_f32(&temp1, &temp2, &kf->P_check);
 8001a4e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a52:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001a5c:	f107 0114 	add.w	r1, r7, #20
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 f9df 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->P_check, &kf->Q, &kf->P_check);
 8001a6a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001a78:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a7c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f103 0120 	add.w	r1, r3, #32
 8001a86:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a8a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3348      	adds	r3, #72	@ 0x48
 8001a92:	461a      	mov	r2, r3
 8001a94:	f007 fb72 	bl	800917c <arm_mat_add_f32>
}
 8001a98:	bf00      	nop
 8001a9a:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <KF_Update>:


void KF_Update(KalmanFusion* kf, arm_matrix_instance_f32* Z_k){
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ab0:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001ab4:	6018      	str	r0, [r3, #0]
 8001ab6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001aba:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8001abe:	6019      	str	r1, [r3, #0]
	//float32_t subtract_aux[SQUARE_MATRIX_SIZE];
	float32_t KH_data[SQUARE_MATRIX_SIZE];
	float32_t I_minus_KH_data[SQUARE_MATRIX_SIZE];

	// Start to known values
	matrixToZero(numerator_data, SQUARE_MATRIX_SIZE);
 8001ac0:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8001ac4:	2124      	movs	r1, #36	@ 0x24
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 fa78 	bl	8001fbc <matrixToZero>
	matrixToZero(K_gain_data, SQUARE_MATRIX_SIZE);
 8001acc:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8001ad0:	2124      	movs	r1, #36	@ 0x24
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fa72 	bl	8001fbc <matrixToZero>
	matrixToZero(temp_H_P_data, SQUARE_MATRIX_SIZE);
 8001ad8:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001adc:	2124      	movs	r1, #36	@ 0x24
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fa6c 	bl	8001fbc <matrixToZero>
	matrixToZero(temp_H_X_data, STATE_SPACE_VECTOR_ROWS);
 8001ae4:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001ae8:	2106      	movs	r1, #6
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fa66 	bl	8001fbc <matrixToZero>
	matrixToZero(HPH_data, SQUARE_MATRIX_SIZE);
 8001af0:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8001af4:	2124      	movs	r1, #36	@ 0x24
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fa60 	bl	8001fbc <matrixToZero>
	matrixToZero(inverse_aux_data, SQUARE_MATRIX_SIZE);
 8001afc:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b00:	2124      	movs	r1, #36	@ 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa5a 	bl	8001fbc <matrixToZero>
	matrixToZero(KH_data, SQUARE_MATRIX_SIZE);
 8001b08:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b0c:	2124      	movs	r1, #36	@ 0x24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fa54 	bl	8001fbc <matrixToZero>
	matrixToZero(I_minus_KH_data, SQUARE_MATRIX_SIZE);
 8001b14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b18:	2124      	movs	r1, #36	@ 0x24
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fa4e 	bl	8001fbc <matrixToZero>
	arm_matrix_instance_f32 HPH;
	arm_matrix_instance_f32 inverse_aux;
	arm_matrix_instance_f32 KH;
	arm_matrix_instance_f32 I_minus_KH;
	// Initialize
	arm_mat_init_f32(&numerator, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, numerator_data);
 8001b20:	f507 7371 	add.w	r3, r7, #964	@ 0x3c4
 8001b24:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8001b28:	2206      	movs	r2, #6
 8001b2a:	2106      	movs	r1, #6
 8001b2c:	f007 fb22 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&K_gain, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, K_gain_data);
 8001b30:	f507 734d 	add.w	r3, r7, #820	@ 0x334
 8001b34:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8001b38:	2206      	movs	r2, #6
 8001b3a:	2106      	movs	r1, #6
 8001b3c:	f007 fb1a 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_H_P, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, temp_H_P_data);
 8001b40:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001b44:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001b48:	2206      	movs	r2, #6
 8001b4a:	2106      	movs	r1, #6
 8001b4c:	f007 fb12 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&temp_H_X, STATE_SPACE_VECTOR_ROWS, 1, temp_H_X_data);
 8001b50:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001b54:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2106      	movs	r1, #6
 8001b5c:	f007 fb0a 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&HPH, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, HPH_data);
 8001b60:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8001b64:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001b68:	2206      	movs	r2, #6
 8001b6a:	2106      	movs	r1, #6
 8001b6c:	f007 fb02 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&inverse_aux, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, inverse_aux_data);
 8001b70:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8001b74:	f107 001c 	add.w	r0, r7, #28
 8001b78:	2206      	movs	r2, #6
 8001b7a:	2106      	movs	r1, #6
 8001b7c:	f007 fafa 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&KH, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, KH_data);
 8001b80:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001b84:	f107 0014 	add.w	r0, r7, #20
 8001b88:	2206      	movs	r2, #6
 8001b8a:	2106      	movs	r1, #6
 8001b8c:	f007 faf2 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&I_minus_KH, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, I_minus_KH_data);
 8001b90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b94:	f107 000c 	add.w	r0, r7, #12
 8001b98:	2206      	movs	r2, #6
 8001b9a:	2106      	movs	r1, #6
 8001b9c:	f007 faea 	bl	8009174 <arm_mat_init_f32>

	// K_k = P_check_k * H^T * (H * P_check_k * H^T + 0.01)^(-1)
	arm_mat_mult_f32(&kf->P_check, &kf->H_transposed, &numerator);  // P_check_k * H^T
 8001ba0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ba4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001bae:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bb2:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3330      	adds	r3, #48	@ 0x30
 8001bba:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f007 f932 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->H, &kf->P_check, &temp_H_P);				// H * P_check_k
 8001bc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bc8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001bd2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bd6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3348      	adds	r3, #72	@ 0x48
 8001bde:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001be2:	4619      	mov	r1, r3
 8001be4:	f007 f920 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_mult_f32(&temp_H_P, &kf->H_transposed, &HPH); 			// H * P_check_k * H^T
 8001be8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bec:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8001bf6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001bfa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 f912 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_add_f32(&HPH, &kf->R, &inverse_aux);   				    // (H * P_check_k * H^T + 0.01)^(-1)
 8001c04:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001c08:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001c12:	f107 021c 	add.w	r2, r7, #28
 8001c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 faae 	bl	800917c <arm_mat_add_f32>
	arm_status flag = arm_mat_inverse_f32(&inverse_aux, &K_gain);
 8001c20:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f007 f99c 	bl	8008f68 <arm_mat_inverse_f32>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	if(flag != ARM_MATH_SUCCESS){
 8001c36:	f997 3457 	ldrsb.w	r3, [r7, #1111]	@ 0x457
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <KF_Update+0x1a0>
		printf("Non invertible matrix\n");
 8001c3e:	483b      	ldr	r0, [pc, #236]	@ (8001d2c <KF_Update+0x288>)
 8001c40:	f009 ff86 	bl	800bb50 <puts>
	}
	arm_mat_mult_f32(&K_gain, &numerator, &K_gain);	 // Total K gain
 8001c44:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001c48:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8001c4c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c50:	4618      	mov	r0, r3
 8001c52:	f007 f8e9 	bl	8008e28 <arm_mat_mult_f32>

	// x_hat_k = x_check_k + K_k * (Z_k - H * x_check_k)
	arm_mat_mult_f32(&kf->H, &kf->x_check, &temp_H_X);			// H * x_check_k
 8001c56:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001c5a:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001c64:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001c68:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3350      	adds	r3, #80	@ 0x50
 8001c70:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c74:	4619      	mov	r1, r3
 8001c76:	f007 f8d7 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_sub_f32(Z_k, &temp_H_X, &temp_H_X);					// Z_k - H * x_check_k
 8001c7a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c7e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001c82:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001c86:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	f007 f862 	bl	8008d54 <arm_mat_sub_f32>
	arm_mat_mult_f32(&K_gain, &temp_H_X, &temp_H_X);			// K_k * (Z_k - H * x_check_k)
 8001c90:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c94:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001c98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f007 f8c3 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->x_check, &temp_H_X, &kf->x_hat_prev);  // Corrected estimate
 8001ca2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ca6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001cb0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001cb4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f007 fa5c 	bl	800917c <arm_mat_add_f32>

	// P_hat_k = (I - K_k * H) * P_check_k
	arm_mat_mult_f32(&K_gain, &kf->H, &KH);         // K * H
 8001cc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001cc8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8001cd2:	f107 0214 	add.w	r2, r7, #20
 8001cd6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f007 f8a4 	bl	8008e28 <arm_mat_mult_f32>
	arm_mat_sub_f32(&kf->I, &KH, &I_minus_KH);      // I - K * H
 8001ce0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001ce4:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3340      	adds	r3, #64	@ 0x40
 8001cec:	f107 020c 	add.w	r2, r7, #12
 8001cf0:	f107 0114 	add.w	r1, r7, #20
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f007 f82d 	bl	8008d54 <arm_mat_sub_f32>
	arm_mat_mult_f32(&I_minus_KH, &kf->P_check, &kf->P_hat_prev); // Update P_hat_k
 8001cfa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001cfe:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8001d08:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001d0c:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f103 0208 	add.w	r2, r3, #8
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f007 f884 	bl	8008e28 <arm_mat_mult_f32>
}
 8001d20:	bf00      	nop
 8001d22:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	0800e970 	.word	0x0800e970

08001d30 <initMatrices>:


static void initMatrices(KalmanFusion* kf){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e035      	b.n	8001daa <initMatrices+0x7a>
		// State propagation A (or F)
		kf->F_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 1;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	3340      	adds	r3, #64	@ 0x40
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d52:	601a      	str	r2, [r3, #0]
		kf->F_transposed_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 1;
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	3364      	adds	r3, #100	@ 0x64
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d68:	601a      	str	r2, [r3, #0]

		if(i % 2 == 0){
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <initMatrices+0x5e>
			// State propagation A (or F)
			kf->F_data[i * (STATE_SPACE_VECTOR_ROWS + 1) + 1] = delta_t;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	3301      	adds	r3, #1
 8001d80:	498b      	ldr	r1, [pc, #556]	@ (8001fb0 <initMatrices+0x280>)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	3340      	adds	r3, #64	@ 0x40
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	6019      	str	r1, [r3, #0]
 8001d8c:	e00a      	b.n	8001da4 <initMatrices+0x74>
		}else{
			kf->F_transposed_data[i * (STATE_SPACE_VECTOR_ROWS + 1) - 1] = delta_t;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	3b01      	subs	r3, #1
 8001d98:	4985      	ldr	r1, [pc, #532]	@ (8001fb0 <initMatrices+0x280>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	3364      	adds	r3, #100	@ 0x64
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	6019      	str	r1, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	3301      	adds	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d9c6      	bls.n	8001d3e <initMatrices+0xe>
		}
	}
	arm_mat_init_f32(&kf->F, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->F_data);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f103 0010 	add.w	r0, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001dbc:	2206      	movs	r2, #6
 8001dbe:	2106      	movs	r1, #6
 8001dc0:	f007 f9d8 	bl	8009174 <arm_mat_init_f32>

	// Control input
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73bb      	strb	r3, [r7, #14]
 8001dc8:	e02d      	b.n	8001e26 <initMatrices+0xf6>
		if(i < 3){
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d813      	bhi.n	8001df8 <initMatrices+0xc8>
			kf->B_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = (delta_t * delta_t) / 2;  // ddt
 8001dd0:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001fb4 <initMatrices+0x284>
 8001dd4:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8001fb4 <initMatrices+0x284>
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	7bba      	ldrb	r2, [r7, #14]
 8001dde:	4613      	mov	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	1a9b      	subs	r3, r3, r2
 8001de4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3388      	adds	r3, #136	@ 0x88
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	edc3 7a00 	vstr	s15, [r3]
		}
		if(i % 2 == 1){
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00d      	beq.n	8001e20 <initMatrices+0xf0>
			kf->B_data[i * (CONTROL_INPUTS) + (uint8_t)(i / 2)] = delta_t;  // dt
 8001e04:	7bba      	ldrb	r2, [r7, #14]
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	7bba      	ldrb	r2, [r7, #14]
 8001e0e:	0852      	lsrs	r2, r2, #1
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	4413      	add	r3, r2
 8001e14:	4966      	ldr	r1, [pc, #408]	@ (8001fb0 <initMatrices+0x280>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	3388      	adds	r3, #136	@ 0x88
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	6019      	str	r1, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	3301      	adds	r3, #1
 8001e24:	73bb      	strb	r3, [r7, #14]
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d9ce      	bls.n	8001dca <initMatrices+0x9a>
		}
	}
	arm_mat_init_f32(&kf->B, STATE_SPACE_VECTOR_ROWS, CONTROL_INPUTS, kf->B_data);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f103 0018 	add.w	r0, r3, #24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8001e38:	2203      	movs	r2, #3
 8001e3a:	2106      	movs	r1, #6
 8001e3c:	f007 f99a 	bl	8009174 <arm_mat_init_f32>

	// Measurements (GPS)
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001e40:	2300      	movs	r3, #0
 8001e42:	737b      	strb	r3, [r7, #13]
 8001e44:	e01b      	b.n	8001e7e <initMatrices+0x14e>
		// Assuming position and velocity measurements in X and Y only
		if(i < 4){
 8001e46:	7b7b      	ldrb	r3, [r7, #13]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d815      	bhi.n	8001e78 <initMatrices+0x148>
			kf->H_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 1;
 8001e4c:	7b7a      	ldrb	r2, [r7, #13]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	33be      	adds	r3, #190	@ 0xbe
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e60:	601a      	str	r2, [r3, #0]
			kf->H_transposed_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 1;  // In this case they remain the same
 8001e62:	7b7a      	ldrb	r2, [r7, #13]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	1a9b      	subs	r3, r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	33e2      	adds	r3, #226	@ 0xe2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e76:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001e78:	7b7b      	ldrb	r3, [r7, #13]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	737b      	strb	r3, [r7, #13]
 8001e7e:	7b7b      	ldrb	r3, [r7, #13]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d9e0      	bls.n	8001e46 <initMatrices+0x116>
		}
	}
	arm_mat_init_f32(&kf->H, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->H_data);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001e90:	2206      	movs	r2, #6
 8001e92:	2106      	movs	r1, #6
 8001e94:	f007 f96e 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&kf->H_transposed, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->H_transposed_data);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 8001ea4:	2206      	movs	r2, #6
 8001ea6:	2106      	movs	r1, #6
 8001ea8:	f007 f964 	bl	8009174 <arm_mat_init_f32>

	// Identity matrix
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001eac:	2300      	movs	r3, #0
 8001eae:	733b      	strb	r3, [r7, #12]
 8001eb0:	e00e      	b.n	8001ed0 <initMatrices+0x1a0>
		kf->I_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 1;
 8001eb2:	7b3a      	ldrb	r2, [r7, #12]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ec8:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001eca:	7b3b      	ldrb	r3, [r7, #12]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	733b      	strb	r3, [r7, #12]
 8001ed0:	7b3b      	ldrb	r3, [r7, #12]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d9ed      	bls.n	8001eb2 <initMatrices+0x182>
	}
	arm_mat_init_f32(&kf->I, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->I_data);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	2106      	movs	r1, #6
 8001ee6:	f007 f945 	bl	8009174 <arm_mat_init_f32>

	// Process (Model) Covariance
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001eea:	2300      	movs	r3, #0
 8001eec:	72fb      	strb	r3, [r7, #11]
 8001eee:	e00c      	b.n	8001f0a <initMatrices+0x1da>
		kf->Q_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 0.1;
 8001ef0:	7afa      	ldrb	r2, [r7, #11]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	339a      	adds	r3, #154	@ 0x9a
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb8 <initMatrices+0x288>)
 8001f02:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001f04:	7afb      	ldrb	r3, [r7, #11]
 8001f06:	3301      	adds	r3, #1
 8001f08:	72fb      	strb	r3, [r7, #11]
 8001f0a:	7afb      	ldrb	r3, [r7, #11]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d9ef      	bls.n	8001ef0 <initMatrices+0x1c0>
	}
	arm_mat_init_f32(&kf->Q, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->Q_data);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f103 0020 	add.w	r0, r3, #32
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001f1c:	2206      	movs	r2, #6
 8001f1e:	2106      	movs	r1, #6
 8001f20:	f007 f928 	bl	8009174 <arm_mat_init_f32>

	// Sensor covariance matrix
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001f24:	2300      	movs	r3, #0
 8001f26:	72bb      	strb	r3, [r7, #10]
 8001f28:	e00d      	b.n	8001f46 <initMatrices+0x216>
		kf->R_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 0.1;   // ADJUST THIS AND FINE TUNE
 8001f2a:	7aba      	ldrb	r2, [r7, #10]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <initMatrices+0x288>)
 8001f3e:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	3301      	adds	r3, #1
 8001f44:	72bb      	strb	r3, [r7, #10]
 8001f46:	7abb      	ldrb	r3, [r7, #10]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d9ee      	bls.n	8001f2a <initMatrices+0x1fa>
	}
	arm_mat_init_f32(&kf->R, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->R_data);   // CHECK DIMENSIONALITY
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8001f58:	2206      	movs	r2, #6
 8001f5a:	2106      	movs	r1, #6
 8001f5c:	f007 f90a 	bl	8009174 <arm_mat_init_f32>

	// KF matrices
	arm_mat_init_f32(&kf->P_hat_prev, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->P_hat_prev_data);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f103 0008 	add.w	r0, r3, #8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3370      	adds	r3, #112	@ 0x70
 8001f6a:	2206      	movs	r2, #6
 8001f6c:	2106      	movs	r1, #6
 8001f6e:	f007 f901 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&kf->P_check, STATE_SPACE_VECTOR_ROWS, STATE_SPACE_VECTOR_ROWS, kf->P_check_data);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f503 63a7 	add.w	r3, r3, #1336	@ 0x538
 8001f7e:	2206      	movs	r2, #6
 8001f80:	2106      	movs	r1, #6
 8001f82:	f007 f8f7 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&kf->x_hat_prev, STATE_SPACE_VECTOR_ROWS, 1, kf->x_hat_prev_data);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3358      	adds	r3, #88	@ 0x58
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2106      	movs	r1, #6
 8001f90:	f007 f8f0 	bl	8009174 <arm_mat_init_f32>
	arm_mat_init_f32(&kf->x_check, STATE_SPACE_VECTOR_ROWS, 1, kf->x_check_data);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2106      	movs	r1, #6
 8001fa4:	f007 f8e6 	bl	8009174 <arm_mat_init_f32>
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	3c23d70a 	.word	0x3c23d70a
 8001fb4:	3c23d70a 	.word	0x3c23d70a
 8001fb8:	3dcccccd 	.word	0x3dcccccd

08001fbc <matrixToZero>:


static void matrixToZero(float32_t* data_array, uint8_t array_size){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
	memset(data_array, 0, sizeof(float32_t) * array_size);
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	2100      	movs	r1, #0
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f009 fef1 	bl	800bdb8 <memset>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <matricesToZero>:


static void matricesToZero(KalmanFusion* kf){
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
	// State propagation (A)
	matrixToZero(kf->F_data, SQUARE_MATRIX_SIZE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fec:	2124      	movs	r1, #36	@ 0x24
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ffe4 	bl	8001fbc <matrixToZero>
	matrixToZero(kf->F_transposed_data, SQUARE_MATRIX_SIZE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001ffa:	2124      	movs	r1, #36	@ 0x24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffdd 	bl	8001fbc <matrixToZero>
	// Control input (B)
	matrixToZero(kf->B_data, STATE_SPACE_VECTOR_ROWS * CONTROL_INPUTS);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002008:	2112      	movs	r1, #18
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ffd6 	bl	8001fbc <matrixToZero>
	// Previous estimate
	matrixToZero(kf->x_hat_prev_data, STATE_SPACE_VECTOR_ROWS);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3358      	adds	r3, #88	@ 0x58
 8002014:	2106      	movs	r1, #6
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ffd0 	bl	8001fbc <matrixToZero>
	// Process Noise (Model) Covariance Q
	matrixToZero(kf->Q_data, SQUARE_MATRIX_SIZE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002022:	2124      	movs	r1, #36	@ 0x24
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ffc9 	bl	8001fbc <matrixToZero>
	// Measurement Matrix (H)
	matrixToZero(kf->H_data, SQUARE_MATRIX_SIZE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002030:	2124      	movs	r1, #36	@ 0x24
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffc2 	bl	8001fbc <matrixToZero>
	matrixToZero(kf->H_transposed_data, SQUARE_MATRIX_SIZE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 800203e:	2124      	movs	r1, #36	@ 0x24
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ffbb 	bl	8001fbc <matrixToZero>
	// Previous Total Error
	matrixToZero(kf->P_hat_prev_data, SQUARE_MATRIX_SIZE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	3370      	adds	r3, #112	@ 0x70
 800204a:	2124      	movs	r1, #36	@ 0x24
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ffb5 	bl	8001fbc <matrixToZero>
	// Sensor covariance
	matrixToZero(kf->R_data, SQUARE_MATRIX_SIZE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 8002058:	2124      	movs	r1, #36	@ 0x24
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff ffae 	bl	8001fbc <matrixToZero>
	// Identity matrix auxiliary
	matrixToZero(kf->I_data, SQUARE_MATRIX_SIZE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8002066:	2124      	movs	r1, #36	@ 0x24
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ffa7 	bl	8001fbc <matrixToZero>
	// Update
	matrixToZero(kf->x_check_data, STATE_SPACE_VECTOR_ROWS);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f503 63b9 	add.w	r3, r3, #1480	@ 0x5c8
 8002074:	2106      	movs	r1, #6
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ffa0 	bl	8001fbc <matrixToZero>
	matrixToZero(kf->P_check_data, SQUARE_MATRIX_SIZE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 63a7 	add.w	r3, r3, #1336	@ 0x538
 8002082:	2124      	movs	r1, #36	@ 0x24
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff99 	bl	8001fbc <matrixToZero>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <LoraGPIOsConfig>:
};

// Custom Initialization parameters
LoraConfigStruct *loraConfigStruct;

void LoraGPIOsConfig(LoraConfigStruct *configStruct){
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	@ 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    // NOTE: This function assumes you have previously enabled port RCC clock from the GPIOs used with LoRa Module
    // Initialization of SPI channels
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 800209e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 80020aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020b4:	4b28      	ldr	r3, [pc, #160]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	4a27      	ldr	r2, [pc, #156]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 80020ba:	f043 0302 	orr.w	r3, r3, #2
 80020be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <LoraGPIOsConfig+0xc4>)
 80020c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = configStruct->miso_pin | configStruct->mosi_pin | configStruct->sck_pin;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	89da      	ldrh	r2, [r3, #14]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	899b      	ldrh	r3, [r3, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8a1b      	ldrh	r3, [r3, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fa:	2302      	movs	r3, #2
 80020fc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(configStruct->spi_port, &GPIO_InitStruct);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f107 0214 	add.w	r2, r7, #20
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fa73 	bl	80055f4 <HAL_GPIO_Init>

    // Initialization of NSS line
    GPIO_InitStruct.Pin = configStruct->nss_pin;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	8a5b      	ldrh	r3, [r3, #18]
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002114:	2301      	movs	r3, #1
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(configStruct->nss_port, &GPIO_InitStruct);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f107 0214 	add.w	r2, r7, #20
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f003 fa64 	bl	80055f4 <HAL_GPIO_Init>

    // This thing causing all the errors in GPS interrupt (seems like it shares resources with usart1)
    // Initialization of RST Line
    GPIO_InitStruct.Pin = configStruct->rst_pin;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8a9b      	ldrh	r3, [r3, #20]
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(configStruct->rst_port, &GPIO_InitStruct);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f107 0214 	add.w	r2, r7, #20
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f003 fa53 	bl	80055f4 <HAL_GPIO_Init>
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	@ 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000

0800215c <LoraDefaultInit>:

// Intialize Lora module with default values
uint8_t LoraDefaultInit(void){
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
	loraConfigStruct = &defaultConfigStruct;
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <LoraDefaultInit+0x18>)
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <LoraDefaultInit+0x1c>)
 8002164:	601a      	str	r2, [r3, #0]
    return LoraInit(&defaultConfigStruct);
 8002166:	4804      	ldr	r0, [pc, #16]	@ (8002178 <LoraDefaultInit+0x1c>)
 8002168:	f000 f808 	bl	800217c <LoraInit>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000234 	.word	0x20000234
 8002178:	20000010 	.word	0x20000010

0800217c <LoraInit>:

uint8_t LoraInit(LoraConfigStruct *loraConfig){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
    // Configure GPIOS
    LoraGPIOsConfig(loraConfig);  // Uncomment if you havent already configured your pins
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff85 	bl	8002094 <LoraGPIOsConfig>

    // Hardware Reset  (Optional but recommended)
    HAL_GPIO_WritePin(loraConfig->rst_port, loraConfig->rst_pin, GPIO_PIN_SET);  // RESET IS LOW OR HIGH?
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6898      	ldr	r0, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	8a9b      	ldrh	r3, [r3, #20]
 8002192:	2201      	movs	r2, #1
 8002194:	4619      	mov	r1, r3
 8002196:	f003 fb97 	bl	80058c8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800219a:	2032      	movs	r0, #50	@ 0x32
 800219c:	f001 fee6 	bl	8003f6c <HAL_Delay>
    HAL_GPIO_WritePin(loraConfig->rst_port, loraConfig->rst_pin, GPIO_PIN_RESET);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8a9b      	ldrh	r3, [r3, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	f003 fb8c 	bl	80058c8 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80021b0:	2032      	movs	r0, #50	@ 0x32
 80021b2:	f001 fedb 	bl	8003f6c <HAL_Delay>
    HAL_GPIO_WritePin(loraConfig->rst_port, loraConfig->rst_pin, GPIO_PIN_SET);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6898      	ldr	r0, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8a9b      	ldrh	r3, [r3, #20]
 80021be:	2201      	movs	r2, #1
 80021c0:	4619      	mov	r1, r3
 80021c2:	f003 fb81 	bl	80058c8 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80021c6:	2019      	movs	r0, #25
 80021c8:	f001 fed0 	bl	8003f6c <HAL_Delay>

    // Set NSS to high (not communicating with module currently)
    HAL_GPIO_WritePin(loraConfig->nss_port, loraConfig->nss_pin, GPIO_PIN_SET);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6858      	ldr	r0, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8a5b      	ldrh	r3, [r3, #18]
 80021d4:	2201      	movs	r2, #1
 80021d6:	4619      	mov	r1, r3
 80021d8:	f003 fb76 	bl	80058c8 <HAL_GPIO_WritePin>

    // Begin SPI communication in specified handler
    if(HAL_SPI_Init(spi_handler) != HAL_OK){
 80021dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002254 <LoraInit+0xd8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f005 fb29 	bl	8007838 <HAL_SPI_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <LoraInit+0x74>
        return LORA_NOT_OK;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e02d      	b.n	800224c <LoraInit+0xd0>
    }

    // Get and verify LoRa version
    if(GetLoraVersion() == 0){
 80021f0:	f000 f8ef 	bl	80023d2 <GetLoraVersion>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <LoraInit+0x82>
    	return LORA_NOT_OK;  // Error
 80021fa:	2301      	movs	r3, #1
 80021fc:	e026      	b.n	800224c <LoraInit+0xd0>
    }

    // Set to sleep to modify freq and other values
    LoraSleep();
 80021fe:	f000 fa27 	bl	8002650 <LoraSleep>
    // Set Lora frequency
    LoraSetFrequency(loraConfig->freq);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f000 f8ea 	bl	80023e4 <LoraSetFrequency>

    // Configure RX and TX FIFOs
    LoraWriteRegister(REG_FIFO_TX_BASE_ADDR, 0);
 8002210:	2100      	movs	r1, #0
 8002212:	200e      	movs	r0, #14
 8002214:	f000 f882 	bl	800231c <LoraWriteRegister>
    LoraWriteRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8002218:	2100      	movs	r1, #0
 800221a:	200f      	movs	r0, #15
 800221c:	f000 f87e 	bl	800231c <LoraWriteRegister>

    // set LNA boost
    LoraWriteRegister(REG_LNA, LoraReadRegister(REG_LNA) | 0x03);
 8002220:	200c      	movs	r0, #12
 8002222:	f000 f865 	bl	80022f0 <LoraReadRegister>
 8002226:	4603      	mov	r3, r0
 8002228:	f043 0303 	orr.w	r3, r3, #3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	200c      	movs	r0, #12
 8002232:	f000 f873 	bl	800231c <LoraWriteRegister>
    // set auto AGC
    LoraWriteRegister(REG_MODEM_CONFIG_3, 0x04);
 8002236:	2104      	movs	r1, #4
 8002238:	2026      	movs	r0, #38	@ 0x26
 800223a:	f000 f86f 	bl	800231c <LoraWriteRegister>
    // Set transmission power
    LoraSetTxPower(17, PA_BOOST_MODE);
 800223e:	2101      	movs	r1, #1
 8002240:	2011      	movs	r0, #17
 8002242:	f000 f9b5 	bl	80025b0 <LoraSetTxPower>

    LoraSetIdle();
 8002246:	f000 f9fb 	bl	8002640 <LoraSetIdle>
    return LORA_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000230 	.word	0x20000230

08002258 <LoraSetSPIHandler>:

// Function to set a previously configured SPI handler (USE IT BEFORE ANY OTHER FUNCTION)
void LoraSetSPIHandler(SPI_HandleTypeDef *hspi){
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
    spi_handler = hspi;
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <LoraSetSPIHandler+0x1c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000230 	.word	0x20000230

08002278 <LoraSendSPI>:

// Function to send some address and a data byte to the module
uint8_t LoraSendSPI(uint8_t address, uint8_t value, LoraConfigStruct *loraConfig){
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af02      	add	r7, sp, #8
 800227e:	4603      	mov	r3, r0
 8002280:	603a      	str	r2, [r7, #0]
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	460b      	mov	r3, r1
 8002286:	71bb      	strb	r3, [r7, #6]
    uint8_t response = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(loraConfig->nss_port, loraConfig->nss_pin, GPIO_PIN_RESET);          // Set to low the nss line to enable module for sending data to it
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6858      	ldr	r0, [r3, #4]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	8a5b      	ldrh	r3, [r3, #18]
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	f003 fb16 	bl	80058c8 <HAL_GPIO_WritePin>
    if(HAL_SPI_Transmit(spi_handler, &address, 1, SPI_TRANSMIT_TIMEOUT)!= HAL_OK){return LORA_NOT_OK;}                   // Send the address
 800229c:	4b13      	ldr	r3, [pc, #76]	@ (80022ec <LoraSendSPI+0x74>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	1df9      	adds	r1, r7, #7
 80022a2:	2364      	movs	r3, #100	@ 0x64
 80022a4:	2201      	movs	r2, #1
 80022a6:	f005 fb6a 	bl	800797e <HAL_SPI_Transmit>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <LoraSendSPI+0x3c>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e017      	b.n	80022e4 <LoraSendSPI+0x6c>
    if(HAL_SPI_TransmitReceive(spi_handler, &value, &response, 1, SPI_TRANSMIT_TIMEOUT) != HAL_OK){return LORA_NOT_OK;}    // The 1 is the number of bytes you want to transmit
 80022b4:	4b0d      	ldr	r3, [pc, #52]	@ (80022ec <LoraSendSPI+0x74>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f107 020f 	add.w	r2, r7, #15
 80022bc:	1db9      	adds	r1, r7, #6
 80022be:	2364      	movs	r3, #100	@ 0x64
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	f005 fcd1 	bl	8007c6a <HAL_SPI_TransmitReceive>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <LoraSendSPI+0x5a>
 80022ce:	2301      	movs	r3, #1
 80022d0:	e008      	b.n	80022e4 <LoraSendSPI+0x6c>
    HAL_GPIO_WritePin(loraConfig->nss_port, loraConfig->nss_pin, GPIO_PIN_SET);        // Set nss line low to disable
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	6858      	ldr	r0, [r3, #4]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	8a5b      	ldrh	r3, [r3, #18]
 80022da:	2201      	movs	r2, #1
 80022dc:	4619      	mov	r1, r3
 80022de:	f003 faf3 	bl	80058c8 <HAL_GPIO_WritePin>
    return response;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000230 	.word	0x20000230

080022f0 <LoraReadRegister>:

// Function to read registers from LoRa module
uint8_t LoraReadRegister(uint8_t address){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
    return LoraSendSPI(address & 0x7f, 0x00, loraConfigStruct);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002300:	b2db      	uxtb	r3, r3
 8002302:	4a05      	ldr	r2, [pc, #20]	@ (8002318 <LoraReadRegister+0x28>)
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ffb5 	bl	8002278 <LoraSendSPI>
 800230e:	4603      	mov	r3, r0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000234 	.word	0x20000234

0800231c <LoraWriteRegister>:

// Function to write data to registers
void LoraWriteRegister(uint8_t address, uint8_t value){
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	460a      	mov	r2, r1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
    LoraSendSPI(address | 0x80, value, loraConfigStruct);
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <LoraWriteRegister+0x2c>)
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	79b9      	ldrb	r1, [r7, #6]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff9c 	bl	8002278 <LoraSendSPI>
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000234 	.word	0x20000234

0800234c <LoraTransmit>:
	LoraTransmit(buffer);
	LoraEndPacket(0);
}

// Prepare to transmit
void LoraTransmit(const char* buffer){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	LoraWrite((uint8_t *)buffer, strlen(buffer));
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fd ff9b 	bl	8000290 <strlen>
 800235a:	4603      	mov	r3, r0
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 f804 	bl	800236c <LoraWrite>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <LoraWrite>:

// Function to actually transmit the data
void LoraWrite(const uint8_t *buffer, size_t size)  // Size_t is the same as unsigned long
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  int currentLength = LoraReadRegister(REG_PAYLOAD_LENGTH);
 8002376:	2022      	movs	r0, #34	@ 0x22
 8002378:	f7ff ffba 	bl	80022f0 <LoraReadRegister>
 800237c:	4603      	mov	r3, r0
 800237e:	60bb      	str	r3, [r7, #8]

  // Ensure total size is less than packet max allowed length
  if ((currentLength + size) > MAX_PKT_LENGTH) {
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	2bff      	cmp	r3, #255	@ 0xff
 8002388:	d903      	bls.n	8002392 <LoraWrite+0x26>
    size = MAX_PKT_LENGTH - currentLength;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002390:	603b      	str	r3, [r7, #0]
  }

  // write data
  for (size_t i = 0; i < size; i++) {
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e00a      	b.n	80023ae <LoraWrite+0x42>
    LoraWriteRegister(REG_FIFO, buffer[i]);
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4619      	mov	r1, r3
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff ffba 	bl	800231c <LoraWriteRegister>
  for (size_t i = 0; i < size; i++) {
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3f0      	bcc.n	8002398 <LoraWrite+0x2c>
  }

  // update length
  LoraWriteRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4413      	add	r3, r2
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	4619      	mov	r1, r3
 80023c4:	2022      	movs	r0, #34	@ 0x22
 80023c6:	f7ff ffa9 	bl	800231c <LoraWriteRegister>
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <GetLoraVersion>:

// Function to get the version of the LoRa module
uint8_t GetLoraVersion(void){
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
    return LoraReadRegister(REG_VERSION);
 80023d6:	2042      	movs	r0, #66	@ 0x42
 80023d8:	f7ff ff8a 	bl	80022f0 <LoraReadRegister>
 80023dc:	4603      	mov	r3, r0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <LoraSetFrequency>:
uint8_t LoraGetRXBytes(void){
	return LoraReadRegister(REG_RX_NB_BYTES);
}

// Expecting 915 MHz frequency (915E6)
void LoraSetFrequency(uint64_t frequency){  				// Configure FRF (Frequency Synthesis Register)
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;  // Given by datasheet formula
 80023ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f2:	f04f 0000 	mov.w	r0, #0
 80023f6:	f04f 0100 	mov.w	r1, #0
 80023fa:	04d9      	lsls	r1, r3, #19
 80023fc:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8002400:	04d0      	lsls	r0, r2, #19
 8002402:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <LoraSetFrequency+0x80>)
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	f7fe fc4e 	bl	8000ca8 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	e9c7 2302 	strd	r2, r3, [r7, #8]
	LoraWriteRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8002414:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	0c02      	lsrs	r2, r0, #16
 8002422:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002426:	0c0b      	lsrs	r3, r1, #16
 8002428:	b2d3      	uxtb	r3, r2
 800242a:	4619      	mov	r1, r3
 800242c:	2006      	movs	r0, #6
 800242e:	f7ff ff75 	bl	800231c <LoraWriteRegister>
	LoraWriteRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8002432:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	0a02      	lsrs	r2, r0, #8
 8002440:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002444:	0a0b      	lsrs	r3, r1, #8
 8002446:	b2d3      	uxtb	r3, r2
 8002448:	4619      	mov	r1, r3
 800244a:	2007      	movs	r0, #7
 800244c:	f7ff ff66 	bl	800231c <LoraWriteRegister>
	LoraWriteRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8002450:	7a3b      	ldrb	r3, [r7, #8]
 8002452:	4619      	mov	r1, r3
 8002454:	2008      	movs	r0, #8
 8002456:	f7ff ff61 	bl	800231c <LoraWriteRegister>
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	01e84800 	.word	0x01e84800

08002468 <LoraBeginPacket>:

// Configure packet format before sending
uint8_t LoraBeginPacket(uint8_t isImplicitHeader){   // Explicit header messages contain a header for detecting errors, implicits dont
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	if(IsTransmitting() == 1){
 8002472:	f000 f84f 	bl	8002514 <IsTransmitting>
 8002476:	4603      	mov	r3, r0
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <LoraBeginPacket+0x18>
		return 0;
 800247c:	2300      	movs	r3, #0
 800247e:	e027      	b.n	80024d0 <LoraBeginPacket+0x68>
	}

	// Set in idle (sleep but with internal oscillators enabled)
	LoraSetIdle();
 8002480:	f000 f8de 	bl	8002640 <LoraSetIdle>

	// Handle implicit and explicit headers
	if(isImplicitHeader == 1){
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d10b      	bne.n	80024a2 <LoraBeginPacket+0x3a>
		LoraWriteRegister(REG_MODEM_CONFIG_1, LoraReadRegister(REG_MODEM_CONFIG_1) | 0x01);
 800248a:	201d      	movs	r0, #29
 800248c:	f7ff ff30 	bl	80022f0 <LoraReadRegister>
 8002490:	4603      	mov	r3, r0
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	201d      	movs	r0, #29
 800249c:	f7ff ff3e 	bl	800231c <LoraWriteRegister>
 80024a0:	e00d      	b.n	80024be <LoraBeginPacket+0x56>
	}else if(isImplicitHeader == 0){
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10a      	bne.n	80024be <LoraBeginPacket+0x56>
		LoraWriteRegister(REG_MODEM_CONFIG_1, LoraReadRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80024a8:	201d      	movs	r0, #29
 80024aa:	f7ff ff21 	bl	80022f0 <LoraReadRegister>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	201d      	movs	r0, #29
 80024ba:	f7ff ff2f 	bl	800231c <LoraWriteRegister>
	}

	// reset FIFO address and payload length
    LoraWriteRegister(REG_FIFO_ADDR_PTR, 0);
 80024be:	2100      	movs	r1, #0
 80024c0:	200d      	movs	r0, #13
 80024c2:	f7ff ff2b 	bl	800231c <LoraWriteRegister>
    LoraWriteRegister(REG_PAYLOAD_LENGTH, 0);
 80024c6:	2100      	movs	r1, #0
 80024c8:	2022      	movs	r0, #34	@ 0x22
 80024ca:	f7ff ff27 	bl	800231c <LoraWriteRegister>
    return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <LoraEndPacket>:

uint8_t LoraEndPacket(uint8_t sync){
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
	// For now, only synchronous (wait for transmission completed by polling) tx is supported
	  LoraWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);   // Enable TX mode
 80024e2:	2183      	movs	r1, #131	@ 0x83
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff ff19 	bl	800231c <LoraWriteRegister>

	  while ((LoraReadRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80024ea:	e002      	b.n	80024f2 <LoraEndPacket+0x1a>
	        HAL_Delay(1);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f001 fd3d 	bl	8003f6c <HAL_Delay>
	  while ((LoraReadRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80024f2:	2012      	movs	r0, #18
 80024f4:	f7ff fefc 	bl	80022f0 <LoraReadRegister>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f4      	beq.n	80024ec <LoraEndPacket+0x14>
	  }
	  // clear IRQ's
	  LoraWriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8002502:	2108      	movs	r1, #8
 8002504:	2012      	movs	r0, #18
 8002506:	f7ff ff09 	bl	800231c <LoraWriteRegister>
	  return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <IsTransmitting>:
uint8_t LoraGetSpreadingFactor(void){
	return LoraReadRegister(REG_MODEM_CONFIG_2) >> 4;
}

// Function to check if module is currently transmitting info
uint8_t IsTransmitting(void){
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	if ((LoraReadRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) {
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fee9 	bl	80022f0 <LoraReadRegister>
 800251e:	4603      	mov	r3, r0
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d101      	bne.n	800252c <IsTransmitting+0x18>
	    return 1;
 8002528:	2301      	movs	r3, #1
 800252a:	e00c      	b.n	8002546 <IsTransmitting+0x32>
	}

	if (LoraReadRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
 800252c:	2012      	movs	r0, #18
 800252e:	f7ff fedf 	bl	80022f0 <LoraReadRegister>
 8002532:	4603      	mov	r3, r0
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <IsTransmitting+0x30>
	  // clear IRQ's
	  LoraWriteRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800253c:	2108      	movs	r1, #8
 800253e:	2012      	movs	r0, #18
 8002540:	f7ff feec 	bl	800231c <LoraWriteRegister>
	}
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <LoraSetOCP>:

// Set OverCurrent Protection
void LoraSetOCP(uint8_t milliAmps){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
	uint8_t OCP_Trim = 27;   // 27 allows for maximum safe current protection (240 mA)
 8002556:	231b      	movs	r3, #27
 8002558:	73fb      	strb	r3, [r7, #15]

	// Adjust according to datasheet formula
	if (milliAmps <= 120) {
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b78      	cmp	r3, #120	@ 0x78
 800255e:	d809      	bhi.n	8002574 <LoraSetOCP+0x28>
		OCP_Trim = (milliAmps - 45) / 5;
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	3b2d      	subs	r3, #45	@ 0x2d
 8002564:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <LoraSetOCP+0x60>)
 8002566:	fb82 1203 	smull	r1, r2, r2, r3
 800256a:	1052      	asrs	r2, r2, #1
 800256c:	17db      	asrs	r3, r3, #31
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e00b      	b.n	800258c <LoraSetOCP+0x40>
	} else if (milliAmps <= 240) {
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2bf0      	cmp	r3, #240	@ 0xf0
 8002578:	d808      	bhi.n	800258c <LoraSetOCP+0x40>
	    OCP_Trim = (milliAmps + 30) / 10;
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	331e      	adds	r3, #30
 800257e:	4a0b      	ldr	r2, [pc, #44]	@ (80025ac <LoraSetOCP+0x60>)
 8002580:	fb82 1203 	smull	r1, r2, r2, r3
 8002584:	1092      	asrs	r2, r2, #2
 8002586:	17db      	asrs	r3, r3, #31
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	73fb      	strb	r3, [r7, #15]
	}
	LoraWriteRegister(REG_OCP, 0x20 | (0x1F & OCP_Trim));
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	b2db      	uxtb	r3, r3
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	200b      	movs	r0, #11
 800259e:	f7ff febd 	bl	800231c <LoraWriteRegister>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	66666667 	.word	0x66666667

080025b0 <LoraSetTxPower>:

// Set transmission power (mode is used as a boolean, where 0 means RFO = Low power applications and 1 means PA_BOOST used for higher power applications
void LoraSetTxPower(uint8_t level, uint8_t mode){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
	if(mode == RFO_MODE){
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <LoraSetTxPower+0x32>
		// Bound level
		if(level < 0){
			level = 0;
		}else if(level > 14){
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b0e      	cmp	r3, #14
 80025ca:	d901      	bls.n	80025d0 <LoraSetTxPower+0x20>
			level = 14;
 80025cc:	230e      	movs	r3, #14
 80025ce:	71fb      	strb	r3, [r7, #7]
		}
		LoraWriteRegister(REG_PA_CONFIG, 0x70 | level);
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4619      	mov	r1, r3
 80025da:	2009      	movs	r0, #9
 80025dc:	f7ff fe9e 	bl	800231c <LoraWriteRegister>
	      LoraWriteRegister(REG_PA_DAC, 0x84);
	      LoraSetOCP(100);
	    }
		LoraWriteRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
	}
}
 80025e0:	e02a      	b.n	8002638 <LoraSetTxPower+0x88>
		if (level > 17) {
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b11      	cmp	r3, #17
 80025e6:	d90f      	bls.n	8002608 <LoraSetTxPower+0x58>
		   if (level > 20) {
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	2b14      	cmp	r3, #20
 80025ec:	d901      	bls.n	80025f2 <LoraSetTxPower+0x42>
		      level = 20;
 80025ee:	2314      	movs	r3, #20
 80025f0:	71fb      	strb	r3, [r7, #7]
		   level -= 3;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	3b03      	subs	r3, #3
 80025f6:	71fb      	strb	r3, [r7, #7]
		   LoraWriteRegister(REG_PA_DAC, 0x87);
 80025f8:	2187      	movs	r1, #135	@ 0x87
 80025fa:	204d      	movs	r0, #77	@ 0x4d
 80025fc:	f7ff fe8e 	bl	800231c <LoraWriteRegister>
		   LoraSetOCP(140);
 8002600:	208c      	movs	r0, #140	@ 0x8c
 8002602:	f7ff ffa3 	bl	800254c <LoraSetOCP>
 8002606:	e00b      	b.n	8002620 <LoraSetTxPower+0x70>
	      if (level < 2) {
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d801      	bhi.n	8002612 <LoraSetTxPower+0x62>
	        level = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	71fb      	strb	r3, [r7, #7]
	      LoraWriteRegister(REG_PA_DAC, 0x84);
 8002612:	2184      	movs	r1, #132	@ 0x84
 8002614:	204d      	movs	r0, #77	@ 0x4d
 8002616:	f7ff fe81 	bl	800231c <LoraWriteRegister>
	      LoraSetOCP(100);
 800261a:	2064      	movs	r0, #100	@ 0x64
 800261c:	f7ff ff96 	bl	800254c <LoraSetOCP>
		LoraWriteRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	3b02      	subs	r3, #2
 8002624:	b2db      	uxtb	r3, r3
 8002626:	b25b      	sxtb	r3, r3
 8002628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800262c:	b25b      	sxtb	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	2009      	movs	r0, #9
 8002634:	f7ff fe72 	bl	800231c <LoraWriteRegister>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <LoraSetIdle>:

// Set Lora Module to IDLE mode
void LoraSetIdle(void){
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
    LoraWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8002644:	2181      	movs	r1, #129	@ 0x81
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff fe68 	bl	800231c <LoraWriteRegister>
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <LoraSleep>:

// Set Lora to sleep mode
void LoraSleep(void){
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
   LoraWriteRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8002654:	2180      	movs	r1, #128	@ 0x80
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff fe60 	bl	800231c <LoraWriteRegister>
}
 800265c:	bf00      	nop
 800265e:	bd80      	pop	{r7, pc}

08002660 <processGPGGA>:
#include "NMEA_Parser.h"
#include <stdlib.h>

///////////////////// PROCESS SENTENCES /////////////////////
void processGPGGA(const char* sentence, GPS_GPGGA_DATA* gga_data){
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
	// Iterate through sentence bytes
	char aux_buff[25];
	const char* c = sentence;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// To store sequentially in aux buffer
	uint8_t index = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t item_count = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	// Parsing auxiliaries
	uint32_t aux = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24


	while(*c != '\r' && *c != '\n' && *c != '\0'){
 800267e:	e0b5      	b.n	80027ec <processGPGGA+0x18c>
		if(*c == ','){
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b2c      	cmp	r3, #44	@ 0x2c
 8002686:	f040 80a1 	bne.w	80027cc <processGPGGA+0x16c>
			if(aux_buff[0] != '\0'){
 800268a:	7a3b      	ldrb	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <processGPGGA+0x160>
				// Null terminate the buffer to cast
				aux_buff[index] = '\0';
 8002692:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002696:	3330      	adds	r3, #48	@ 0x30
 8002698:	443b      	add	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	f803 2c28 	strb.w	r2, [r3, #-40]

				switch(item_count){
 80026a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80026a4:	3b01      	subs	r3, #1
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d87d      	bhi.n	80027a6 <processGPGGA+0x146>
 80026aa:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <processGPGGA+0x50>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026d5 	.word	0x080026d5
 80026b4:	080026f3 	.word	0x080026f3
 80026b8:	0800270b 	.word	0x0800270b
 80026bc:	08002713 	.word	0x08002713
 80026c0:	0800272b 	.word	0x0800272b
 80026c4:	08002733 	.word	0x08002733
 80026c8:	08002755 	.word	0x08002755
 80026cc:	08002777 	.word	0x08002777
 80026d0:	0800278f 	.word	0x0800278f
				case 1:
					// Fix time
					aux = (uint32_t)strtoul(aux_buff, NULL, 10);
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	220a      	movs	r2, #10
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f008 fa97 	bl	800ac10 <strtoul>
 80026e2:	6278      	str	r0, [r7, #36]	@ 0x24
					if(aux > 100){
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	2b64      	cmp	r3, #100	@ 0x64
 80026e8:	d95f      	bls.n	80027aa <processGPGGA+0x14a>
						gga_data->fix_time = aux;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026ee:	601a      	str	r2, [r3, #0]
					}
					break;
 80026f0:	e05b      	b.n	80027aa <processGPGGA+0x14a>
				case 2:
					// Latitude
					gga_data->latitude = strtof(aux_buff, NULL);
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f008 f93b 	bl	800a974 <strtof>
 80026fe:	eef0 7a40 	vmov.f32	s15, s0
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	edc3 7a04 	vstr	s15, [r3, #16]
					break;
 8002708:	e050      	b.n	80027ac <processGPGGA+0x14c>
				case 3:
					// Latitude direction
					gga_data->lat_direction = aux_buff[0];
 800270a:	7a3a      	ldrb	r2, [r7, #8]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	765a      	strb	r2, [r3, #25]
					break;
 8002710:	e04c      	b.n	80027ac <processGPGGA+0x14c>
				case 4:
					// Longitude
					gga_data->longitude = strtof(aux_buff, NULL);
 8002712:	f107 0308 	add.w	r3, r7, #8
 8002716:	2100      	movs	r1, #0
 8002718:	4618      	mov	r0, r3
 800271a:	f008 f92b 	bl	800a974 <strtof>
 800271e:	eef0 7a40 	vmov.f32	s15, s0
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	edc3 7a05 	vstr	s15, [r3, #20]
					break;
 8002728:	e040      	b.n	80027ac <processGPGGA+0x14c>
				case 5:
					// Longitude direction
					gga_data->lon_direction = aux_buff[0];
 800272a:	7a3a      	ldrb	r2, [r7, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	761a      	strb	r2, [r3, #24]
					break;
 8002730:	e03c      	b.n	80027ac <processGPGGA+0x14c>
				case 6:
					// Fix quality
					gga_data->fix_quality = (uint8_t)strtod(aux_buff, NULL);
 8002732:	f107 0308 	add.w	r3, r7, #8
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f008 f90f 	bl	800a95c <strtod>
 800273e:	ec53 2b10 	vmov	r2, r3, d0
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe fa3f 	bl	8000bc8 <__aeabi_d2uiz>
 800274a:	4603      	mov	r3, r0
 800274c:	b2da      	uxtb	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	711a      	strb	r2, [r3, #4]
					break;
 8002752:	e02b      	b.n	80027ac <processGPGGA+0x14c>
				case 7:
					// Satellite count
					gga_data->sat_count = (uint8_t)strtod(aux_buff, NULL);
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f008 f8fe 	bl	800a95c <strtod>
 8002760:	ec53 2b10 	vmov	r2, r3, d0
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe fa2e 	bl	8000bc8 <__aeabi_d2uiz>
 800276c:	4603      	mov	r3, r0
 800276e:	b2da      	uxtb	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	715a      	strb	r2, [r3, #5]
					break;
 8002774:	e01a      	b.n	80027ac <processGPGGA+0x14c>
				case 8:
					// Horizontal dilution
					gga_data->horizontal_dilution = strtof(aux_buff, NULL);
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f008 f8f9 	bl	800a974 <strtof>
 8002782:	eef0 7a40 	vmov.f32	s15, s0
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 800278c:	e00e      	b.n	80027ac <processGPGGA+0x14c>
				case 9:
					// Altitude
					gga_data->altitude = strtof(aux_buff, NULL);
 800278e:	f107 0308 	add.w	r3, r7, #8
 8002792:	2100      	movs	r1, #0
 8002794:	4618      	mov	r0, r3
 8002796:	f008 f8ed 	bl	800a974 <strtof>
 800279a:	eef0 7a40 	vmov.f32	s15, s0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	edc3 7a03 	vstr	s15, [r3, #12]
					break;
 80027a4:	e002      	b.n	80027ac <processGPGGA+0x14c>
				default:
					break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <processGPGGA+0x14c>
					break;
 80027aa:	bf00      	nop
				}
				index = 0;
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				memset(aux_buff, 0, sizeof(aux_buff));
 80027b2:	f107 0308 	add.w	r3, r7, #8
 80027b6:	2219      	movs	r2, #25
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f009 fafc 	bl	800bdb8 <memset>
			}
			item_count ++;
 80027c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80027c4:	3301      	adds	r3, #1
 80027c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80027ca:	e00c      	b.n	80027e6 <processGPGGA+0x186>
		}
		else{
			aux_buff[index] = *c;
 80027cc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d2:	7812      	ldrb	r2, [r2, #0]
 80027d4:	3330      	adds	r3, #48	@ 0x30
 80027d6:	443b      	add	r3, r7
 80027d8:	f803 2c28 	strb.w	r2, [r3, #-40]
			index ++;
 80027dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80027e0:	3301      	adds	r3, #1
 80027e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		c ++;
 80027e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e8:	3301      	adds	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	while(*c != '\r' && *c != '\n' && *c != '\0'){
 80027ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b0d      	cmp	r3, #13
 80027f2:	d008      	beq.n	8002806 <processGPGGA+0x1a6>
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b0a      	cmp	r3, #10
 80027fa:	d004      	beq.n	8002806 <processGPGGA+0x1a6>
 80027fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f47f af3d 	bne.w	8002680 <processGPGGA+0x20>
	}
}
 8002806:	bf00      	nop
 8002808:	3730      	adds	r7, #48	@ 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop

08002810 <processGPRMC>:

void processGPRMC(const char* sentence, GPS_GPRMC_DATA* rmc_data){
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b092      	sub	sp, #72	@ 0x48
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
	// Iterate through sentence bytes
	char aux_buff[25];
	const char* c = sentence;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	647b      	str	r3, [r7, #68]	@ 0x44
	// To store sequentially in aux buffer
	uint8_t index = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t item_count = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	// Parsing auxiliaries
	char validator = '\0';
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	uint32_t aux = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c

	while(*c != '\n' && *c != '\0'){
 8002834:	e171      	b.n	8002b1a <processGPRMC+0x30a>
		if(*c == ','){
 8002836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b2c      	cmp	r3, #44	@ 0x2c
 800283c:	f040 815d 	bne.w	8002afa <processGPRMC+0x2ea>
			if(aux_buff[0] != '\0'){
 8002840:	7a3b      	ldrb	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8153 	beq.w	8002aee <processGPRMC+0x2de>
				// Null terminate the buffer to cast
				aux_buff[index] = '\0';
 8002848:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800284c:	3348      	adds	r3, #72	@ 0x48
 800284e:	443b      	add	r3, r7
 8002850:	2200      	movs	r2, #0
 8002852:	f803 2c40 	strb.w	r2, [r3, #-64]

				switch(item_count){
 8002856:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800285a:	3b01      	subs	r3, #1
 800285c:	2b0a      	cmp	r3, #10
 800285e:	f200 812b 	bhi.w	8002ab8 <processGPRMC+0x2a8>
 8002862:	a201      	add	r2, pc, #4	@ (adr r2, 8002868 <processGPRMC+0x58>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	08002895 	.word	0x08002895
 800286c:	080028b5 	.word	0x080028b5
 8002870:	080028db 	.word	0x080028db
 8002874:	08002961 	.word	0x08002961
 8002878:	0800298d 	.word	0x0800298d
 800287c:	08002a13 	.word	0x08002a13
 8002880:	08002a3b 	.word	0x08002a3b
 8002884:	08002a53 	.word	0x08002a53
 8002888:	08002a6b 	.word	0x08002a6b
 800288c:	08002a89 	.word	0x08002a89
 8002890:	08002aa9 	.word	0x08002aa9
				case 1:
					// Fix time
					 aux = (uint32_t)strtoul(aux_buff, NULL, 10);
 8002894:	f107 0308 	add.w	r3, r7, #8
 8002898:	220a      	movs	r2, #10
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f008 f9b7 	bl	800ac10 <strtoul>
 80028a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
					// Filter out incomplete fix time
					if(aux > 100){
 80028a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a6:	2b64      	cmp	r3, #100	@ 0x64
 80028a8:	f240 8108 	bls.w	8002abc <processGPRMC+0x2ac>
						rmc_data->fix_time = aux;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b0:	601a      	str	r2, [r3, #0]
					}
					break;
 80028b2:	e103      	b.n	8002abc <processGPRMC+0x2ac>
				case 2:
					// Status code (A = Active, V = Void)
					validator = aux_buff[0];
 80028b4:	7a3b      	ldrb	r3, [r7, #8]
 80028b6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					if(validator != 'V' && validator != 'A'){
 80028ba:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80028be:	2b56      	cmp	r3, #86	@ 0x56
 80028c0:	d006      	beq.n	80028d0 <processGPRMC+0xc0>
 80028c2:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80028c6:	2b41      	cmp	r3, #65	@ 0x41
 80028c8:	d002      	beq.n	80028d0 <processGPRMC+0xc0>
						validator = 'X';   // NULL or invalid data
 80028ca:	2358      	movs	r3, #88	@ 0x58
 80028cc:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
					}
					rmc_data->status = validator;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 80028d6:	771a      	strb	r2, [r3, #28]
					break;
 80028d8:	e0ff      	b.n	8002ada <processGPRMC+0x2ca>
				case 3:
					// Latitude
					if(validator == 'A'){
 80028da:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80028de:	2b41      	cmp	r3, #65	@ 0x41
 80028e0:	f040 80ee 	bne.w	8002ac0 <processGPRMC+0x2b0>
						float NMEA_lat = strtof(aux_buff, NULL);
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f008 f842 	bl	800a974 <strtof>
 80028f0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
						// Format to decimal degrees
						int degrees = (int)(NMEA_lat / 100);
 80028f4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80028f8:	eddf 6a8e 	vldr	s13, [pc, #568]	@ 8002b34 <processGPRMC+0x324>
 80028fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002904:	ee17 3a90 	vmov	r3, s15
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
						float minutes = NMEA_lat - (degrees * 100);
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	2264      	movs	r2, #100	@ 0x64
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						rmc_data->latitude = degrees + (minutes / 60.0);
 8002926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002928:	f7fd fe0c 	bl	8000544 <__aeabi_i2d>
 800292c:	4604      	mov	r4, r0
 800292e:	460d      	mov	r5, r1
 8002930:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002932:	f7fd fe19 	bl	8000568 <__aeabi_f2d>
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b38 <processGPRMC+0x328>)
 800293c:	f7fd ff96 	bl	800086c <__aeabi_ddiv>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fcb0 	bl	80002ac <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f958 	bl	8000c08 <__aeabi_d2f>
 8002958:	4602      	mov	r2, r0
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	615a      	str	r2, [r3, #20]
					}
					break;
 800295e:	e0af      	b.n	8002ac0 <processGPRMC+0x2b0>
				case 4:
					// Latitude direction
					if(validator == 'A'){
 8002960:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002964:	2b41      	cmp	r3, #65	@ 0x41
 8002966:	f040 80ad 	bne.w	8002ac4 <processGPRMC+0x2b4>
						rmc_data->lat_direction = aux_buff[0];
 800296a:	7a3a      	ldrb	r2, [r7, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	775a      	strb	r2, [r3, #29]
						if(rmc_data->lat_direction == 'S'){
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	7f5b      	ldrb	r3, [r3, #29]
 8002974:	2b53      	cmp	r3, #83	@ 0x53
 8002976:	f040 80a5 	bne.w	8002ac4 <processGPRMC+0x2b4>
							rmc_data->latitude *= -1 ;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002980:	eef1 7a67 	vneg.f32	s15, s15
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	edc3 7a05 	vstr	s15, [r3, #20]
						}
					}
					break;
 800298a:	e09b      	b.n	8002ac4 <processGPRMC+0x2b4>
				case 5:
					// Longitude
					if(validator == 'A'){
 800298c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002990:	2b41      	cmp	r3, #65	@ 0x41
 8002992:	f040 8099 	bne.w	8002ac8 <processGPRMC+0x2b8>
						float NMEA_lon = strtof(aux_buff, NULL);
 8002996:	f107 0308 	add.w	r3, r7, #8
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f007 ffe9 	bl	800a974 <strtof>
 80029a2:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
						int lon_degrees = (int)(NMEA_lon / 100);
 80029a6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029aa:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8002b34 <processGPRMC+0x324>
 80029ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b6:	ee17 3a90 	vmov	r3, s15
 80029ba:	637b      	str	r3, [r7, #52]	@ 0x34
						float lon_minutes = NMEA_lon - (lon_degrees * 100);
 80029bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029be:	2264      	movs	r2, #100	@ 0x64
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	ee07 3a90 	vmov	s15, r3
 80029c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029cc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
						rmc_data->longitude = lon_degrees + (lon_minutes / 60.0);
 80029d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80029da:	f7fd fdb3 	bl	8000544 <__aeabi_i2d>
 80029de:	4604      	mov	r4, r0
 80029e0:	460d      	mov	r5, r1
 80029e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029e4:	f7fd fdc0 	bl	8000568 <__aeabi_f2d>
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	4b52      	ldr	r3, [pc, #328]	@ (8002b38 <processGPRMC+0x328>)
 80029ee:	f7fd ff3d 	bl	800086c <__aeabi_ddiv>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4620      	mov	r0, r4
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7fd fc57 	bl	80002ac <__adddf3>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f8ff 	bl	8000c08 <__aeabi_d2f>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	619a      	str	r2, [r3, #24]
					}
					break;
 8002a10:	e05a      	b.n	8002ac8 <processGPRMC+0x2b8>
				case 6:
					// Longitude direction
					if(validator == 'A'){
 8002a12:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002a16:	2b41      	cmp	r3, #65	@ 0x41
 8002a18:	d158      	bne.n	8002acc <processGPRMC+0x2bc>
						rmc_data->lon_direction = aux_buff[0];
 8002a1a:	7a3a      	ldrb	r2, [r7, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	779a      	strb	r2, [r3, #30]
						if(rmc_data->lon_direction == 'W'){
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	7f9b      	ldrb	r3, [r3, #30]
 8002a24:	2b57      	cmp	r3, #87	@ 0x57
 8002a26:	d151      	bne.n	8002acc <processGPRMC+0x2bc>
							rmc_data->longitude *= -1 ;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a2e:	eef1 7a67 	vneg.f32	s15, s15
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	edc3 7a06 	vstr	s15, [r3, #24]
						}
					}
					break;
 8002a38:	e048      	b.n	8002acc <processGPRMC+0x2bc>
				case 7:
					// Speed in knots
					rmc_data->speed_knots = strtof(aux_buff, NULL);
 8002a3a:	f107 0308 	add.w	r3, r7, #8
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f007 ff97 	bl	800a974 <strtof>
 8002a46:	eef0 7a40 	vmov.f32	s15, s0
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	edc3 7a02 	vstr	s15, [r3, #8]
					break;
 8002a50:	e043      	b.n	8002ada <processGPRMC+0x2ca>
				case 8:
					// Track angle
					rmc_data->track_angle = strtof(aux_buff, NULL);
 8002a52:	f107 0308 	add.w	r3, r7, #8
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f007 ff8b 	bl	800a974 <strtof>
 8002a5e:	eef0 7a40 	vmov.f32	s15, s0
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	edc3 7a03 	vstr	s15, [r3, #12]
					break;
 8002a68:	e037      	b.n	8002ada <processGPRMC+0x2ca>
				case 9:
					// Date
					aux = (uint32_t)strtoul(aux_buff, NULL, 10);
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	220a      	movs	r2, #10
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f008 f8cc 	bl	800ac10 <strtoul>
 8002a78:	63f8      	str	r0, [r7, #60]	@ 0x3c
					// Filter out incomplete date
					if(aux > 100){
 8002a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a7c:	2b64      	cmp	r3, #100	@ 0x64
 8002a7e:	d927      	bls.n	8002ad0 <processGPRMC+0x2c0>
						rmc_data->date = aux;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a84:	605a      	str	r2, [r3, #4]
					}
					break;
 8002a86:	e023      	b.n	8002ad0 <processGPRMC+0x2c0>
				case 10:
					// Magnetic variation degrees
					if(validator == 'A'){
 8002a88:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002a8c:	2b41      	cmp	r3, #65	@ 0x41
 8002a8e:	d121      	bne.n	8002ad4 <processGPRMC+0x2c4>
						rmc_data->mag_variation = strtof(aux_buff, NULL);
 8002a90:	f107 0308 	add.w	r3, r7, #8
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f007 ff6c 	bl	800a974 <strtof>
 8002a9c:	eef0 7a40 	vmov.f32	s15, s0
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	edc3 7a04 	vstr	s15, [r3, #16]
					}
					break;
 8002aa6:	e015      	b.n	8002ad4 <processGPRMC+0x2c4>
				case 11:
					// Magnetic variation direction
					if(validator == 'A'){
 8002aa8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8002aac:	2b41      	cmp	r3, #65	@ 0x41
 8002aae:	d113      	bne.n	8002ad8 <processGPRMC+0x2c8>
						rmc_data->mag_variation_dir = aux_buff[0];
 8002ab0:	7a3a      	ldrb	r2, [r7, #8]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	77da      	strb	r2, [r3, #31]
					}
					break;
 8002ab6:	e00f      	b.n	8002ad8 <processGPRMC+0x2c8>
				default:
					break;
 8002ab8:	bf00      	nop
 8002aba:	e00e      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002abc:	bf00      	nop
 8002abe:	e00c      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ac0:	bf00      	nop
 8002ac2:	e00a      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ac4:	bf00      	nop
 8002ac6:	e008      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ac8:	bf00      	nop
 8002aca:	e006      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002acc:	bf00      	nop
 8002ace:	e004      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ad0:	bf00      	nop
 8002ad2:	e002      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <processGPRMC+0x2ca>
					break;
 8002ad8:	bf00      	nop
				}
				index = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				memset(aux_buff, 0, sizeof(aux_buff));
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	2219      	movs	r2, #25
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f009 f965 	bl	800bdb8 <memset>
			}
			item_count ++;
 8002aee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8002af2:	3301      	adds	r3, #1
 8002af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8002af8:	e00c      	b.n	8002b14 <processGPRMC+0x304>
		}
		else{
			aux_buff[index] = *c;
 8002afa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b00:	7812      	ldrb	r2, [r2, #0]
 8002b02:	3348      	adds	r3, #72	@ 0x48
 8002b04:	443b      	add	r3, r7
 8002b06:	f803 2c40 	strb.w	r2, [r3, #-64]
			index ++;
 8002b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		}
		c ++;
 8002b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b16:	3301      	adds	r3, #1
 8002b18:	647b      	str	r3, [r7, #68]	@ 0x44
	while(*c != '\n' && *c != '\0'){
 8002b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b0a      	cmp	r3, #10
 8002b20:	d004      	beq.n	8002b2c <processGPRMC+0x31c>
 8002b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f ae85 	bne.w	8002836 <processGPRMC+0x26>
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	3748      	adds	r7, #72	@ 0x48
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	42c80000 	.word	0x42c80000
 8002b38:	404e0000 	.word	0x404e0000

08002b3c <splitNMEASentences>:
}

/////////////////////////////////////////////////////////////

// Split valid NMEA Sentences in a message
void splitNMEASentences(const char *buffer, char sentences[MAX_SENTENCES_SPLIT][MAX_SENTENCE_LENGTH]){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	uint8_t sentence_count = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
	// Read only pointers
	const char* start = buffer;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	613b      	str	r3, [r7, #16]
	const char* end;

	while((end = strstr(start, "\n")) != NULL){
 8002b4e:	e025      	b.n	8002b9c <splitNMEASentences+0x60>
		size_t length = end - start + 1;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	3301      	adds	r3, #1
 8002b58:	60bb      	str	r3, [r7, #8]

		if (length < MAX_SENTENCE_LENGTH && sentence_count < MAX_SENTENCES_SPLIT) {
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b63      	cmp	r3, #99	@ 0x63
 8002b5e:	d81a      	bhi.n	8002b96 <splitNMEASentences+0x5a>
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d817      	bhi.n	8002b96 <splitNMEASentences+0x5a>
			strncpy(sentences[sentence_count], start, length);
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2264      	movs	r2, #100	@ 0x64
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	4413      	add	r3, r2
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	6939      	ldr	r1, [r7, #16]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f009 f945 	bl	800be06 <strncpy>
			sentences[sentence_count][length] = '\0';  // Null-terminate the string
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2264      	movs	r2, #100	@ 0x64
 8002b80:	fb02 f303 	mul.w	r3, r2, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	441a      	add	r2, r3
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
			sentence_count++;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	3301      	adds	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
		}
		start = end + 1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
	while((end = strstr(start, "\n")) != NULL){
 8002b9c:	210a      	movs	r1, #10
 8002b9e:	6938      	ldr	r0, [r7, #16]
 8002ba0:	f009 f912 	bl	800bdc8 <strchr>
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1d1      	bne.n	8002b50 <splitNMEASentences+0x14>
	}
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <parseGPSData>:

// Parse and store all relevant data (Modify this to store relevant data for the application)
void parseGPSData(const char* gps_buffer, GPS_DATA* gps_data){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	// All NMEA sentences start with $GP(x_x_x), -> Use this to select parse mode
	char id[3] = {*(gps_buffer + 4), *(gps_buffer + 5)};
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	460a      	mov	r2, r1
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	460a      	mov	r2, r1
 8002bce:	709a      	strb	r2, [r3, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	733b      	strb	r3, [r7, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3305      	adds	r3, #5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	737b      	strb	r3, [r7, #13]
	// Compare id and parse accordingly
	if(strcmp(id, "GA") == 0){  // GGA
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	490f      	ldr	r1, [pc, #60]	@ (8002c24 <parseGPSData+0x6c>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fd faf2 	bl	80001d0 <strcmp>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <parseGPSData+0x46>
		processGPGGA(gps_buffer, &gps_data->GPGGA_data);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fd32 	bl	8002660 <processGPGGA>
//		processGPGSV(gps_buffer, &gps_data->GPGSV_data);
//	}
//	else if(strcmp(id, "DA") == 0){ // ZDA
//		processGPZDA(gps_buffer, &gps_data->GPZDA_data);
//	}
}
 8002bfc:	e00e      	b.n	8002c1c <parseGPSData+0x64>
	else if(strcmp(id, "MC") == 0){ // RMC
 8002bfe:	f107 030c 	add.w	r3, r7, #12
 8002c02:	4909      	ldr	r1, [pc, #36]	@ (8002c28 <parseGPSData+0x70>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fd fae3 	bl	80001d0 <strcmp>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <parseGPSData+0x64>
		processGPRMC(gps_buffer, &gps_data->GPRMC_data);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	332c      	adds	r3, #44	@ 0x2c
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fdfa 	bl	8002810 <processGPRMC>
}
 8002c1c:	bf00      	nop
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	0800e9a8 	.word	0x0800e9a8
 8002c28:	0800e9ac 	.word	0x0800e9ac

08002c2c <MX_ADC1_Init>:
//
ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  //ADC_ChannelConfTypeDef sConfig = {0};
  hadc1.Instance = ADC1;
 8002c30:	4b1f      	ldr	r3, [pc, #124]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c32:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <MX_ADC1_Init+0x88>)
 8002c34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c42:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c50:	2204      	movs	r2, #4
 8002c52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c54:	4b16      	ldr	r3, [pc, #88]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c5a:	4b15      	ldr	r3, [pc, #84]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 16;
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c62:	2210      	movs	r2, #16
 8002c64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c66:	4b12      	ldr	r3, [pc, #72]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c74:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c88:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ADC_OVERSAMPLING_RATIO_256;
 8002c8a:	4b09      	ldr	r3, [pc, #36]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c8c:	221c      	movs	r2, #28
 8002c8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c98:	641a      	str	r2, [r3, #64]	@ 0x40


  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	@ (8002cb0 <MX_ADC1_Init+0x84>)
 8002c9c:	f001 fba0 	bl	80043e0 <HAL_ADC_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8002ca6:	f000 fd5b 	bl	8003760 <Error_Handler>
  }

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000238 	.word	0x20000238
 8002cb4:	50040000 	.word	0x50040000

08002cb8 <pollFromChannelADC>:

// Read ADC channels
uint16_t pollFromChannelADC(uint32_t channel){
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
 8002cd0:	615a      	str	r2, [r3, #20]
	sConfig.Channel = channel;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002cde:	237f      	movs	r3, #127	@ 0x7f
 8002ce0:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	61fb      	str	r3, [r7, #28]
	sConfig.Offset = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);  // Apply the configuration for Channel 1
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480b      	ldr	r0, [pc, #44]	@ (8002d20 <pollFromChannelADC+0x68>)
 8002cf2:	f001 fde9 	bl	80048c8 <HAL_ADC_ConfigChannel>
	// Start conversion for selected channel
	HAL_ADC_Start(&hadc1);
 8002cf6:	480a      	ldr	r0, [pc, #40]	@ (8002d20 <pollFromChannelADC+0x68>)
 8002cf8:	f001 fcb4 	bl	8004664 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 8002cfc:	2164      	movs	r1, #100	@ 0x64
 8002cfe:	4808      	ldr	r0, [pc, #32]	@ (8002d20 <pollFromChannelADC+0x68>)
 8002d00:	f001 fd46 	bl	8004790 <HAL_ADC_PollForConversion>
	uint16_t adc_val = HAL_ADC_GetValue(&hadc1);  // Read value from Channel 1
 8002d04:	4806      	ldr	r0, [pc, #24]	@ (8002d20 <pollFromChannelADC+0x68>)
 8002d06:	f001 fdd2 	bl	80048ae <HAL_ADC_GetValue>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	HAL_ADC_Stop(&hadc1);
 8002d0e:	4804      	ldr	r0, [pc, #16]	@ (8002d20 <pollFromChannelADC+0x68>)
 8002d10:	f001 fd0b 	bl	800472a <HAL_ADC_Stop>
	return adc_val;
 8002d14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3728      	adds	r7, #40	@ 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000238 	.word	0x20000238

08002d24 <SystemClock_Config>:
#include "clocks.h"


void SystemClock_Config(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b096      	sub	sp, #88	@ 0x58
 8002d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	2244      	movs	r2, #68	@ 0x44
 8002d30:	2100      	movs	r1, #0
 8002d32:	4618      	mov	r0, r3
 8002d34:	f009 f840 	bl	800bdb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d38:	463b      	mov	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	609a      	str	r2, [r3, #8]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002d4a:	f003 fbff 	bl	800654c <HAL_PWREx_ControlVoltageScaling>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002d54:	f000 fd04 	bl	8003760 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8002d58:	2312      	movs	r3, #18
 8002d5a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d62:	2310      	movs	r3, #16
 8002d64:	627b      	str	r3, [r7, #36]	@ 0x24
  //RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d66:	2301      	movs	r3, #1
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;  // This sets the speed for the system, currenty 24 Mhz
 8002d6e:	2390      	movs	r3, #144	@ 0x90
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fc3c 	bl	80065f8 <HAL_RCC_OscConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002d86:	f000 fceb 	bl	8003760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d8a:	230f      	movs	r3, #15
 8002d8c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 f83c 	bl	8006e20 <HAL_RCC_ClockConfig>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002dae:	f000 fcd7 	bl	8003760 <Error_Handler>
  }
}
 8002db2:	bf00      	nop
 8002db4:	3758      	adds	r7, #88	@ 0x58
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <MX_GPIO_Init>:
#include "gpio.h"

void MX_GPIO_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]

 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd6:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dde:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	4b22      	ldr	r3, [pc, #136]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dee:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002df6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e74 <MX_GPIO_Init+0xb8>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	607b      	str	r3, [r7, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2110      	movs	r1, #16
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e0a:	f002 fd5d 	bl	80058c8 <HAL_GPIO_WritePin>

 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2102      	movs	r1, #2
 8002e12:	4819      	ldr	r0, [pc, #100]	@ (8002e78 <MX_GPIO_Init+0xbc>)
 8002e14:	f002 fd58 	bl	80058c8 <HAL_GPIO_WritePin>

 // RPM Hall sensor
 /*Configure GPIO pin : PA1 */
 GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e20:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e22:	2302      	movs	r3, #2
 8002e24:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	f107 030c 	add.w	r3, r7, #12
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e30:	f002 fbe0 	bl	80055f4 <HAL_GPIO_Init>
// GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
// HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

 // Routed to IT pin BNO055
 /*Configure GPIO pin : PB0 */
 GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e34:	2301      	movs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e3c:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e42:	f107 030c 	add.w	r3, r7, #12
 8002e46:	4619      	mov	r1, r3
 8002e48:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <MX_GPIO_Init+0xbc>)
 8002e4a:	f002 fbd3 	bl	80055f4 <HAL_GPIO_Init>

 // Blinker
 /*Configure GPIO pin : PB1 */
 GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e52:	2301      	movs	r3, #1
 8002e54:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 030c 	add.w	r3, r7, #12
 8002e62:	4619      	mov	r1, r3
 8002e64:	4804      	ldr	r0, [pc, #16]	@ (8002e78 <MX_GPIO_Init+0xbc>)
 8002e66:	f002 fbc5 	bl	80055f4 <HAL_GPIO_Init>

}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	48000400 	.word	0x48000400

08002e7c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002e82:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef4 <MX_I2C1_Init+0x78>)
 8002e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002e88:	f640 6214 	movw	r2, #3604	@ 0xe14
 8002e8c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ea0:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ea6:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eb8:	480d      	ldr	r0, [pc, #52]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002eba:	f002 fd37 	bl	800592c <HAL_I2C_Init>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ec4:	f000 fc4c 	bl	8003760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4809      	ldr	r0, [pc, #36]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002ecc:	f003 fa98 	bl	8006400 <HAL_I2CEx_ConfigAnalogFilter>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002ed6:	f000 fc43 	bl	8003760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eda:	2100      	movs	r1, #0
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <MX_I2C1_Init+0x74>)
 8002ede:	f003 fada 	bl	8006496 <HAL_I2CEx_ConfigDigitalFilter>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002ee8:	f000 fc3a 	bl	8003760 <Error_Handler>
  }

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	2000029c 	.word	0x2000029c
 8002ef4:	40005400 	.word	0x40005400

08002ef8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002efc:	f3bf 8f4f 	dsb	sy
}
 8002f00:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <__NVIC_SystemReset+0x24>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f0a:	4904      	ldr	r1, [pc, #16]	@ (8002f1c <__NVIC_SystemReset+0x24>)
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_SystemReset+0x28>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f12:	f3bf 8f4f 	dsb	sy
}
 8002f16:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <__NVIC_SystemReset+0x20>
 8002f1c:	e000ed00 	.word	0xe000ed00
 8002f20:	05fa0004 	.word	0x05fa0004

08002f24 <main>:
// Transmit telemetry buffer
char tx_buff[256];


int main(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  telemetryInit();
 8002f28:	f000 f8ce 	bl	80030c8 <telemetryInit>
  {
	  // Refresh
	  //HAL_IWDG_Refresh(&hiwdg);

	  // IMU communication validation
	  if(invalid_imu_samples >= MAX_INVALID_IMU_SAMPLES){
 8002f2c:	4b57      	ldr	r3, [pc, #348]	@ (800308c <main+0x168>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b09      	cmp	r3, #9
 8002f32:	d903      	bls.n	8002f3c <main+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
		  __disable_irq();
		  NVIC_SystemReset();
 8002f38:	f7ff ffde 	bl	8002ef8 <__NVIC_SystemReset>
	  }

	  // Voltage and current
	  if(HAL_GetTick() - power_aux >= TIME_TO_SAMPLE_POWER){
 8002f3c:	f001 f80a 	bl	8003f54 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	4b53      	ldr	r3, [pc, #332]	@ (8003090 <main+0x16c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d006      	beq.n	8002f58 <main+0x34>
	      readADCValues();
 8002f4a:	f000 fa81 	bl	8003450 <readADCValues>
		  power_aux = HAL_GetTick();
 8002f4e:	f001 f801 	bl	8003f54 <HAL_GetTick>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <main+0x16c>)
 8002f56:	6013      	str	r3, [r2, #0]
	  }

	  // Measure IMU
	  if(HAL_GetTick() - imu_aux >= TIME_TO_READ_IMU){
 8002f58:	f000 fffc 	bl	8003f54 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003094 <main+0x170>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b09      	cmp	r3, #9
 8002f66:	d91a      	bls.n	8002f9e <main+0x7a>
		  bno055_read_euler_hrp(&gyro_euler);
 8002f68:	484b      	ldr	r0, [pc, #300]	@ (8003098 <main+0x174>)
 8002f6a:	f7fe fb9b 	bl	80016a4 <bno055_read_euler_hrp>
		  bno055_read_acc_xyz(&accel_data);
 8002f6e:	484b      	ldr	r0, [pc, #300]	@ (800309c <main+0x178>)
 8002f70:	f7fe fb36 	bl	80015e0 <bno055_read_acc_xyz>
		  invalid_imu_samples = (accel_data.z == 0)? invalid_imu_samples + 1 : 0;  // Check data integrity
 8002f74:	4b49      	ldr	r3, [pc, #292]	@ (800309c <main+0x178>)
 8002f76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	d104      	bne.n	8002f8e <main+0x6a>
 8002f84:	4b41      	ldr	r3, [pc, #260]	@ (800308c <main+0x168>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e000      	b.n	8002f90 <main+0x6c>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	4a3e      	ldr	r2, [pc, #248]	@ (800308c <main+0x168>)
 8002f92:	7013      	strb	r3, [r2, #0]
		  imu_aux = HAL_GetTick();
 8002f94:	f000 ffde 	bl	8003f54 <HAL_GetTick>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8003094 <main+0x170>)
 8002f9c:	6013      	str	r3, [r2, #0]
	   }

	   // Parse GPS buffer
	   if(HAL_GetTick() - gps_aux >= TIME_TO_PARSE_GPS){
 8002f9e:	f000 ffd9 	bl	8003f54 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b3e      	ldr	r3, [pc, #248]	@ (80030a0 <main+0x17c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d908      	bls.n	8002fc4 <main+0xa0>
		   processGPS();
 8002fb2:	f000 f961 	bl	8003278 <processGPS>
		   store_GPS_ObservedState();  // Update Kalman
 8002fb6:	f000 f997 	bl	80032e8 <store_GPS_ObservedState>
		   gps_aux = HAL_GetTick();
 8002fba:	f000 ffcb 	bl	8003f54 <HAL_GetTick>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	4a37      	ldr	r2, [pc, #220]	@ (80030a0 <main+0x17c>)
 8002fc2:	6013      	str	r3, [r2, #0]
	   }

	   // Calculate RPMs
	   if(HAL_GetTick() - rpm_calculation_aux >= RPM_DELTA_T_MILLIS){
 8002fc4:	f000 ffc6 	bl	8003f54 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	4b36      	ldr	r3, [pc, #216]	@ (80030a4 <main+0x180>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d906      	bls.n	8002fe6 <main+0xc2>
		   calculateRPMs();
 8002fd8:	f000 faf8 	bl	80035cc <calculateRPMs>
		   rpm_calculation_aux = HAL_GetTick();
 8002fdc:	f000 ffba 	bl	8003f54 <HAL_GetTick>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4a30      	ldr	r2, [pc, #192]	@ (80030a4 <main+0x180>)
 8002fe4:	6013      	str	r3, [r2, #0]
	   }

	   // Kalman Predict
	   if(HAL_GetTick() - kalman_aux >= KALMAN_DELTA_T){
 8002fe6:	f000 ffb5 	bl	8003f54 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b2e      	ldr	r3, [pc, #184]	@ (80030a8 <main+0x184>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b09      	cmp	r3, #9
 8002ff4:	d918      	bls.n	8003028 <main+0x104>
		   // Set control inputs array
		   accel_inputs[0] = accel_data.x;
 8002ff6:	4b29      	ldr	r3, [pc, #164]	@ (800309c <main+0x178>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <main+0x188>)
 8002ffc:	6013      	str	r3, [r2, #0]
		   accel_inputs[1] = accel_data.y;
 8002ffe:	4b27      	ldr	r3, [pc, #156]	@ (800309c <main+0x178>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <main+0x188>)
 8003004:	6053      	str	r3, [r2, #4]
		   accel_inputs[2] = accel_data.z;
 8003006:	4b25      	ldr	r3, [pc, #148]	@ (800309c <main+0x178>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4a28      	ldr	r2, [pc, #160]	@ (80030ac <main+0x188>)
 800300c:	6093      	str	r3, [r2, #8]
		   // Predict every delta t
		   KF_Predict(&kalman_filter, accel_inputs);
 800300e:	4927      	ldr	r1, [pc, #156]	@ (80030ac <main+0x188>)
 8003010:	4827      	ldr	r0, [pc, #156]	@ (80030b0 <main+0x18c>)
 8003012:	f7fe fc69 	bl	80018e8 <KF_Predict>
		   KF_Update(&kalman_filter, &Zk);
 8003016:	4927      	ldr	r1, [pc, #156]	@ (80030b4 <main+0x190>)
 8003018:	4825      	ldr	r0, [pc, #148]	@ (80030b0 <main+0x18c>)
 800301a:	f7fe fd43 	bl	8001aa4 <KF_Update>
		   kalman_aux = HAL_GetTick();
 800301e:	f000 ff99 	bl	8003f54 <HAL_GetTick>
 8003022:	4603      	mov	r3, r0
 8003024:	4a20      	ldr	r2, [pc, #128]	@ (80030a8 <main+0x184>)
 8003026:	6013      	str	r3, [r2, #0]
	   }

	   // Construct string and send data over RF
	   if(HAL_GetTick() - lora_aux >= TIME_TO_SEND_LORA){
 8003028:	f000 ff94 	bl	8003f54 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <main+0x194>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003038:	d306      	bcc.n	8003048 <main+0x124>
		   buildPacketRF();
 800303a:	f000 fae9 	bl	8003610 <buildPacketRF>
		   lora_aux = HAL_GetTick();
 800303e:	f000 ff89 	bl	8003f54 <HAL_GetTick>
 8003042:	4603      	mov	r3, r0
 8003044:	4a1c      	ldr	r2, [pc, #112]	@ (80030b8 <main+0x194>)
 8003046:	6013      	str	r3, [r2, #0]
	   }

	  // Debug
	  if(HAL_GetTick() - uart_aux >= TIME_TO_PRINT_UART){
 8003048:	f000 ff84 	bl	8003f54 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <main+0x198>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003058:	d304      	bcc.n	8003064 <main+0x140>
		// HAL_UART_Transmit(&huart2, (uint8_t*)tx_buff, sizeof(tx_buff), 100);
		uart_aux = HAL_GetTick();
 800305a:	f000 ff7b 	bl	8003f54 <HAL_GetTick>
 800305e:	4603      	mov	r3, r0
 8003060:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <main+0x198>)
 8003062:	6013      	str	r3, [r2, #0]
	  }

	  // LED Toggle
	  if(HAL_GetTick() - blink_aux >= TIME_TO_BLINK){
 8003064:	f000 ff76 	bl	8003f54 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	4b15      	ldr	r3, [pc, #84]	@ (80030c0 <main+0x19c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003074:	f4ff af5a 	bcc.w	8002f2c <main+0x8>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8003078:	2102      	movs	r1, #2
 800307a:	4812      	ldr	r0, [pc, #72]	@ (80030c4 <main+0x1a0>)
 800307c:	f002 fc3c 	bl	80058f8 <HAL_GPIO_TogglePin>
		  blink_aux = HAL_GetTick();
 8003080:	f000 ff68 	bl	8003f54 <HAL_GetTick>
 8003084:	4603      	mov	r3, r0
 8003086:	4a0e      	ldr	r2, [pc, #56]	@ (80030c0 <main+0x19c>)
 8003088:	6013      	str	r3, [r2, #0]
	  if(invalid_imu_samples >= MAX_INVALID_IMU_SAMPLES){
 800308a:	e74f      	b.n	8002f2c <main+0x8>
 800308c:	20000e40 	.word	0x20000e40
 8003090:	200002f0 	.word	0x200002f0
 8003094:	200002fc 	.word	0x200002fc
 8003098:	20000424 	.word	0x20000424
 800309c:	20000430 	.word	0x20000430
 80030a0:	200002f8 	.word	0x200002f8
 80030a4:	20000310 	.word	0x20000310
 80030a8:	20000308 	.word	0x20000308
 80030ac:	20000e14 	.word	0x20000e14
 80030b0:	2000082c 	.word	0x2000082c
 80030b4:	20000e38 	.word	0x20000e38
 80030b8:	200002f4 	.word	0x200002f4
 80030bc:	20000300 	.word	0x20000300
 80030c0:	20000304 	.word	0x20000304
 80030c4:	48000400 	.word	0x48000400

080030c8 <telemetryInit>:
	  }
  }
}


void telemetryInit(void){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  HAL_Init();
 80030cc:	f000 fed9 	bl	8003e82 <HAL_Init>
  SystemClock_Config();
 80030d0:	f7ff fe28 	bl	8002d24 <SystemClock_Config>

  // Peripherals
  MX_GPIO_Init();
 80030d4:	f7ff fe72 	bl	8002dbc <MX_GPIO_Init>
  MX_ADC1_Init();
 80030d8:	f7ff fda8 	bl	8002c2c <MX_ADC1_Init>
  MX_I2C1_Init();
 80030dc:	f7ff fece 	bl	8002e7c <MX_I2C1_Init>
  MX_SPI3_Init();
 80030e0:	f000 fb4a 	bl	8003778 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80030e4:	f000 fe44 	bl	8003d70 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80030e8:	f000 fe72 	bl	8003dd0 <MX_USART2_UART_Init>

  // IMU
  IMU_Config();
 80030ec:	f000 f818 	bl	8003120 <IMU_Config>

  // Lora
  LoraConfig();
 80030f0:	f000 f828 	bl	8003144 <LoraConfig>

  // Kalman Configuration
  KF_Init(&kalman_filter);
 80030f4:	4807      	ldr	r0, [pc, #28]	@ (8003114 <telemetryInit+0x4c>)
 80030f6:	f7fe fbe9 	bl	80018cc <KF_Init>
  arm_mat_init_f32(&Zk, STATE_SPACE_VECTOR_ROWS, 1, Zk_data);
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <telemetryInit+0x50>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	2106      	movs	r1, #6
 8003100:	4806      	ldr	r0, [pc, #24]	@ (800311c <telemetryInit+0x54>)
 8003102:	f006 f837 	bl	8009174 <arm_mat_init_f32>

  // GPS Interrupt Enable
  configure_GPS_Interrupt();
 8003106:	f000 f839 	bl	800317c <configure_GPS_Interrupt>

  // Configure interrupt for Hall sensor (RPMs)
  RPM_InterruptConfig();
 800310a:	f000 f82b 	bl	8003164 <RPM_InterruptConfig>

  // Independent Watchdog
  //MX_IWDG_Init();
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000082c 	.word	0x2000082c
 8003118:	20000e20 	.word	0x20000e20
 800311c:	20000e38 	.word	0x20000e38

08003120 <IMU_Config>:


void IMU_Config(void){
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	bno055_set_i2c_handler(&hi2c1);
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <IMU_Config+0x18>)
 8003126:	f7fd ff6d 	bl	8001004 <bno055_set_i2c_handler>
	bno055_init(&default_bno055_config, &default_bno055_verification);
 800312a:	4904      	ldr	r1, [pc, #16]	@ (800313c <IMU_Config+0x1c>)
 800312c:	4804      	ldr	r0, [pc, #16]	@ (8003140 <IMU_Config+0x20>)
 800312e:	f7fe f88c 	bl	800124a <bno055_init>
}
 8003132:	bf00      	nop
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000029c 	.word	0x2000029c
 800313c:	20000224 	.word	0x20000224
 8003140:	20000000 	.word	0x20000000

08003144 <LoraConfig>:


void LoraConfig(void){
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
	// IMPORTANT: Desolder SB18 bridge from the bottom of NUCLEO L432KC, otherwise RST (PA5) will interfere with GPS interrupt
	LoraSetSPIHandler(&hspi3);
 8003148:	4805      	ldr	r0, [pc, #20]	@ (8003160 <LoraConfig+0x1c>)
 800314a:	f7ff f885 	bl	8002258 <LoraSetSPIHandler>
	if(LoraDefaultInit() != LORA_OK){
 800314e:	f7ff f805 	bl	800215c <LoraDefaultInit>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <LoraConfig+0x18>
		Error_Handler();
 8003158:	f000 fb02 	bl	8003760 <Error_Handler>
	}
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20000f44 	.word	0x20000f44

08003164 <RPM_InterruptConfig>:


void RPM_InterruptConfig(void){
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	2007      	movs	r0, #7
 800316e:	f002 fa0a 	bl	8005586 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003172:	2007      	movs	r0, #7
 8003174:	f002 fa23 	bl	80055be <HAL_NVIC_EnableIRQ>
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}

0800317c <configure_GPS_Interrupt>:


void configure_GPS_Interrupt(void){
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
    // USART GPS Interrupt configuration
    USART1->CR1 |= USART_CR1_RE;      // Enable receiver mode
 8003180:	4b0a      	ldr	r3, [pc, #40]	@ (80031ac <configure_GPS_Interrupt+0x30>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a09      	ldr	r2, [pc, #36]	@ (80031ac <configure_GPS_Interrupt+0x30>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6013      	str	r3, [r2, #0]
    USART1->CR1 |= USART_CR1_RXNEIE;  // Enable RXNE interrupt
 800318c:	4b07      	ldr	r3, [pc, #28]	@ (80031ac <configure_GPS_Interrupt+0x30>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a06      	ldr	r2, [pc, #24]	@ (80031ac <configure_GPS_Interrupt+0x30>)
 8003192:	f043 0320 	orr.w	r3, r3, #32
 8003196:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003198:	2200      	movs	r2, #0
 800319a:	2100      	movs	r1, #0
 800319c:	2025      	movs	r0, #37	@ 0x25
 800319e:	f002 f9f2 	bl	8005586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031a2:	2025      	movs	r0, #37	@ 0x25
 80031a4:	f002 fa0b 	bl	80055be <HAL_NVIC_EnableIRQ>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40013800 	.word	0x40013800

080031b0 <USART1_IRQHandler>:


void USART1_IRQHandler(void){
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    // Clear blocking errors
	if (USART1->ISR & USART_ISR_ORE) {    // Overrun Error
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <USART1_IRQHandler+0x1c>
		USART1->ICR |= USART_ICR_ORECF;
 80031c0:	4b29      	ldr	r3, [pc, #164]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a28      	ldr	r2, [pc, #160]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031c6:	f043 0308 	orr.w	r3, r3, #8
 80031ca:	6213      	str	r3, [r2, #32]
	}
	if (USART1->ISR & USART_ISR_FE) {     // Framing Error
 80031cc:	4b26      	ldr	r3, [pc, #152]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <USART1_IRQHandler+0x34>
		USART1->ICR |= USART_ICR_FECF;
 80031d8:	4b23      	ldr	r3, [pc, #140]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	6213      	str	r3, [r2, #32]
	}
	if (USART1->ISR & USART_ISR_NE) {     // Noise Error
 80031e4:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <USART1_IRQHandler+0x4c>
		USART1->ICR |= USART_ICR_NCF;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031f6:	f043 0304 	orr.w	r3, r3, #4
 80031fa:	6213      	str	r3, [r2, #32]
	}
	if (USART1->ISR & USART_ISR_PE) {	  // Parity Error
 80031fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <USART1_IRQHandler+0xb8>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <USART1_IRQHandler+0x64>
		USART1->ICR |= USART_ICR_PECF;
 8003208:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <USART1_IRQHandler+0xb8>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a16      	ldr	r2, [pc, #88]	@ (8003268 <USART1_IRQHandler+0xb8>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
	}

  // Check if RX interrupt flag is set
  if(USART1->ISR & (1 << 5)){
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <USART1_IRQHandler+0xb8>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d01d      	beq.n	800325c <USART1_IRQHandler+0xac>
	  // Read received byte
	  gps_received = USART1->RDR;
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <USART1_IRQHandler+0xb8>)
 8003222:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003224:	b29b      	uxth	r3, r3
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b10      	ldr	r3, [pc, #64]	@ (800326c <USART1_IRQHandler+0xbc>)
 800322a:	701a      	strb	r2, [r3, #0]
	  // Check index for overflow
	  if(gps_buffer_index >= sizeof(gps_buffer) - 1){
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <USART1_IRQHandler+0xc0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8003234:	d906      	bls.n	8003244 <USART1_IRQHandler+0x94>
		  gps_buffer[sizeof(gps_buffer) - 1] = '\0';
 8003236:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <USART1_IRQHandler+0xc4>)
 8003238:	2200      	movs	r2, #0
 800323a:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
		  gps_buffer_index = 0;
 800323e:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <USART1_IRQHandler+0xc0>)
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
	  }
	  *(gps_buffer + gps_buffer_index) = gps_received;
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <USART1_IRQHandler+0xc0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <USART1_IRQHandler+0xc4>)
 800324a:	4413      	add	r3, r2
 800324c:	4a07      	ldr	r2, [pc, #28]	@ (800326c <USART1_IRQHandler+0xbc>)
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
	  gps_buffer_index ++;
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <USART1_IRQHandler+0xc0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3301      	adds	r3, #1
 8003258:	4a05      	ldr	r2, [pc, #20]	@ (8003270 <USART1_IRQHandler+0xc0>)
 800325a:	6013      	str	r3, [r2, #0]
  }
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40013800 	.word	0x40013800
 800326c:	20000488 	.word	0x20000488
 8003270:	2000068c 	.word	0x2000068c
 8003274:	2000048c 	.word	0x2000048c

08003278 <processGPS>:


void processGPS(void){
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
	splitNMEASentences(gps_buffer, nmea_sentences);
 800327e:	4917      	ldr	r1, [pc, #92]	@ (80032dc <processGPS+0x64>)
 8003280:	4817      	ldr	r0, [pc, #92]	@ (80032e0 <processGPS+0x68>)
 8003282:	f7ff fc5b 	bl	8002b3c <splitNMEASentences>
	uint8_t valid_found = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	71fb      	strb	r3, [r7, #7]
	// First sentence generally is trash
	for(uint8_t i=1; i < MAX_SENTENCES_SPLIT; i++){
 800328a:	2301      	movs	r3, #1
 800328c:	71bb      	strb	r3, [r7, #6]
 800328e:	e017      	b.n	80032c0 <processGPS+0x48>
		// Only parse valid sentences
		if(nmea_sentences[i][0] != '\0') {
 8003290:	79bb      	ldrb	r3, [r7, #6]
 8003292:	4a12      	ldr	r2, [pc, #72]	@ (80032dc <processGPS+0x64>)
 8003294:	2164      	movs	r1, #100	@ 0x64
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <processGPS+0x42>
			parseGPSData(nmea_sentences[i], &gps_data);
 80032a2:	79bb      	ldrb	r3, [r7, #6]
 80032a4:	2264      	movs	r2, #100	@ 0x64
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a0c      	ldr	r2, [pc, #48]	@ (80032dc <processGPS+0x64>)
 80032ac:	4413      	add	r3, r2
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <processGPS+0x6c>)
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fc81 	bl	8002bb8 <parseGPSData>
			valid_found = 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=1; i < MAX_SENTENCES_SPLIT; i++){
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	3301      	adds	r3, #1
 80032be:	71bb      	strb	r3, [r7, #6]
 80032c0:	79bb      	ldrb	r3, [r7, #6]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d9e4      	bls.n	8003290 <processGPS+0x18>
		}
	}
	// Set to invalid status if nothing was received
	if(!valid_found){
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <processGPS+0x5c>
		gps_data.GPRMC_data.status = 'X';
 80032cc:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <processGPS+0x6c>)
 80032ce:	2258      	movs	r2, #88	@ 0x58
 80032d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	}
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000690 	.word	0x20000690
 80032e0:	2000048c 	.word	0x2000048c
 80032e4:	2000043c 	.word	0x2000043c

080032e8 <store_GPS_ObservedState>:


void store_GPS_ObservedState(void){
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
	// Check if sentence is valid
	if(gps_data.GPRMC_data.status != 'A'){
 80032ee:	4b51      	ldr	r3, [pc, #324]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 80032f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80032f4:	2b41      	cmp	r3, #65	@ 0x41
 80032f6:	f040 8099 	bne.w	800342c <store_GPS_ObservedState+0x144>
		return;
	}

	// Check if a reference point has already been set
	if(ref_latitude == 0.0 || ref_longitude == 0.0){
 80032fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003438 <store_GPS_ObservedState+0x150>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d007      	beq.n	800331a <store_GPS_ObservedState+0x32>
 800330a:	4b4c      	ldr	r3, [pc, #304]	@ (800343c <store_GPS_ObservedState+0x154>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d108      	bne.n	800332c <store_GPS_ObservedState+0x44>
		ref_latitude = gps_data.GPRMC_data.latitude;
 800331a:	4b46      	ldr	r3, [pc, #280]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	4a46      	ldr	r2, [pc, #280]	@ (8003438 <store_GPS_ObservedState+0x150>)
 8003320:	6013      	str	r3, [r2, #0]
		ref_longitude = gps_data.GPRMC_data.longitude;
 8003322:	4b44      	ldr	r3, [pc, #272]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	4a45      	ldr	r2, [pc, #276]	@ (800343c <store_GPS_ObservedState+0x154>)
 8003328:	6013      	str	r3, [r2, #0]
		return;
 800332a:	e080      	b.n	800342e <store_GPS_ObservedState+0x146>
	}

	// Relative position
	float x = 0.0, vx = 0.0, y = 0.0, vy = 0.0;
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	607b      	str	r3, [r7, #4]
	latlon_to_xy(ref_latitude, ref_longitude,gps_data.GPRMC_data.latitude,
 8003344:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <store_GPS_ObservedState+0x150>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	4b3c      	ldr	r3, [pc, #240]	@ (800343c <store_GPS_ObservedState+0x154>)
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	4b38      	ldr	r3, [pc, #224]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 8003352:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8003356:	4b37      	ldr	r3, [pc, #220]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 8003358:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800335c:	f107 0208 	add.w	r2, r7, #8
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	eef0 1a46 	vmov.f32	s3, s12
 800336c:	eeb0 1a66 	vmov.f32	s2, s13
 8003370:	eef0 0a47 	vmov.f32	s1, s14
 8003374:	eeb0 0a67 	vmov.f32	s0, s15
 8003378:	f7fe fa16 	bl	80017a8 <latlon_to_xy>
				 gps_data.GPRMC_data.longitude, &x, &y);
	// Velocity
	get_GPS_VelocityComponents(gps_data.GPRMC_data.speed_knots, gps_data.GPRMC_data.track_angle, &vx, &vy);
 800337c:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 800337e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003382:	4b2c      	ldr	r3, [pc, #176]	@ (8003434 <store_GPS_ObservedState+0x14c>)
 8003384:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003388:	1d3a      	adds	r2, r7, #4
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	4611      	mov	r1, r2
 8003390:	4618      	mov	r0, r3
 8003392:	eef0 0a47 	vmov.f32	s1, s14
 8003396:	eeb0 0a67 	vmov.f32	s0, s15
 800339a:	f7fe fa5f 	bl	800185c <get_GPS_VelocityComponents>

	// Set error covariance and measurement matrix
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
 80033a2:	e027      	b.n	80033f4 <store_GPS_ObservedState+0x10c>
		kalman_filter.R_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 0.1;
 80033a4:	7dfa      	ldrb	r2, [r7, #23]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	4a24      	ldr	r2, [pc, #144]	@ (8003440 <store_GPS_ObservedState+0x158>)
 80033ae:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	4a23      	ldr	r2, [pc, #140]	@ (8003444 <store_GPS_ObservedState+0x15c>)
 80033b8:	601a      	str	r2, [r3, #0]
		if(i < 4){
 80033ba:	7dfb      	ldrb	r3, [r7, #23]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d80b      	bhi.n	80033d8 <store_GPS_ObservedState+0xf0>
			kalman_filter.H_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] =  1;
 80033c0:	7dfa      	ldrb	r2, [r7, #23]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003440 <store_GPS_ObservedState+0x158>)
 80033ca:	33be      	adds	r3, #190	@ 0xbe
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	e00a      	b.n	80033ee <store_GPS_ObservedState+0x106>
		}else{
			kalman_filter.H_data[i * (STATE_SPACE_VECTOR_ROWS + 1)] = 0;
 80033d8:	7dfa      	ldrb	r2, [r7, #23]
 80033da:	4613      	mov	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <store_GPS_ObservedState+0x158>)
 80033e2:	33be      	adds	r3, #190	@ 0xbe
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i < STATE_SPACE_VECTOR_ROWS; i++){
 80033ee:	7dfb      	ldrb	r3, [r7, #23]
 80033f0:	3301      	adds	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d9d4      	bls.n	80033a4 <store_GPS_ObservedState+0xbc>
		}
	}

	// Prepare Zk measurement
	Zk_data[0] = x;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a12      	ldr	r2, [pc, #72]	@ (8003448 <store_GPS_ObservedState+0x160>)
 80033fe:	6013      	str	r3, [r2, #0]
	Zk_data[1] = vx;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <store_GPS_ObservedState+0x160>)
 8003404:	6053      	str	r3, [r2, #4]
	Zk_data[2] = y;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <store_GPS_ObservedState+0x160>)
 800340a:	6093      	str	r3, [r2, #8]
	Zk_data[3] = vy;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	@ (8003448 <store_GPS_ObservedState+0x160>)
 8003410:	60d3      	str	r3, [r2, #12]
	Zk_data[4] = 0.0;
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <store_GPS_ObservedState+0x160>)
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
	Zk_data[5] = 0.0;
 800341a:	4b0b      	ldr	r3, [pc, #44]	@ (8003448 <store_GPS_ObservedState+0x160>)
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	615a      	str	r2, [r3, #20]

	// Update!
	KF_Update(&kalman_filter, &Zk);
 8003422:	490a      	ldr	r1, [pc, #40]	@ (800344c <store_GPS_ObservedState+0x164>)
 8003424:	4806      	ldr	r0, [pc, #24]	@ (8003440 <store_GPS_ObservedState+0x158>)
 8003426:	f7fe fb3d 	bl	8001aa4 <KF_Update>
 800342a:	e000      	b.n	800342e <store_GPS_ObservedState+0x146>
		return;
 800342c:	bf00      	nop
}
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000043c 	.word	0x2000043c
 8003438:	20000e0c 	.word	0x20000e0c
 800343c:	20000e10 	.word	0x20000e10
 8003440:	2000082c 	.word	0x2000082c
 8003444:	3dcccccd 	.word	0x3dcccccd
 8003448:	20000e20 	.word	0x20000e20
 800344c:	20000e38 	.word	0x20000e38

08003450 <readADCValues>:


void readADCValues(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
    uint16_t adc_val = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	81fb      	strh	r3, [r7, #14]

    // Read raw ADC value from channel
    adc_val = pollFromChannelADC(CURRENT_SAMPLE_ADC_CHANNEL);
 800345a:	4838      	ldr	r0, [pc, #224]	@ (800353c <readADCValues+0xec>)
 800345c:	f7ff fc2c 	bl	8002cb8 <pollFromChannelADC>
 8003460:	4603      	mov	r3, r0
 8003462:	81fb      	strh	r3, [r7, #14]

    // Convert to amps (not filtered yet)
    float aux_amps = adc_val * ADC_TO_CURRENT * 2;
 8003464:	89fb      	ldrh	r3, [r7, #14]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8003540 <readADCValues+0xf0>
 8003472:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003476:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003544 <readADCValues+0xf4>
 800347a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800347e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003482:	edc7 7a02 	vstr	s15, [r7, #8]

    // Update moving average buffer
    current_sum -= current_samples[sample_index];
 8003486:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <readADCValues+0xf8>)
 8003488:	ed93 7a00 	vldr	s14, [r3]
 800348c:	4b2f      	ldr	r3, [pc, #188]	@ (800354c <readADCValues+0xfc>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4a2f      	ldr	r2, [pc, #188]	@ (8003550 <readADCValues+0x100>)
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <readADCValues+0xf8>)
 80034a0:	edc3 7a00 	vstr	s15, [r3]
    current_samples[sample_index] = aux_amps;
 80034a4:	4b29      	ldr	r3, [pc, #164]	@ (800354c <readADCValues+0xfc>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	4a29      	ldr	r2, [pc, #164]	@ (8003550 <readADCValues+0x100>)
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	601a      	str	r2, [r3, #0]
    current_sum += aux_amps;
 80034b2:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <readADCValues+0xf8>)
 80034b4:	ed93 7a00 	vldr	s14, [r3]
 80034b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	4b21      	ldr	r3, [pc, #132]	@ (8003548 <readADCValues+0xf8>)
 80034c2:	edc3 7a00 	vstr	s15, [r3]

    sample_index = (sample_index + 1) % MOVING_AVG_WINDOW;
 80034c6:	4b21      	ldr	r3, [pc, #132]	@ (800354c <readADCValues+0xfc>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	3301      	adds	r3, #1
 80034cc:	425a      	negs	r2, r3
 80034ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80034d6:	bf58      	it	pl
 80034d8:	4253      	negpl	r3, r2
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <readADCValues+0xfc>)
 80034de:	701a      	strb	r2, [r3, #0]
    float avg_current = current_sum / MOVING_AVG_WINDOW;
 80034e0:	4b19      	ldr	r3, [pc, #100]	@ (8003548 <readADCValues+0xf8>)
 80034e2:	ed93 7a00 	vldr	s14, [r3]
 80034e6:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8003554 <readADCValues+0x104>
 80034ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ee:	edc7 7a01 	vstr	s15, [r7, #4]

    // Only assign if above threshold
    if (avg_current >= 0.01f) {
 80034f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80034f6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003558 <readADCValues+0x108>
 80034fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003502:	db02      	blt.n	800350a <readADCValues+0xba>
        current_amps = avg_current;
 8003504:	4a15      	ldr	r2, [pc, #84]	@ (800355c <readADCValues+0x10c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
    }

	// Voltage calculation
	adc_val = pollFromChannelADC(VOLTAGE_SAMPLE_ADC_CHANNEL);
 800350a:	4815      	ldr	r0, [pc, #84]	@ (8003560 <readADCValues+0x110>)
 800350c:	f7ff fbd4 	bl	8002cb8 <pollFromChannelADC>
 8003510:	4603      	mov	r3, r0
 8003512:	81fb      	strh	r3, [r7, #14]
	battery_voltage = adc_val * MAX_ALLOWED_VOLTAGE / MAX_ADC_READING;
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003564 <readADCValues+0x114>
 8003522:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003526:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003544 <readADCValues+0xf4>
 800352a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <readADCValues+0x118>)
 8003530:	edc3 7a00 	vstr	s15, [r3]
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	32601000 	.word	0x32601000
 8003540:	41bc9249 	.word	0x41bc9249
 8003544:	457ff000 	.word	0x457ff000
 8003548:	20000420 	.word	0x20000420
 800354c:	2000041c 	.word	0x2000041c
 8003550:	2000031c 	.word	0x2000031c
 8003554:	42800000 	.word	0x42800000
 8003558:	3c23d70a 	.word	0x3c23d70a
 800355c:	20000318 	.word	0x20000318
 8003560:	14f00020 	.word	0x14f00020
 8003564:	42000000 	.word	0x42000000
 8003568:	20000314 	.word	0x20000314

0800356c <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void){
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
	// If rising edge interrupt is detected
	if(EXTI->PR1 & EXTI_PR1_PIF1){
 8003570:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <EXTI1_IRQHandler+0x50>)
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01c      	beq.n	80035b6 <EXTI1_IRQHandler+0x4a>
		if(HAL_GetTick() - rpm_pulse_timestamp >= NEW_REV_DEBOUNCE_TIME){
 800357c:	f000 fcea 	bl	8003f54 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	4b0f      	ldr	r3, [pc, #60]	@ (80035c0 <EXTI1_IRQHandler+0x54>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b18      	cmp	r3, #24
 800358a:	d914      	bls.n	80035b6 <EXTI1_IRQHandler+0x4a>
			total_rpms ++;
 800358c:	4b0d      	ldr	r3, [pc, #52]	@ (80035c4 <EXTI1_IRQHandler+0x58>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3301      	adds	r3, #1
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <EXTI1_IRQHandler+0x58>)
 8003594:	6013      	str	r3, [r2, #0]
			rev_counter ++;
 8003596:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <EXTI1_IRQHandler+0x5c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3301      	adds	r3, #1
 800359c:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <EXTI1_IRQHandler+0x5c>)
 800359e:	6013      	str	r3, [r2, #0]
			EXTI->PR1 |= EXTI_PR1_PIF1;  // Clear interrupt flag
 80035a0:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <EXTI1_IRQHandler+0x50>)
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <EXTI1_IRQHandler+0x50>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	6153      	str	r3, [r2, #20]
			rpm_pulse_timestamp = HAL_GetTick();
 80035ac:	f000 fcd2 	bl	8003f54 <HAL_GetTick>
 80035b0:	4603      	mov	r3, r0
 80035b2:	4a03      	ldr	r2, [pc, #12]	@ (80035c0 <EXTI1_IRQHandler+0x54>)
 80035b4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80035b6:	bf00      	nop
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40010400 	.word	0x40010400
 80035c0:	2000030c 	.word	0x2000030c
 80035c4:	20000820 	.word	0x20000820
 80035c8:	20000824 	.word	0x20000824

080035cc <calculateRPMs>:


void calculateRPMs(void){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	rpms = rev_counter * (MINUTE_TO_MILLIS / (RPM_DELTA_T_MILLIS * NUMBER_OF_MAGNETS));
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <calculateRPMs+0x38>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ffa5 	bl	8000524 <__aeabi_ui2d>
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <calculateRPMs+0x3c>)
 80035e0:	f7fd f81a 	bl	8000618 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	f7fd faec 	bl	8000bc8 <__aeabi_d2uiz>
 80035f0:	4603      	mov	r3, r0
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	4b05      	ldr	r3, [pc, #20]	@ (800360c <calculateRPMs+0x40>)
 80035f6:	801a      	strh	r2, [r3, #0]
	rev_counter = 0;
 80035f8:	4b02      	ldr	r3, [pc, #8]	@ (8003604 <calculateRPMs+0x38>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000824 	.word	0x20000824
 8003608:	40340000 	.word	0x40340000
 800360c:	20000828 	.word	0x20000828

08003610 <buildPacketRF>:


void buildPacketRF(void){
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	b0a7      	sub	sp, #156	@ 0x9c
 8003616:	af18      	add	r7, sp, #96	@ 0x60
   * 9,10) Latitude, longitude
   * 11) Number of satellites connected
   * 12) GPS Status character (A | V)
   * 13) RPMs
  */
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003618:	4b40      	ldr	r3, [pc, #256]	@ (800371c <buildPacketRF+0x10c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fc ffa3 	bl	8000568 <__aeabi_f2d>
 8003622:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8003626:	4b3e      	ldr	r3, [pc, #248]	@ (8003720 <buildPacketRF+0x110>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff9c 	bl	8000568 <__aeabi_f2d>
 8003630:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
  current_amps, battery_voltage, accel_data.x, accel_data.y, accel_data.z,
 8003634:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <buildPacketRF+0x114>)
 8003636:	681b      	ldr	r3, [r3, #0]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ff95 	bl	8000568 <__aeabi_f2d>
 800363e:	e9c7 0108 	strd	r0, r1, [r7, #32]
  current_amps, battery_voltage, accel_data.x, accel_data.y, accel_data.z,
 8003642:	4b38      	ldr	r3, [pc, #224]	@ (8003724 <buildPacketRF+0x114>)
 8003644:	685b      	ldr	r3, [r3, #4]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc ff8e 	bl	8000568 <__aeabi_f2d>
 800364c:	e9c7 0106 	strd	r0, r1, [r7, #24]
  current_amps, battery_voltage, accel_data.x, accel_data.y, accel_data.z,
 8003650:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <buildPacketRF+0x114>)
 8003652:	689b      	ldr	r3, [r3, #8]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff87 	bl	8000568 <__aeabi_f2d>
 800365a:	e9c7 0104 	strd	r0, r1, [r7, #16]
  gyro_euler.h, gyro_euler.r, gyro_euler.p, gps_data.GPRMC_data.latitude, gps_data.GPRMC_data.longitude,
 800365e:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <buildPacketRF+0x118>)
 8003660:	681b      	ldr	r3, [r3, #0]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff80 	bl	8000568 <__aeabi_f2d>
 8003668:	e9c7 0102 	strd	r0, r1, [r7, #8]
  gyro_euler.h, gyro_euler.r, gyro_euler.p, gps_data.GPRMC_data.latitude, gps_data.GPRMC_data.longitude,
 800366c:	4b2e      	ldr	r3, [pc, #184]	@ (8003728 <buildPacketRF+0x118>)
 800366e:	685b      	ldr	r3, [r3, #4]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff79 	bl	8000568 <__aeabi_f2d>
 8003676:	4682      	mov	sl, r0
 8003678:	468b      	mov	fp, r1
  gyro_euler.h, gyro_euler.r, gyro_euler.p, gps_data.GPRMC_data.latitude, gps_data.GPRMC_data.longitude,
 800367a:	4b2b      	ldr	r3, [pc, #172]	@ (8003728 <buildPacketRF+0x118>)
 800367c:	689b      	ldr	r3, [r3, #8]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff72 	bl	8000568 <__aeabi_f2d>
 8003684:	4680      	mov	r8, r0
 8003686:	4689      	mov	r9, r1
  gyro_euler.h, gyro_euler.r, gyro_euler.p, gps_data.GPRMC_data.latitude, gps_data.GPRMC_data.longitude,
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <buildPacketRF+0x11c>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff6b 	bl	8000568 <__aeabi_f2d>
 8003692:	4604      	mov	r4, r0
 8003694:	460d      	mov	r5, r1
  gyro_euler.h, gyro_euler.r, gyro_euler.p, gps_data.GPRMC_data.latitude, gps_data.GPRMC_data.longitude,
 8003696:	4b25      	ldr	r3, [pc, #148]	@ (800372c <buildPacketRF+0x11c>)
 8003698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff64 	bl	8000568 <__aeabi_f2d>
  gps_data.GPGGA_data.sat_count,gps_data.GPRMC_data.status, rpms, total_rpms);
 80036a0:	4b22      	ldr	r3, [pc, #136]	@ (800372c <buildPacketRF+0x11c>)
 80036a2:	795b      	ldrb	r3, [r3, #5]
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 80036a4:	607b      	str	r3, [r7, #4]
  gps_data.GPGGA_data.sat_count,gps_data.GPRMC_data.status, rpms, total_rpms);
 80036a6:	4b21      	ldr	r3, [pc, #132]	@ (800372c <buildPacketRF+0x11c>)
 80036a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
  snprintf(tx_buff, sizeof(tx_buff), "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.6f,%.6f,%d,%c,%d,%lu\n",
 80036ac:	461e      	mov	r6, r3
 80036ae:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <buildPacketRF+0x120>)
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <buildPacketRF+0x124>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80036ba:	9216      	str	r2, [sp, #88]	@ 0x58
 80036bc:	9615      	str	r6, [sp, #84]	@ 0x54
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80036c2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80036c6:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 80036ca:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 80036ce:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80036d2:	ed97 7b02 	vldr	d7, [r7, #8]
 80036d6:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80036da:	ed97 7b04 	vldr	d7, [r7, #16]
 80036de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80036e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80036e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80036ea:	ed97 7b08 	vldr	d7, [r7, #32]
 80036ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80036f2:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80036f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80036fa:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80036fe:	ed8d 7b00 	vstr	d7, [sp]
 8003702:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <buildPacketRF+0x128>)
 8003704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003708:	480c      	ldr	r0, [pc, #48]	@ (800373c <buildPacketRF+0x12c>)
 800370a:	f008 fa29 	bl	800bb60 <sniprintf>

//  snprintf(tx_buff, sizeof(tx_buff), "x:%f, vx:%f, y:%f, vy:%f\n", kalman_filter.x_hat_prev_data[0],
//		   kalman_filter.x_hat_prev_data[1], kalman_filter.x_hat_prev_data[2], kalman_filter.x_hat_prev_data[3]);

  transmitTelemetry();
 800370e:	f000 f817 	bl	8003740 <transmitTelemetry>
}
 8003712:	bf00      	nop
 8003714:	373c      	adds	r7, #60	@ 0x3c
 8003716:	46bd      	mov	sp, r7
 8003718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371c:	20000318 	.word	0x20000318
 8003720:	20000314 	.word	0x20000314
 8003724:	20000430 	.word	0x20000430
 8003728:	20000424 	.word	0x20000424
 800372c:	2000043c 	.word	0x2000043c
 8003730:	20000828 	.word	0x20000828
 8003734:	20000820 	.word	0x20000820
 8003738:	0800e9b0 	.word	0x0800e9b0
 800373c:	20000e44 	.word	0x20000e44

08003740 <transmitTelemetry>:


void transmitTelemetry(void){
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  // Tansmit the buffer
  LoraBeginPacket(0);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fe fe8f 	bl	8002468 <LoraBeginPacket>
  LoraTransmit((char*)tx_buff);
 800374a:	4804      	ldr	r0, [pc, #16]	@ (800375c <transmitTelemetry+0x1c>)
 800374c:	f7fe fdfe 	bl	800234c <LoraTransmit>
  LoraEndPacket(0);
 8003750:	2000      	movs	r0, #0
 8003752:	f7fe fec1 	bl	80024d8 <LoraEndPacket>
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000e44 	.word	0x20000e44

08003760 <Error_Handler>:


void Error_Handler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003764:	b672      	cpsid	i
}
 8003766:	bf00      	nop
  __disable_irq();
  while (1)
    {
  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8003768:	2201      	movs	r2, #1
 800376a:	2102      	movs	r1, #2
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <Error_Handler+0x14>)
 800376e:	f002 f8ab 	bl	80058c8 <HAL_GPIO_WritePin>
 8003772:	e7f9      	b.n	8003768 <Error_Handler+0x8>
 8003774:	48000400 	.word	0x48000400

08003778 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800377c:	4b18      	ldr	r3, [pc, #96]	@ (80037e0 <MX_SPI3_Init+0x68>)
 800377e:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <MX_SPI3_Init+0x6c>)
 8003780:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003782:	4b17      	ldr	r3, [pc, #92]	@ (80037e0 <MX_SPI3_Init+0x68>)
 8003784:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003788:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800378a:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <MX_SPI3_Init+0x68>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003790:	4b13      	ldr	r3, [pc, #76]	@ (80037e0 <MX_SPI3_Init+0x68>)
 8003792:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003796:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <MX_SPI3_Init+0x68>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800379e:	4b10      	ldr	r3, [pc, #64]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037ae:	2208      	movs	r2, #8
 80037b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037be:	4b08      	ldr	r3, [pc, #32]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037c6:	2207      	movs	r2, #7
 80037c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80037d0:	4b03      	ldr	r3, [pc, #12]	@ (80037e0 <MX_SPI3_Init+0x68>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34
//  if (HAL_SPI_Init(&hspi3) != HAL_OK)
//  {
//    Error_Handler();
//  }
}
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000f44 	.word	0x20000f44
 80037e4:	40003c00 	.word	0x40003c00

080037e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ee:	4b0f      	ldr	r3, [pc, #60]	@ (800382c <HAL_MspInit+0x44>)
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	4a0e      	ldr	r2, [pc, #56]	@ (800382c <HAL_MspInit+0x44>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80037fa:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_MspInit+0x44>)
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_MspInit+0x44>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	4a08      	ldr	r2, [pc, #32]	@ (800382c <HAL_MspInit+0x44>)
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003810:	6593      	str	r3, [r2, #88]	@ 0x58
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_MspInit+0x44>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b09e      	sub	sp, #120	@ 0x78
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003838:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	609a      	str	r2, [r3, #8]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	2254      	movs	r2, #84	@ 0x54
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f008 fab1 	bl	800bdb8 <memset>
  if(hadc->Instance==ADC1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a25      	ldr	r2, [pc, #148]	@ (80038f0 <HAL_ADC_MspInit+0xc0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d143      	bne.n	80038e8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003860:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003864:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003866:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800386a:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800386c:	2302      	movs	r3, #2
 800386e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003870:	2301      	movs	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8003874:	2308      	movs	r3, #8
 8003876:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003878:	2307      	movs	r3, #7
 800387a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800387c:	2302      	movs	r3, #2
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003880:	2302      	movs	r3, #2
 8003882:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003884:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	4618      	mov	r0, r3
 8003890:	f003 fcea 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800389a:	f7ff ff61 	bl	8003760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800389e:	4b15      	ldr	r3, [pc, #84]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a2:	4a14      	ldr	r2, [pc, #80]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038aa:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b6:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	4a0e      	ldr	r2, [pc, #56]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038c2:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <HAL_ADC_MspInit+0xc4>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80038ce:	2381      	movs	r3, #129	@ 0x81
 80038d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80038d2:	230b      	movs	r3, #11
 80038d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80038de:	4619      	mov	r1, r3
 80038e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038e4:	f001 fe86 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	3778      	adds	r7, #120	@ 0x78
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	50040000 	.word	0x50040000
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b09e      	sub	sp, #120	@ 0x78
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	2254      	movs	r2, #84	@ 0x54
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f008 fa4d 	bl	800bdb8 <memset>
  if(hi2c->Instance==I2C1)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	@ (80039a0 <HAL_I2C_MspInit+0xa8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d137      	bne.n	8003998 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003928:	2340      	movs	r3, #64	@ 0x40
 800392a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800392c:	2300      	movs	r3, #0
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003930:	f107 0310 	add.w	r3, r7, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fc97 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003940:	f7ff ff0e 	bl	8003760 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003944:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 8003952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800395c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003960:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003962:	2312      	movs	r3, #18
 8003964:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800396e:	2304      	movs	r3, #4
 8003970:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003976:	4619      	mov	r1, r3
 8003978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800397c:	f001 fe3a 	bl	80055f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	4a07      	ldr	r2, [pc, #28]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 8003986:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800398a:	6593      	str	r3, [r2, #88]	@ 0x58
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_I2C_MspInit+0xac>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003998:	bf00      	nop
 800399a:	3778      	adds	r7, #120	@ 0x78
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40005400 	.word	0x40005400
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <HAL_SPI_MspInit+0x7c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d127      	bne.n	8003a1a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039ca:	4b17      	ldr	r3, [pc, #92]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d6:	4b14      	ldr	r3, [pc, #80]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e2:	4b11      	ldr	r3, [pc, #68]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e6:	4a10      	ldr	r2, [pc, #64]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003a28 <HAL_SPI_MspInit+0x80>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80039fa:	2338      	movs	r3, #56	@ 0x38
 80039fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fe:	2302      	movs	r3, #2
 8003a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	4619      	mov	r1, r3
 8003a14:	4805      	ldr	r0, [pc, #20]	@ (8003a2c <HAL_SPI_MspInit+0x84>)
 8003a16:	f001 fded 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a1a:	bf00      	nop
 8003a1c:	3728      	adds	r7, #40	@ 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40003c00 	.word	0x40003c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	48000400 	.word	0x48000400

08003a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b0a0      	sub	sp, #128	@ 0x80
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a48:	f107 0318 	add.w	r3, r7, #24
 8003a4c:	2254      	movs	r2, #84	@ 0x54
 8003a4e:	2100      	movs	r1, #0
 8003a50:	4618      	mov	r0, r3
 8003a52:	f008 f9b1 	bl	800bdb8 <memset>
  if(huart->Instance==USART1)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b50 <HAL_UART_MspInit+0x120>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d136      	bne.n	8003ace <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a68:	f107 0318 	add.w	r3, r7, #24
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fbfb 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a78:	f7ff fe72 	bl	8003760 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a7c:	4b35      	ldr	r3, [pc, #212]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a80:	4a34      	ldr	r2, [pc, #208]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a86:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a88:	4b32      	ldr	r3, [pc, #200]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a94:	4b2f      	ldr	r3, [pc, #188]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a98:	4a2e      	ldr	r2, [pc, #184]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aac:	23c0      	movs	r3, #192	@ 0xc0
 8003aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003abc:	2307      	movs	r3, #7
 8003abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4824      	ldr	r0, [pc, #144]	@ (8003b58 <HAL_UART_MspInit+0x128>)
 8003ac8:	f001 fd94 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003acc:	e03b      	b.n	8003b46 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a22      	ldr	r2, [pc, #136]	@ (8003b5c <HAL_UART_MspInit+0x12c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d136      	bne.n	8003b46 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f003 fbbf 	bl	8007268 <HAL_RCCEx_PeriphCLKConfig>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8003af0:	f7ff fe36 	bl	8003760 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003af4:	4b17      	ldr	r3, [pc, #92]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	4a16      	ldr	r2, [pc, #88]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b00:	4b14      	ldr	r3, [pc, #80]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b10:	4a10      	ldr	r2, [pc, #64]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b18:	4b0e      	ldr	r3, [pc, #56]	@ (8003b54 <HAL_UART_MspInit+0x124>)
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b24:	230c      	movs	r3, #12
 8003b26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b30:	2303      	movs	r3, #3
 8003b32:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b34:	2307      	movs	r3, #7
 8003b36:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b38:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b42:	f001 fd57 	bl	80055f4 <HAL_GPIO_Init>
}
 8003b46:	bf00      	nop
 8003b48:	3780      	adds	r7, #128	@ 0x80
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	48000400 	.word	0x48000400
 8003b5c:	40004400 	.word	0x40004400

08003b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <NMI_Handler+0x4>

08003b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b6c:	bf00      	nop
 8003b6e:	e7fd      	b.n	8003b6c <HardFault_Handler+0x4>

08003b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <MemManage_Handler+0x4>

08003b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7c:	bf00      	nop
 8003b7e:	e7fd      	b.n	8003b7c <BusFault_Handler+0x4>

08003b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <UsageFault_Handler+0x4>

08003b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb6:	f000 f9b9 	bl	8003f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
  return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_kill>:

int _kill(int pid, int sig)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b082      	sub	sp, #8
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bd8:	f008 f972 	bl	800bec0 <__errno>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2216      	movs	r2, #22
 8003be0:	601a      	str	r2, [r3, #0]
  return -1;
 8003be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_exit>:

void _exit (int status)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ffe7 	bl	8003bce <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <_exit+0x12>

08003c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e00a      	b.n	8003c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c16:	f3af 8000 	nop.w
 8003c1a:	4601      	mov	r1, r0
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	60ba      	str	r2, [r7, #8]
 8003c22:	b2ca      	uxtb	r2, r1
 8003c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	dbf0      	blt.n	8003c16 <_read+0x12>
  }

  return len;
 8003c34:	687b      	ldr	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b086      	sub	sp, #24
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e009      	b.n	8003c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	60ba      	str	r2, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	3301      	adds	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	dbf1      	blt.n	8003c50 <_write+0x12>
  }
  return len;
 8003c6c:	687b      	ldr	r3, [r7, #4]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_close>:

int _close(int file)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <_isatty>:

int _isatty(int file)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cb6:	2301      	movs	r3, #1
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <_sbrk+0x5c>)
 8003cea:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <_sbrk+0x60>)
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cf4:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cfc:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <_sbrk+0x64>)
 8003cfe:	4a12      	ldr	r2, [pc, #72]	@ (8003d48 <_sbrk+0x68>)
 8003d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <_sbrk+0x64>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d207      	bcs.n	8003d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d10:	f008 f8d6 	bl	800bec0 <__errno>
 8003d14:	4603      	mov	r3, r0
 8003d16:	220c      	movs	r2, #12
 8003d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	e009      	b.n	8003d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d20:	4b08      	ldr	r3, [pc, #32]	@ (8003d44 <_sbrk+0x64>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d26:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <_sbrk+0x64>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	4a05      	ldr	r2, [pc, #20]	@ (8003d44 <_sbrk+0x64>)
 8003d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d32:	68fb      	ldr	r3, [r7, #12]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000c000 	.word	0x2000c000
 8003d40:	00000400 	.word	0x00000400
 8003d44:	20000fa8 	.word	0x20000fa8
 8003d48:	20001210 	.word	0x20001210

08003d4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d50:	4b06      	ldr	r3, [pc, #24]	@ (8003d6c <SystemInit+0x20>)
 8003d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d56:	4a05      	ldr	r2, [pc, #20]	@ (8003d6c <SystemInit+0x20>)
 8003d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;

/* USART1 init function */
void MX_USART1_UART_Init(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8003d74:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d76:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <MX_USART1_UART_Init+0x5c>)
 8003d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d7c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d82:	4b11      	ldr	r3, [pc, #68]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d94:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d96:	220c      	movs	r2, #12
 8003d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003da0:	4b09      	ldr	r3, [pc, #36]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003da6:	4b08      	ldr	r3, [pc, #32]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003db2:	4805      	ldr	r0, [pc, #20]	@ (8003dc8 <MX_USART1_UART_Init+0x58>)
 8003db4:	f004 fadc 	bl	8008370 <HAL_UART_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003dbe:	f7ff fccf 	bl	8003760 <Error_Handler>
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000fac 	.word	0x20000fac
 8003dcc:	40013800 	.word	0x40013800

08003dd0 <MX_USART2_UART_Init>:


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8003dd4:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003dd6:	4a15      	ldr	r2, [pc, #84]	@ (8003e2c <MX_USART2_UART_Init+0x5c>)
 8003dd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003dda:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003ddc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003de0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003de2:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003df6:	220c      	movs	r2, #12
 8003df8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e00:	4b09      	ldr	r3, [pc, #36]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e06:	4b08      	ldr	r3, [pc, #32]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <MX_USART2_UART_Init+0x58>)
 8003e14:	f004 faac 	bl	8008370 <HAL_UART_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003e1e:	f7ff fc9f 	bl	8003760 <Error_Handler>
  }
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20001034 	.word	0x20001034
 8003e2c:	40004400 	.word	0x40004400

08003e30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003e68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e34:	f7ff ff8a 	bl	8003d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e38:	480c      	ldr	r0, [pc, #48]	@ (8003e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e3a:	490d      	ldr	r1, [pc, #52]	@ (8003e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e74 <LoopForever+0xe>)
  movs r3, #0
 8003e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e40:	e002      	b.n	8003e48 <LoopCopyDataInit>

08003e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e46:	3304      	adds	r3, #4

08003e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e4c:	d3f9      	bcc.n	8003e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e50:	4c0a      	ldr	r4, [pc, #40]	@ (8003e7c <LoopForever+0x16>)
  movs r3, #0
 8003e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e54:	e001      	b.n	8003e5a <LoopFillZerobss>

08003e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e58:	3204      	adds	r2, #4

08003e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e5c:	d3fb      	bcc.n	8003e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e5e:	f008 f835 	bl	800becc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e62:	f7ff f85f 	bl	8002f24 <main>

08003e66 <LoopForever>:

LoopForever:
    b LoopForever
 8003e66:	e7fe      	b.n	8003e66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003e68:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8003e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e70:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8003e74:	0800f248 	.word	0x0800f248
  ldr r2, =_sbss
 8003e78:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8003e7c:	2000120c 	.word	0x2000120c

08003e80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e80:	e7fe      	b.n	8003e80 <ADC1_IRQHandler>

08003e82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f001 fb6f 	bl	8005570 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e92:	200f      	movs	r0, #15
 8003e94:	f000 f80e 	bl	8003eb4 <HAL_InitTick>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	71fb      	strb	r3, [r7, #7]
 8003ea2:	e001      	b.n	8003ea8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ea4:	f7ff fca0 	bl	80037e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003ec0:	4b17      	ldr	r3, [pc, #92]	@ (8003f20 <HAL_InitTick+0x6c>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d023      	beq.n	8003f10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ec8:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <HAL_InitTick+0x70>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b14      	ldr	r3, [pc, #80]	@ (8003f20 <HAL_InitTick+0x6c>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fb7b 	bl	80055da <HAL_SYSTICK_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b0f      	cmp	r3, #15
 8003eee:	d809      	bhi.n	8003f04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	f001 fb45 	bl	8005586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_InitTick+0x74>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e007      	b.n	8003f14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
 8003f08:	e004      	b.n	8003f14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	73fb      	strb	r3, [r7, #15]
 8003f0e:	e001      	b.n	8003f14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000038 	.word	0x20000038
 8003f24:	20000030 	.word	0x20000030
 8003f28:	20000034 	.word	0x20000034

08003f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f30:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_IncTick+0x20>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b06      	ldr	r3, [pc, #24]	@ (8003f50 <HAL_IncTick+0x24>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a04      	ldr	r2, [pc, #16]	@ (8003f50 <HAL_IncTick+0x24>)
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000038 	.word	0x20000038
 8003f50:	200010bc 	.word	0x200010bc

08003f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return uwTick;
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_GetTick+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200010bc 	.word	0x200010bc

08003f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f74:	f7ff ffee 	bl	8003f54 <HAL_GetTick>
 8003f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d005      	beq.n	8003f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <HAL_Delay+0x44>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4413      	add	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f92:	bf00      	nop
 8003f94:	f7ff ffde 	bl	8003f54 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d8f7      	bhi.n	8003f94 <HAL_Delay+0x28>
  {
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000038 	.word	0x20000038

08003fb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	609a      	str	r2, [r3, #8]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	3360      	adds	r3, #96	@ 0x60
 800402e:	461a      	mov	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <LL_ADC_SetOffset+0x44>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	03fff000 	.word	0x03fff000

08004064 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3360      	adds	r3, #96	@ 0x60
 8004072:	461a      	mov	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	4413      	add	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3360      	adds	r3, #96	@ 0x60
 80040a0:	461a      	mov	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3330      	adds	r3, #48	@ 0x30
 80040fc:	461a      	mov	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	211f      	movs	r1, #31
 8004118:	fa01 f303 	lsl.w	r3, r1, r3
 800411c:	43db      	mvns	r3, r3
 800411e:	401a      	ands	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	0e9b      	lsrs	r3, r3, #26
 8004124:	f003 011f 	and.w	r1, r3, #31
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	fa01 f303 	lsl.w	r3, r1, r3
 8004132:	431a      	orrs	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3314      	adds	r3, #20
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0e5b      	lsrs	r3, r3, #25
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	4413      	add	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	0d1b      	lsrs	r3, r3, #20
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2107      	movs	r1, #7
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	43db      	mvns	r3, r3
 8004178:	401a      	ands	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	0d1b      	lsrs	r3, r3, #20
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	431a      	orrs	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041b4:	43db      	mvns	r3, r3
 80041b6:	401a      	ands	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f003 0318 	and.w	r3, r3, #24
 80041be:	4908      	ldr	r1, [pc, #32]	@ (80041e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80041c0:	40d9      	lsrs	r1, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	400b      	ands	r3, r1
 80041c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041d2:	bf00      	nop
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	0007ffff 	.word	0x0007ffff

080041e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80041f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6093      	str	r3, [r2, #8]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800421c:	d101      	bne.n	8004222 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004244:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800426c:	d101      	bne.n	8004272 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004294:	f043 0201 	orr.w	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80042b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042bc:	f043 0202 	orr.w	r2, r3, #2
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <LL_ADC_IsEnabled+0x18>
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <LL_ADC_IsEnabled+0x1a>
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d101      	bne.n	800430e <LL_ADC_IsDisableOngoing+0x18>
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <LL_ADC_IsDisableOngoing+0x1a>
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800432c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004330:	f043 0204 	orr.w	r2, r3, #4
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004358:	f043 0210 	orr.w	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b04      	cmp	r3, #4
 800437e:	d101      	bne.n	8004384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d101      	bne.n	80043d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e126      	b.n	8004648 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fa11 	bl	8003830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fef1 	bl	8004208 <LL_ADC_IsDeepPowerDownEnabled>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fed7 	bl	80041e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff ff0c 	bl	8004258 <LL_ADC_IsInternalRegulatorEnabled>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fef0 	bl	8004230 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004450:	4b7f      	ldr	r3, [pc, #508]	@ (8004650 <HAL_ADC_Init+0x270>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	4a7f      	ldr	r2, [pc, #508]	@ (8004654 <HAL_ADC_Init+0x274>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	099b      	lsrs	r3, r3, #6
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004464:	e002      	b.n	800446c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3b01      	subs	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f9      	bne.n	8004466 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff feee 	bl	8004258 <LL_ADC_IsInternalRegulatorEnabled>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004486:	f043 0210 	orr.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004492:	f043 0201 	orr.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff ff62 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80044a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 80bf 	bne.w	8004636 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f040 80bb 	bne.w	8004636 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80044c8:	f043 0202 	orr.w	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fefb 	bl	80042d0 <LL_ADC_IsEnabled>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10b      	bne.n	80044f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044e0:	485d      	ldr	r0, [pc, #372]	@ (8004658 <HAL_ADC_Init+0x278>)
 80044e2:	f7ff fef5 	bl	80042d0 <LL_ADC_IsEnabled>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d105      	bne.n	80044f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	485a      	ldr	r0, [pc, #360]	@ (800465c <HAL_ADC_Init+0x27c>)
 80044f4:	f7ff fd5e 	bl	8003fb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	7e5b      	ldrb	r3, [r3, #25]
 80044fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004502:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004508:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800450e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004516:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d106      	bne.n	8004534 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	3b01      	subs	r3, #1
 800452c:	045b      	lsls	r3, r3, #17
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	4313      	orrs	r3, r2
 8004532:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004540:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b42      	ldr	r3, [pc, #264]	@ (8004660 <HAL_ADC_Init+0x280>)
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	69b9      	ldr	r1, [r7, #24]
 8004560:	430b      	orrs	r3, r1
 8004562:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff26 	bl	80043ba <LL_ADC_INJ_IsConversionOngoing>
 800456e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d13d      	bne.n	80045f2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d13a      	bne.n	80045f2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004580:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004588:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004598:	f023 0302 	bic.w	r3, r3, #2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	430b      	orrs	r3, r1
 80045a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d118      	bne.n	80045e2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80045ba:	f023 0304 	bic.w	r3, r3, #4
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80045c6:	4311      	orrs	r1, r2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80045cc:	4311      	orrs	r1, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80045d2:	430a      	orrs	r2, r1
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	611a      	str	r2, [r3, #16]
 80045e0:	e007      	b.n	80045f2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10c      	bne.n	8004614 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004600:	f023 010f 	bic.w	r1, r3, #15
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	631a      	str	r2, [r3, #48]	@ 0x30
 8004612:	e007      	b.n	8004624 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 020f 	bic.w	r2, r2, #15
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004628:	f023 0303 	bic.w	r3, r3, #3
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
 8004634:	e007      	b.n	8004646 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f043 0210 	orr.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004646:	7ffb      	ldrb	r3, [r7, #31]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000030 	.word	0x20000030
 8004654:	053e2d63 	.word	0x053e2d63
 8004658:	50040000 	.word	0x50040000
 800465c:	50040300 	.word	0x50040300
 8004660:	fff0c007 	.word	0xfff0c007

08004664 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe7b 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d14f      	bne.n	800471c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_ADC_Start+0x26>
 8004686:	2302      	movs	r3, #2
 8004688:	e04b      	b.n	8004722 <HAL_ADC_Start+0xbe>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fdb6 	bl	8005204 <ADC_Enable>
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d137      	bne.n	8004712 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046aa:	f023 0301 	bic.w	r3, r3, #1
 80046ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c2:	d106      	bne.n	80046d2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	f023 0206 	bic.w	r2, r3, #6
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80046d0:	e002      	b.n	80046d8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	221c      	movs	r2, #28
 80046de:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff fe06 	bl	800431c <LL_ADC_REG_StartConversion>
 8004710:	e006      	b.n	8004720 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800471a:	e001      	b.n	8004720 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800471c:	2302      	movs	r3, #2
 800471e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_ADC_Stop+0x16>
 800473c:	2302      	movs	r3, #2
 800473e:	e023      	b.n	8004788 <HAL_ADC_Stop+0x5e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004748:	2103      	movs	r1, #3
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fc9e 	bl	800508c <ADC_ConversionStop>
 8004750:	4603      	mov	r3, r0
 8004752:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004754:	7bfb      	ldrb	r3, [r7, #15]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d111      	bne.n	800477e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fdd8 	bl	8005310 <ADC_Disable>
 8004760:	4603      	mov	r3, r0
 8004762:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800476e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f043 0201 	orr.w	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004786:	7bfb      	ldrb	r3, [r7, #15]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d102      	bne.n	80047a8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80047a2:	2308      	movs	r3, #8
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e010      	b.n	80047ca <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d007      	beq.n	80047c6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06f      	b.n	80048a6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80047c6:	2304      	movs	r3, #4
 80047c8:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80047ca:	f7ff fbc3 	bl	8003f54 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047d0:	e021      	b.n	8004816 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d01d      	beq.n	8004816 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80047da:	f7ff fbbb 	bl	8003f54 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <HAL_ADC_PollForConversion+0x60>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d112      	bne.n	8004816 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004802:	f043 0204 	orr.w	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e047      	b.n	80048a6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0d6      	beq.n	80047d2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004828:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fc46 	bl	80040c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01c      	beq.n	800487a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	7e5b      	ldrb	r3, [r3, #25]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d118      	bne.n	800487a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b08      	cmp	r3, #8
 8004854:	d111      	bne.n	800487a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d104      	bne.n	8004892 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2208      	movs	r2, #8
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e008      	b.n	80048a4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	220c      	movs	r2, #12
 80048a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0b6      	sub	sp, #216	@ 0xd8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x22>
 80048e6:	2302      	movs	r3, #2
 80048e8:	e3bb      	b.n	8005062 <HAL_ADC_ConfigChannel+0x79a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fd38 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f040 83a0 	bne.w	8005044 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d824      	bhi.n	800495e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	3b02      	subs	r3, #2
 800491a:	2b03      	cmp	r3, #3
 800491c:	d81b      	bhi.n	8004956 <HAL_ADC_ConfigChannel+0x8e>
 800491e:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <HAL_ADC_ConfigChannel+0x5c>)
 8004920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004924:	08004935 	.word	0x08004935
 8004928:	0800493d 	.word	0x0800493d
 800492c:	08004945 	.word	0x08004945
 8004930:	0800494d 	.word	0x0800494d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004934:	230c      	movs	r3, #12
 8004936:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800493a:	e010      	b.n	800495e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800493c:	2312      	movs	r3, #18
 800493e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004942:	e00c      	b.n	800495e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004944:	2318      	movs	r3, #24
 8004946:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800494a:	e008      	b.n	800495e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800494c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004950:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004954:	e003      	b.n	800495e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004956:	2306      	movs	r3, #6
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800495c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800496c:	f7ff fbbe 	bl	80040ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fcf9 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 800497a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fd19 	bl	80043ba <LL_ADC_INJ_IsConversionOngoing>
 8004988:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800498c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 81a4 	bne.w	8004cde <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 819f 	bne.w	8004cde <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6819      	ldr	r1, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f7ff fbc9 	bl	8004144 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	08db      	lsrs	r3, r3, #3
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d00a      	beq.n	80049ea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6919      	ldr	r1, [r3, #16]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049e4:	f7ff fb1a 	bl	800401c <LL_ADC_SetOffset>
 80049e8:	e179      	b.n	8004cde <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fb37 	bl	8004064 <LL_ADC_GetOffsetChannel>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x14e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff fb2c 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	0e9b      	lsrs	r3, r3, #26
 8004a10:	f003 021f 	and.w	r2, r3, #31
 8004a14:	e01e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x18c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fb21 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e004      	b.n	8004a52 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004a4c:	fab3 f383 	clz	r3, r3
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x1a4>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	e018      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x1d6>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004a80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004a88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e004      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004a94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d106      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff faf0 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fad4 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x214>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7ff fac9 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	0e9b      	lsrs	r3, r3, #26
 8004ad6:	f003 021f 	and.w	r2, r3, #31
 8004ada:	e01e      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x252>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fabe 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004afa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004b02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	e004      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004b12:	fab3 f383 	clz	r3, r3
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x26a>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	0e9b      	lsrs	r3, r3, #26
 8004b2c:	f003 031f 	and.w	r3, r3, #31
 8004b30:	e018      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x29c>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004b46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004b4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004b56:	2320      	movs	r3, #32
 8004b58:	e004      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d106      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2101      	movs	r1, #1
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fa8d 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2102      	movs	r1, #2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fa71 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x2da>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2102      	movs	r1, #2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fa66 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	0e9b      	lsrs	r3, r3, #26
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	e01e      	b.n	8004be0 <HAL_ADC_ConfigChannel+0x318>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fa5b 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004bc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004bd0:	2320      	movs	r3, #32
 8004bd2:	e004      	b.n	8004bde <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x330>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	0e9b      	lsrs	r3, r3, #26
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	e014      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x35a>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004c06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e004      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d106      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fa2e 	bl	8004090 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2103      	movs	r1, #3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fa12 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10a      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x398>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2103      	movs	r1, #3
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fa07 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004c56:	4603      	mov	r3, r0
 8004c58:	0e9b      	lsrs	r3, r3, #26
 8004c5a:	f003 021f 	and.w	r2, r3, #31
 8004c5e:	e017      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x3c8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2103      	movs	r1, #3
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff f9fc 	bl	8004064 <LL_ADC_GetOffsetChannel>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c7a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004c7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e003      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004c86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x3e0>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	e011      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x404>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004cc0:	2320      	movs	r3, #32
 8004cc2:	e003      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004cc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cc6:	fab3 f383 	clz	r3, r3
 8004cca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d106      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2103      	movs	r1, #3
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff f9d9 	bl	8004090 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff faf4 	bl	80042d0 <LL_ADC_IsEnabled>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f040 8140 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f7ff fa4d 	bl	800419c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	4a8f      	ldr	r2, [pc, #572]	@ (8004f44 <HAL_ADC_ConfigChannel+0x67c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	f040 8131 	bne.w	8004f70 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x46e>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	0e9b      	lsrs	r3, r3, #26
 8004d24:	3301      	adds	r3, #1
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b09      	cmp	r3, #9
 8004d2c:	bf94      	ite	ls
 8004d2e:	2301      	movls	r3, #1
 8004d30:	2300      	movhi	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	e019      	b.n	8004d6a <HAL_ADC_ConfigChannel+0x4a2>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004d48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004d4e:	2320      	movs	r3, #32
 8004d50:	e003      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2b09      	cmp	r3, #9
 8004d62:	bf94      	ite	ls
 8004d64:	2301      	movls	r3, #1
 8004d66:	2300      	movhi	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d079      	beq.n	8004e62 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d107      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x4c2>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	0e9b      	lsrs	r3, r3, #26
 8004d80:	3301      	adds	r3, #1
 8004d82:	069b      	lsls	r3, r3, #26
 8004d84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d88:	e015      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x4ee>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d92:	fa93 f3a3 	rbit	r3, r3
 8004d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004da2:	2320      	movs	r3, #32
 8004da4:	e003      	b.n	8004dae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da8:	fab3 f383 	clz	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	069b      	lsls	r3, r3, #26
 8004db2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d109      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x50e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0e9b      	lsrs	r3, r3, #26
 8004dc8:	3301      	adds	r3, #1
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	e017      	b.n	8004e06 <HAL_ADC_ConfigChannel+0x53e>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dde:	fa93 f3a3 	rbit	r3, r3
 8004de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004dee:	2320      	movs	r3, #32
 8004df0:	e003      	b.n	8004dfa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004df4:	fab3 f383 	clz	r3, r3
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	ea42 0103 	orr.w	r1, r2, r3
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x564>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	0e9b      	lsrs	r3, r3, #26
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	f003 021f 	and.w	r2, r3, #31
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	051b      	lsls	r3, r3, #20
 8004e2a:	e018      	b.n	8004e5e <HAL_ADC_ConfigChannel+0x596>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	fa93 f3a3 	rbit	r3, r3
 8004e38:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004e44:	2320      	movs	r3, #32
 8004e46:	e003      	b.n	8004e50 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4a:	fab3 f383 	clz	r3, r3
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	3301      	adds	r3, #1
 8004e52:	f003 021f 	and.w	r2, r3, #31
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e5e:	430b      	orrs	r3, r1
 8004e60:	e081      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d107      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x5b6>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	0e9b      	lsrs	r3, r3, #26
 8004e74:	3301      	adds	r3, #1
 8004e76:	069b      	lsls	r3, r3, #26
 8004e78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e7c:	e015      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x5e2>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004e96:	2320      	movs	r3, #32
 8004e98:	e003      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	fab3 f383 	clz	r3, r3
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	069b      	lsls	r3, r3, #26
 8004ea6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x602>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	0e9b      	lsrs	r3, r3, #26
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	e017      	b.n	8004efa <HAL_ADC_ConfigChannel+0x632>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	61bb      	str	r3, [r7, #24]
  return result;
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	e003      	b.n	8004eee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8004efa:	ea42 0103 	orr.w	r1, r2, r3
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x65e>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	0e9b      	lsrs	r3, r3, #26
 8004f10:	3301      	adds	r3, #1
 8004f12:	f003 021f 	and.w	r2, r3, #31
 8004f16:	4613      	mov	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b1e      	subs	r3, #30
 8004f1e:	051b      	lsls	r3, r3, #20
 8004f20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	e01e      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x69c>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	fa93 f3a3 	rbit	r3, r3
 8004f32:	60fb      	str	r3, [r7, #12]
  return result;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004f3e:	2320      	movs	r3, #32
 8004f40:	e006      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x688>
 8004f42:	bf00      	nop
 8004f44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fab3 f383 	clz	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	3301      	adds	r3, #1
 8004f52:	f003 021f 	and.w	r2, r3, #31
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	3b1e      	subs	r3, #30
 8004f5e:	051b      	lsls	r3, r3, #20
 8004f60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	f7ff f8ea 	bl	8004144 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b3d      	ldr	r3, [pc, #244]	@ (800506c <HAL_ADC_ConfigChannel+0x7a4>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d06c      	beq.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f7c:	483c      	ldr	r0, [pc, #240]	@ (8005070 <HAL_ADC_ConfigChannel+0x7a8>)
 8004f7e:	f7ff f83f 	bl	8004000 <LL_ADC_GetCommonPathInternalCh>
 8004f82:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a3a      	ldr	r2, [pc, #232]	@ (8005074 <HAL_ADC_ConfigChannel+0x7ac>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d127      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d121      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a35      	ldr	r2, [pc, #212]	@ (8005078 <HAL_ADC_ConfigChannel+0x7b0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d157      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004faa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fae:	4619      	mov	r1, r3
 8004fb0:	482f      	ldr	r0, [pc, #188]	@ (8005070 <HAL_ADC_ConfigChannel+0x7a8>)
 8004fb2:	f7ff f812 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <HAL_ADC_ConfigChannel+0x7b4>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	099b      	lsrs	r3, r3, #6
 8004fbc:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <HAL_ADC_ConfigChannel+0x7b8>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004fd0:	e002      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f9      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fde:	e03a      	b.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a27      	ldr	r2, [pc, #156]	@ (8005084 <HAL_ADC_ConfigChannel+0x7bc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d113      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10d      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HAL_ADC_ConfigChannel+0x7b0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d12a      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005004:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005008:	4619      	mov	r1, r3
 800500a:	4819      	ldr	r0, [pc, #100]	@ (8005070 <HAL_ADC_ConfigChannel+0x7a8>)
 800500c:	f7fe ffe5 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005010:	e021      	b.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1c      	ldr	r2, [pc, #112]	@ (8005088 <HAL_ADC_ConfigChannel+0x7c0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d11c      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800501c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005020:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d116      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a12      	ldr	r2, [pc, #72]	@ (8005078 <HAL_ADC_ConfigChannel+0x7b0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005036:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800503a:	4619      	mov	r1, r3
 800503c:	480c      	ldr	r0, [pc, #48]	@ (8005070 <HAL_ADC_ConfigChannel+0x7a8>)
 800503e:	f7fe ffcc 	bl	8003fda <LL_ADC_SetCommonPathInternalCh>
 8005042:	e008      	b.n	8005056 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800505e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005062:	4618      	mov	r0, r3
 8005064:	37d8      	adds	r7, #216	@ 0xd8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	80080000 	.word	0x80080000
 8005070:	50040300 	.word	0x50040300
 8005074:	c7520000 	.word	0xc7520000
 8005078:	50040000 	.word	0x50040000
 800507c:	20000030 	.word	0x20000030
 8005080:	053e2d63 	.word	0x053e2d63
 8005084:	cb840000 	.word	0xcb840000
 8005088:	80000001 	.word	0x80000001

0800508c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff f962 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 80050a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff f983 	bl	80043ba <LL_ADC_INJ_IsConversionOngoing>
 80050b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8098 	beq.w	80051f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d02a      	beq.n	8005128 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	7e5b      	ldrb	r3, [r3, #25]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d126      	bne.n	8005128 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	7e1b      	ldrb	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d122      	bne.n	8005128 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80050e6:	e014      	b.n	8005112 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	4a45      	ldr	r2, [pc, #276]	@ (8005200 <ADC_ConversionStop+0x174>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d90d      	bls.n	800510c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f4:	f043 0210 	orr.w	r2, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005100:	f043 0201 	orr.w	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e074      	b.n	80051f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3301      	adds	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800511c:	2b40      	cmp	r3, #64	@ 0x40
 800511e:	d1e3      	bne.n	80050e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2240      	movs	r2, #64	@ 0x40
 8005126:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d014      	beq.n	8005158 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff f91a 	bl	800436c <LL_ADC_REG_IsConversionOngoing>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f8d7 	bl	80042f6 <LL_ADC_IsDisableOngoing>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff f8f6 	bl	8004344 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d014      	beq.n	8005188 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff f929 	bl	80043ba <LL_ADC_INJ_IsConversionOngoing>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff f8bf 	bl	80042f6 <LL_ADC_IsDisableOngoing>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d104      	bne.n	8005188 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff f905 	bl	8004392 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d005      	beq.n	800519a <ADC_ConversionStop+0x10e>
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	2b03      	cmp	r3, #3
 8005192:	d105      	bne.n	80051a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005194:	230c      	movs	r3, #12
 8005196:	617b      	str	r3, [r7, #20]
        break;
 8005198:	e005      	b.n	80051a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800519a:	2308      	movs	r3, #8
 800519c:	617b      	str	r3, [r7, #20]
        break;
 800519e:	e002      	b.n	80051a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80051a0:	2304      	movs	r3, #4
 80051a2:	617b      	str	r3, [r7, #20]
        break;
 80051a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80051a6:	f7fe fed5 	bl	8003f54 <HAL_GetTick>
 80051aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80051ac:	e01b      	b.n	80051e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80051ae:	f7fe fed1 	bl	8003f54 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d914      	bls.n	80051e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00d      	beq.n	80051e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	f043 0210 	orr.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e007      	b.n	80051f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1dc      	bne.n	80051ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	a33fffff 	.word	0xa33fffff

08005204 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff f85b 	bl	80042d0 <LL_ADC_IsEnabled>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d169      	bne.n	80052f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689a      	ldr	r2, [r3, #8]
 8005226:	4b36      	ldr	r3, [pc, #216]	@ (8005300 <ADC_Enable+0xfc>)
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00d      	beq.n	800524a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	f043 0210 	orr.w	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e055      	b.n	80052f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff f816 	bl	8004280 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005254:	482b      	ldr	r0, [pc, #172]	@ (8005304 <ADC_Enable+0x100>)
 8005256:	f7fe fed3 	bl	8004000 <LL_ADC_GetCommonPathInternalCh>
 800525a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800525c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005264:	4b28      	ldr	r3, [pc, #160]	@ (8005308 <ADC_Enable+0x104>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	099b      	lsrs	r3, r3, #6
 800526a:	4a28      	ldr	r2, [pc, #160]	@ (800530c <ADC_Enable+0x108>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800527e:	e002      	b.n	8005286 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	3b01      	subs	r3, #1
 8005284:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f9      	bne.n	8005280 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800528c:	f7fe fe62 	bl	8003f54 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005292:	e028      	b.n	80052e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff f819 	bl	80042d0 <LL_ADC_IsEnabled>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d104      	bne.n	80052ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7fe ffe9 	bl	8004280 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052ae:	f7fe fe51 	bl	8003f54 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d914      	bls.n	80052e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d00d      	beq.n	80052e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f043 0210 	orr.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052da:	f043 0201 	orr.w	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e007      	b.n	80052f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d1cf      	bne.n	8005294 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	8000003f 	.word	0x8000003f
 8005304:	50040300 	.word	0x50040300
 8005308:	20000030 	.word	0x20000030
 800530c:	053e2d63 	.word	0x053e2d63

08005310 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe ffea 	bl	80042f6 <LL_ADC_IsDisableOngoing>
 8005322:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7fe ffd1 	bl	80042d0 <LL_ADC_IsEnabled>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d047      	beq.n	80053c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d144      	bne.n	80053c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 030d 	and.w	r3, r3, #13
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10c      	bne.n	8005362 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe ffab 	bl	80042a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2203      	movs	r2, #3
 8005358:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800535a:	f7fe fdfb 	bl	8003f54 <HAL_GetTick>
 800535e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005360:	e029      	b.n	80053b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e023      	b.n	80053c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800537e:	f7fe fde9 	bl	8003f54 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d914      	bls.n	80053b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539e:	f043 0210 	orr.w	r2, r3, #16
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053aa:	f043 0201 	orr.w	r2, r3, #1
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e007      	b.n	80053c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1dc      	bne.n	800537e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <__NVIC_SetPriorityGrouping>:
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <__NVIC_SetPriorityGrouping+0x44>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053ec:	4013      	ands	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005402:	4a04      	ldr	r2, [pc, #16]	@ (8005414 <__NVIC_SetPriorityGrouping+0x44>)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	60d3      	str	r3, [r2, #12]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	e000ed00 	.word	0xe000ed00

08005418 <__NVIC_GetPriorityGrouping>:
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800541c:	4b04      	ldr	r3, [pc, #16]	@ (8005430 <__NVIC_GetPriorityGrouping+0x18>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 0307 	and.w	r3, r3, #7
}
 8005426:	4618      	mov	r0, r3
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <__NVIC_EnableIRQ>:
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800543e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005442:	2b00      	cmp	r3, #0
 8005444:	db0b      	blt.n	800545e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	4907      	ldr	r1, [pc, #28]	@ (800546c <__NVIC_EnableIRQ+0x38>)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	2001      	movs	r0, #1
 8005456:	fa00 f202 	lsl.w	r2, r0, r2
 800545a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	e000e100 	.word	0xe000e100

08005470 <__NVIC_SetPriority>:
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800547c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005480:	2b00      	cmp	r3, #0
 8005482:	db0a      	blt.n	800549a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	490c      	ldr	r1, [pc, #48]	@ (80054bc <__NVIC_SetPriority+0x4c>)
 800548a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548e:	0112      	lsls	r2, r2, #4
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	440b      	add	r3, r1
 8005494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005498:	e00a      	b.n	80054b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	4908      	ldr	r1, [pc, #32]	@ (80054c0 <__NVIC_SetPriority+0x50>)
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	3b04      	subs	r3, #4
 80054a8:	0112      	lsls	r2, r2, #4
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	440b      	add	r3, r1
 80054ae:	761a      	strb	r2, [r3, #24]
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000e100 	.word	0xe000e100
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <NVIC_EncodePriority>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b089      	sub	sp, #36	@ 0x24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f1c3 0307 	rsb	r3, r3, #7
 80054de:	2b04      	cmp	r3, #4
 80054e0:	bf28      	it	cs
 80054e2:	2304      	movcs	r3, #4
 80054e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3304      	adds	r3, #4
 80054ea:	2b06      	cmp	r3, #6
 80054ec:	d902      	bls.n	80054f4 <NVIC_EncodePriority+0x30>
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	3b03      	subs	r3, #3
 80054f2:	e000      	b.n	80054f6 <NVIC_EncodePriority+0x32>
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054f8:	f04f 32ff 	mov.w	r2, #4294967295
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43da      	mvns	r2, r3
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	401a      	ands	r2, r3
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800550c:	f04f 31ff 	mov.w	r1, #4294967295
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	fa01 f303 	lsl.w	r3, r1, r3
 8005516:	43d9      	mvns	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	4313      	orrs	r3, r2
}
 800551e:	4618      	mov	r0, r3
 8005520:	3724      	adds	r7, #36	@ 0x24
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800553c:	d301      	bcc.n	8005542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800553e:	2301      	movs	r3, #1
 8005540:	e00f      	b.n	8005562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005542:	4a0a      	ldr	r2, [pc, #40]	@ (800556c <SysTick_Config+0x40>)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3b01      	subs	r3, #1
 8005548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800554a:	210f      	movs	r1, #15
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	f7ff ff8e 	bl	8005470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005554:	4b05      	ldr	r3, [pc, #20]	@ (800556c <SysTick_Config+0x40>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800555a:	4b04      	ldr	r3, [pc, #16]	@ (800556c <SysTick_Config+0x40>)
 800555c:	2207      	movs	r2, #7
 800555e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	e000e010 	.word	0xe000e010

08005570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff29 	bl	80053d0 <__NVIC_SetPriorityGrouping>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b086      	sub	sp, #24
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
 8005592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005598:	f7ff ff3e 	bl	8005418 <__NVIC_GetPriorityGrouping>
 800559c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	6978      	ldr	r0, [r7, #20]
 80055a4:	f7ff ff8e 	bl	80054c4 <NVIC_EncodePriority>
 80055a8:	4602      	mov	r2, r0
 80055aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ae:	4611      	mov	r1, r2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff ff5d 	bl	8005470 <__NVIC_SetPriority>
}
 80055b6:	bf00      	nop
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	4603      	mov	r3, r0
 80055c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7ff ff31 	bl	8005434 <__NVIC_EnableIRQ>
}
 80055d2:	bf00      	nop
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff ffa2 	bl	800552c <SysTick_Config>
 80055e8:	4603      	mov	r3, r0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
	...

080055f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005602:	e148      	b.n	8005896 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 813a 	beq.w	8005890 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d005      	beq.n	8005634 <HAL_GPIO_Init+0x40>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0303 	and.w	r3, r3, #3
 8005630:	2b02      	cmp	r3, #2
 8005632:	d130      	bne.n	8005696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800566a:	2201      	movs	r2, #1
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0201 	and.w	r2, r3, #1
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d017      	beq.n	80056d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2203      	movs	r2, #3
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d123      	bne.n	8005726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	2203      	movs	r2, #3
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8094 	beq.w	8005890 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005768:	4b52      	ldr	r3, [pc, #328]	@ (80058b4 <HAL_GPIO_Init+0x2c0>)
 800576a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576c:	4a51      	ldr	r2, [pc, #324]	@ (80058b4 <HAL_GPIO_Init+0x2c0>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6613      	str	r3, [r2, #96]	@ 0x60
 8005774:	4b4f      	ldr	r3, [pc, #316]	@ (80058b4 <HAL_GPIO_Init+0x2c0>)
 8005776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005780:	4a4d      	ldr	r2, [pc, #308]	@ (80058b8 <HAL_GPIO_Init+0x2c4>)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	3302      	adds	r3, #2
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057aa:	d00d      	beq.n	80057c8 <HAL_GPIO_Init+0x1d4>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a43      	ldr	r2, [pc, #268]	@ (80058bc <HAL_GPIO_Init+0x2c8>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <HAL_GPIO_Init+0x1d0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a42      	ldr	r2, [pc, #264]	@ (80058c0 <HAL_GPIO_Init+0x2cc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d101      	bne.n	80057c0 <HAL_GPIO_Init+0x1cc>
 80057bc:	2302      	movs	r3, #2
 80057be:	e004      	b.n	80057ca <HAL_GPIO_Init+0x1d6>
 80057c0:	2307      	movs	r3, #7
 80057c2:	e002      	b.n	80057ca <HAL_GPIO_Init+0x1d6>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_GPIO_Init+0x1d6>
 80057c8:	2300      	movs	r3, #0
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	f002 0203 	and.w	r2, r2, #3
 80057d0:	0092      	lsls	r2, r2, #2
 80057d2:	4093      	lsls	r3, r2
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057da:	4937      	ldr	r1, [pc, #220]	@ (80058b8 <HAL_GPIO_Init+0x2c4>)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	3302      	adds	r3, #2
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057e8:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	43db      	mvns	r3, r3
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4013      	ands	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800580c:	4a2d      	ldr	r2, [pc, #180]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005812:	4b2c      	ldr	r3, [pc, #176]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	43db      	mvns	r3, r3
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4013      	ands	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005836:	4a23      	ldr	r2, [pc, #140]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800583c:	4b21      	ldr	r3, [pc, #132]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005860:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005866:	4b17      	ldr	r3, [pc, #92]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800588a:	4a0e      	ldr	r2, [pc, #56]	@ (80058c4 <HAL_GPIO_Init+0x2d0>)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	3301      	adds	r3, #1
 8005894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f47f aeaf 	bne.w	8005604 <HAL_GPIO_Init+0x10>
  }
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	371c      	adds	r7, #28
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40010000 	.word	0x40010000
 80058bc:	48000400 	.word	0x48000400
 80058c0:	48000800 	.word	0x48000800
 80058c4:	40010400 	.word	0x40010400

080058c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	460b      	mov	r3, r1
 80058d2:	807b      	strh	r3, [r7, #2]
 80058d4:	4613      	mov	r3, r2
 80058d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d8:	787b      	ldrb	r3, [r7, #1]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058e4:	e002      	b.n	80058ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058e6:	887a      	ldrh	r2, [r7, #2]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800590a:	887a      	ldrh	r2, [r7, #2]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4013      	ands	r3, r2
 8005910:	041a      	lsls	r2, r3, #16
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	43d9      	mvns	r1, r3
 8005916:	887b      	ldrh	r3, [r7, #2]
 8005918:	400b      	ands	r3, r1
 800591a:	431a      	orrs	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	619a      	str	r2, [r3, #24]
}
 8005920:	bf00      	nop
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08d      	b.n	8005a5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fd ffd0 	bl	80038f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	@ 0x24
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800597c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800598c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059a2:	609a      	str	r2, [r3, #8]
 80059a4:	e006      	b.n	80059b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d108      	bne.n	80059ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059ca:	605a      	str	r2, [r3, #4]
 80059cc:	e007      	b.n	80059de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68da      	ldr	r2, [r3, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69d9      	ldr	r1, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1a      	ldr	r2, [r3, #32]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	607a      	str	r2, [r7, #4]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	460b      	mov	r3, r1
 8005a72:	817b      	strh	r3, [r7, #10]
 8005a74:	4613      	mov	r3, r2
 8005a76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	f040 80fd 	bne.w	8005c80 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_I2C_Master_Transmit+0x30>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e0f6      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a9c:	f7fe fa5a 	bl	8003f54 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2319      	movs	r3, #25
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 fa24 	bl	8005efc <I2C_WaitOnFlagUntilTimeout>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e0e1      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2221      	movs	r2, #33	@ 0x21
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2210      	movs	r2, #16
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	893a      	ldrh	r2, [r7, #8]
 8005ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	2bff      	cmp	r3, #255	@ 0xff
 8005aee:	d906      	bls.n	8005afe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	22ff      	movs	r2, #255	@ 0xff
 8005af4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005af6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e007      	b.n	8005b0e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b0c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d024      	beq.n	8005b60 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	781a      	ldrb	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	8979      	ldrh	r1, [r7, #10]
 8005b52:	4b4e      	ldr	r3, [pc, #312]	@ (8005c8c <HAL_I2C_Master_Transmit+0x228>)
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fc1f 	bl	800639c <I2C_TransferConfig>
 8005b5e:	e066      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	8979      	ldrh	r1, [r7, #10]
 8005b68:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <HAL_I2C_Master_Transmit+0x228>)
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f000 fc14 	bl	800639c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b74:	e05b      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	6a39      	ldr	r1, [r7, #32]
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	f000 fa17 	bl	8005fae <I2C_WaitOnTXISFlagUntilTimeout>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d001      	beq.n	8005b8a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e07b      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	781a      	ldrb	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d034      	beq.n	8005c2e <HAL_I2C_Master_Transmit+0x1ca>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d130      	bne.n	8005c2e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2180      	movs	r1, #128	@ 0x80
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 f990 	bl	8005efc <I2C_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e04d      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2bff      	cmp	r3, #255	@ 0xff
 8005bee:	d90e      	bls.n	8005c0e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	22ff      	movs	r2, #255	@ 0xff
 8005bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	8979      	ldrh	r1, [r7, #10]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 fbc8 	bl	800639c <I2C_TransferConfig>
 8005c0c:	e00f      	b.n	8005c2e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	8979      	ldrh	r1, [r7, #10]
 8005c20:	2300      	movs	r3, #0
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fbb7 	bl	800639c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d19e      	bne.n	8005b76 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	6a39      	ldr	r1, [r7, #32]
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f9fd 	bl	800603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d001      	beq.n	8005c4c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e01a      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2220      	movs	r2, #32
 8005c52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6859      	ldr	r1, [r3, #4]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <HAL_I2C_Master_Transmit+0x22c>)
 8005c60:	400b      	ands	r3, r1
 8005c62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	80002000 	.word	0x80002000
 8005c90:	fe00e800 	.word	0xfe00e800

08005c94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	817b      	strh	r3, [r7, #10]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	f040 80db 	bne.w	8005e6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d101      	bne.n	8005cc4 <HAL_I2C_Master_Receive+0x30>
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e0d4      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ccc:	f7fe f942 	bl	8003f54 <HAL_GetTick>
 8005cd0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2319      	movs	r3, #25
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f90c 	bl	8005efc <I2C_WaitOnFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0bf      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2222      	movs	r2, #34	@ 0x22
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	893a      	ldrh	r2, [r7, #8]
 8005d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2bff      	cmp	r3, #255	@ 0xff
 8005d1e:	d90e      	bls.n	8005d3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	8979      	ldrh	r1, [r7, #10]
 8005d2e:	4b52      	ldr	r3, [pc, #328]	@ (8005e78 <HAL_I2C_Master_Receive+0x1e4>)
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fb30 	bl	800639c <I2C_TransferConfig>
 8005d3c:	e06d      	b.n	8005e1a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	8979      	ldrh	r1, [r7, #10]
 8005d50:	4b49      	ldr	r3, [pc, #292]	@ (8005e78 <HAL_I2C_Master_Receive+0x1e4>)
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 fb1f 	bl	800639c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d5e:	e05c      	b.n	8005e1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	6a39      	ldr	r1, [r7, #32]
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f9ad 	bl	80060c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e07c      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d034      	beq.n	8005e1a <HAL_I2C_Master_Receive+0x186>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d130      	bne.n	8005e1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2180      	movs	r1, #128	@ 0x80
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f89a 	bl	8005efc <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e04d      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2bff      	cmp	r3, #255	@ 0xff
 8005dda:	d90e      	bls.n	8005dfa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	22ff      	movs	r2, #255	@ 0xff
 8005de0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	8979      	ldrh	r1, [r7, #10]
 8005dea:	2300      	movs	r3, #0
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fad2 	bl	800639c <I2C_TransferConfig>
 8005df8:	e00f      	b.n	8005e1a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	8979      	ldrh	r1, [r7, #10]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fac1 	bl	800639c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d19d      	bne.n	8005d60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	6a39      	ldr	r1, [r7, #32]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f907 	bl	800603c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e01a      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6859      	ldr	r1, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e7c <HAL_I2C_Master_Receive+0x1e8>)
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2220      	movs	r2, #32
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	80002400 	.word	0x80002400
 8005e7c:	fe00e800 	.word	0xfe00e800

08005e80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e8e:	b2db      	uxtb	r3, r3
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d103      	bne.n	8005ed2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d007      	beq.n	8005ef0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	619a      	str	r2, [r3, #24]
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f0c:	e03b      	b.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f962 	bl	80061dc <I2C_IsErrorOccurred>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e041      	b.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d02d      	beq.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fe f813 	bl	8003f54 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d122      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d113      	bne.n	8005f86 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f62:	f043 0220 	orr.w	r2, r3, #32
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e00f      	b.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699a      	ldr	r2, [r3, #24]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d0b4      	beq.n	8005f0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	60f8      	str	r0, [r7, #12]
 8005fb6:	60b9      	str	r1, [r7, #8]
 8005fb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fba:	e033      	b.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 f90b 	bl	80061dc <I2C_IsErrorOccurred>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e031      	b.n	8006034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	d025      	beq.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fd ffbc 	bl	8003f54 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11a      	bne.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d013      	beq.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e007      	b.n	8006034 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d1c4      	bne.n	8005fbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006048:	e02f      	b.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 f8c4 	bl	80061dc <I2C_IsErrorOccurred>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e02d      	b.n	80060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605e:	f7fd ff79 	bl	8003f54 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d302      	bcc.n	8006074 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11a      	bne.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d013      	beq.n	80060aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006086:	f043 0220 	orr.w	r2, r3, #32
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e007      	b.n	80060ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	d1c8      	bne.n	800604a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
	...

080060c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80060d4:	e071      	b.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f87e 	bl	80061dc <I2C_IsErrorOccurred>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	d13b      	bne.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80060f8:	7dfb      	ldrb	r3, [r7, #23]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d138      	bne.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b04      	cmp	r3, #4
 800610a:	d105      	bne.n	8006118 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f003 0310 	and.w	r3, r3, #16
 8006122:	2b10      	cmp	r3, #16
 8006124:	d121      	bne.n	800616a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2204      	movs	r2, #4
 8006132:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2220      	movs	r2, #32
 800613a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	4b24      	ldr	r3, [pc, #144]	@ (80061d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006148:	400b      	ands	r3, r1
 800614a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	75fb      	strb	r3, [r7, #23]
 8006168:	e002      	b.n	8006170 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006170:	f7fd fef0 	bl	8003f54 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d119      	bne.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d116      	bne.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f003 0304 	and.w	r3, r3, #4
 8006196:	2b04      	cmp	r3, #4
 8006198:	d00f      	beq.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800619e:	f043 0220 	orr.w	r2, r3, #32
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d002      	beq.n	80061ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d083      	beq.n	80060d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	fe00e800 	.word	0xfe00e800

080061dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d068      	beq.n	80062da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2210      	movs	r2, #16
 800620e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006210:	e049      	b.n	80062a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d045      	beq.n	80062a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800621a:	f7fd fe9b 	bl	8003f54 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	429a      	cmp	r2, r3
 8006228:	d302      	bcc.n	8006230 <I2C_IsErrorOccurred+0x54>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d13a      	bne.n	80062a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800623a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006242:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800624e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006252:	d121      	bne.n	8006298 <I2C_IsErrorOccurred+0xbc>
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800625a:	d01d      	beq.n	8006298 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800625c:	7cfb      	ldrb	r3, [r7, #19]
 800625e:	2b20      	cmp	r3, #32
 8006260:	d01a      	beq.n	8006298 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006270:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006272:	f7fd fe6f 	bl	8003f54 <HAL_GetTick>
 8006276:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006278:	e00e      	b.n	8006298 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800627a:	f7fd fe6b 	bl	8003f54 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b19      	cmp	r3, #25
 8006286:	d907      	bls.n	8006298 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	f043 0320 	orr.w	r3, r3, #32
 800628e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006296:	e006      	b.n	80062a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d1e9      	bne.n	800627a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d003      	beq.n	80062bc <I2C_IsErrorOccurred+0xe0>
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0aa      	beq.n	8006212 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2220      	movs	r2, #32
 80062ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00b      	beq.n	8006304 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	f043 0308 	orr.w	r3, r3, #8
 8006314:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800631e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f043 0302 	orr.w	r3, r3, #2
 8006336:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01c      	beq.n	800638a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff fdaf 	bl	8005eb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <I2C_IsErrorOccurred+0x1bc>)
 8006362:	400b      	ands	r3, r1
 8006364:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800638a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800638e:	4618      	mov	r0, r3
 8006390:	3728      	adds	r7, #40	@ 0x28
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	fe00e800 	.word	0xfe00e800

0800639c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	607b      	str	r3, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	817b      	strh	r3, [r7, #10]
 80063aa:	4613      	mov	r3, r2
 80063ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063ae:	897b      	ldrh	r3, [r7, #10]
 80063b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063b4:	7a7b      	ldrb	r3, [r7, #9]
 80063b6:	041b      	lsls	r3, r3, #16
 80063b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	6a3b      	ldr	r3, [r7, #32]
 80063d4:	0d5b      	lsrs	r3, r3, #21
 80063d6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <I2C_TransferConfig+0x60>)
 80063dc:	430b      	orrs	r3, r1
 80063de:	43db      	mvns	r3, r3
 80063e0:	ea02 0103 	and.w	r1, r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	03ff63ff 	.word	0x03ff63ff

08006400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b20      	cmp	r3, #32
 8006414:	d138      	bne.n	8006488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006420:	2302      	movs	r3, #2
 8006422:	e032      	b.n	800648a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2224      	movs	r2, #36	@ 0x24
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0201 	orr.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006496:	b480      	push	{r7}
 8006498:	b085      	sub	sp, #20
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d139      	bne.n	8006520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d101      	bne.n	80064ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e033      	b.n	8006522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2224      	movs	r2, #36	@ 0x24
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80064e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	021b      	lsls	r3, r3, #8
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006534:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <HAL_PWREx_GetVoltageRange+0x18>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800653c:	4618      	mov	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40007000 	.word	0x40007000

0800654c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655a:	d130      	bne.n	80065be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800655c:	4b23      	ldr	r3, [pc, #140]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006568:	d038      	beq.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800656a:	4b20      	ldr	r3, [pc, #128]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006574:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800657a:	4b1d      	ldr	r3, [pc, #116]	@ (80065f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2232      	movs	r2, #50	@ 0x32
 8006580:	fb02 f303 	mul.w	r3, r2, r3
 8006584:	4a1b      	ldr	r2, [pc, #108]	@ (80065f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006586:	fba2 2303 	umull	r2, r3, r2, r3
 800658a:	0c9b      	lsrs	r3, r3, #18
 800658c:	3301      	adds	r3, #1
 800658e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006590:	e002      	b.n	8006598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3b01      	subs	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006598:	4b14      	ldr	r3, [pc, #80]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065a4:	d102      	bne.n	80065ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1f2      	bne.n	8006592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065ac:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b8:	d110      	bne.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e00f      	b.n	80065de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80065be:	4b0b      	ldr	r3, [pc, #44]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ca:	d007      	beq.n	80065dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80065cc:	4b07      	ldr	r3, [pc, #28]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065d4:	4a05      	ldr	r2, [pc, #20]	@ (80065ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80065d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80065da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40007000 	.word	0x40007000
 80065f0:	20000030 	.word	0x20000030
 80065f4:	431bde83 	.word	0x431bde83

080065f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d102      	bne.n	800660c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f000 bc02 	b.w	8006e10 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800660c:	4b96      	ldr	r3, [pc, #600]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006616:	4b94      	ldr	r3, [pc, #592]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80e4 	beq.w	80067f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d007      	beq.n	8006644 <HAL_RCC_OscConfig+0x4c>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b0c      	cmp	r3, #12
 8006638:	f040 808b 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b01      	cmp	r3, #1
 8006640:	f040 8087 	bne.w	8006752 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006644:	4b88      	ldr	r3, [pc, #544]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0302 	and.w	r3, r3, #2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d005      	beq.n	800665c <HAL_RCC_OscConfig+0x64>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e3d9      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	4b81      	ldr	r3, [pc, #516]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d004      	beq.n	8006676 <HAL_RCC_OscConfig+0x7e>
 800666c:	4b7e      	ldr	r3, [pc, #504]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006674:	e005      	b.n	8006682 <HAL_RCC_OscConfig+0x8a>
 8006676:	4b7c      	ldr	r3, [pc, #496]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006678:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800667c:	091b      	lsrs	r3, r3, #4
 800667e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006682:	4293      	cmp	r3, r2
 8006684:	d223      	bcs.n	80066ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fd8c 	bl	80071a8 <RCC_SetFlashLatencyFromMSIRange>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e3ba      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800669a:	4b73      	ldr	r3, [pc, #460]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a72      	ldr	r2, [pc, #456]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	6013      	str	r3, [r2, #0]
 80066a6:	4b70      	ldr	r3, [pc, #448]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	496d      	ldr	r1, [pc, #436]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	4968      	ldr	r1, [pc, #416]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	e025      	b.n	800671a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066ce:	4b66      	ldr	r3, [pc, #408]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a65      	ldr	r2, [pc, #404]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066d4:	f043 0308 	orr.w	r3, r3, #8
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b63      	ldr	r3, [pc, #396]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4960      	ldr	r1, [pc, #384]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69db      	ldr	r3, [r3, #28]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	495b      	ldr	r1, [pc, #364]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fd4c 	bl	80071a8 <RCC_SetFlashLatencyFromMSIRange>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e37a      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671a:	f000 fc81 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 800671e:	4602      	mov	r2, r0
 8006720:	4b51      	ldr	r3, [pc, #324]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	091b      	lsrs	r3, r3, #4
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	4950      	ldr	r1, [pc, #320]	@ (800686c <HAL_RCC_OscConfig+0x274>)
 800672c:	5ccb      	ldrb	r3, [r1, r3]
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	fa22 f303 	lsr.w	r3, r2, r3
 8006736:	4a4e      	ldr	r2, [pc, #312]	@ (8006870 <HAL_RCC_OscConfig+0x278>)
 8006738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800673a:	4b4e      	ldr	r3, [pc, #312]	@ (8006874 <HAL_RCC_OscConfig+0x27c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fd fbb8 	bl	8003eb4 <HAL_InitTick>
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d052      	beq.n	80067f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	e35e      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d032      	beq.n	80067c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800675a:	4b43      	ldr	r3, [pc, #268]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a42      	ldr	r2, [pc, #264]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006760:	f043 0301 	orr.w	r3, r3, #1
 8006764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006766:	f7fd fbf5 	bl	8003f54 <HAL_GetTick>
 800676a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800676c:	e008      	b.n	8006780 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800676e:	f7fd fbf1 	bl	8003f54 <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	2b02      	cmp	r3, #2
 800677a:	d901      	bls.n	8006780 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	e347      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006780:	4b39      	ldr	r3, [pc, #228]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0f0      	beq.n	800676e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800678c:	4b36      	ldr	r3, [pc, #216]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a35      	ldr	r2, [pc, #212]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006792:	f043 0308 	orr.w	r3, r3, #8
 8006796:	6013      	str	r3, [r2, #0]
 8006798:	4b33      	ldr	r3, [pc, #204]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	4930      	ldr	r1, [pc, #192]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	021b      	lsls	r3, r3, #8
 80067b8:	492b      	ldr	r1, [pc, #172]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	604b      	str	r3, [r1, #4]
 80067be:	e01a      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80067c0:	4b29      	ldr	r3, [pc, #164]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a28      	ldr	r2, [pc, #160]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067cc:	f7fd fbc2 	bl	8003f54 <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067d4:	f7fd fbbe 	bl	8003f54 <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e314      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x1dc>
 80067f2:	e000      	b.n	80067f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d073      	beq.n	80068ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b08      	cmp	r3, #8
 8006806:	d005      	beq.n	8006814 <HAL_RCC_OscConfig+0x21c>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d10e      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d10b      	bne.n	800682c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d063      	beq.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d15f      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e2f1      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006834:	d106      	bne.n	8006844 <HAL_RCC_OscConfig+0x24c>
 8006836:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a0b      	ldr	r2, [pc, #44]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800683c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	e025      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800684c:	d114      	bne.n	8006878 <HAL_RCC_OscConfig+0x280>
 800684e:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a05      	ldr	r2, [pc, #20]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	4b03      	ldr	r3, [pc, #12]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a02      	ldr	r2, [pc, #8]	@ (8006868 <HAL_RCC_OscConfig+0x270>)
 8006860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e013      	b.n	8006890 <HAL_RCC_OscConfig+0x298>
 8006868:	40021000 	.word	0x40021000
 800686c:	0800e9f0 	.word	0x0800e9f0
 8006870:	20000030 	.word	0x20000030
 8006874:	20000034 	.word	0x20000034
 8006878:	4ba0      	ldr	r3, [pc, #640]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a9f      	ldr	r2, [pc, #636]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 800687e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b9d      	ldr	r3, [pc, #628]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a9c      	ldr	r2, [pc, #624]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 800688a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800688e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006898:	f7fd fb5c 	bl	8003f54 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fd fb58 	bl	8003f54 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	@ 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e2ae      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068b2:	4b92      	ldr	r3, [pc, #584]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0x2a8>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fd fb48 	bl	8003f54 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fd fb44 	bl	8003f54 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	@ 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e29a      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80068da:	4b88      	ldr	r3, [pc, #544]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x2d0>
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d060      	beq.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_OscConfig+0x310>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b0c      	cmp	r3, #12
 8006900:	d119      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d116      	bne.n	8006936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006908:	4b7c      	ldr	r3, [pc, #496]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_OscConfig+0x328>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e277      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006920:	4b76      	ldr	r3, [pc, #472]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	061b      	lsls	r3, r3, #24
 800692e:	4973      	ldr	r1, [pc, #460]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006934:	e040      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d023      	beq.n	8006986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800693e:	4b6f      	ldr	r3, [pc, #444]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a6e      	ldr	r2, [pc, #440]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fd fb03 	bl	8003f54 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006952:	f7fd faff 	bl	8003f54 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e255      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b65      	ldr	r3, [pc, #404]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	4b62      	ldr	r3, [pc, #392]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	495f      	ldr	r1, [pc, #380]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
 8006984:	e018      	b.n	80069b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006986:	4b5d      	ldr	r3, [pc, #372]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a5c      	ldr	r2, [pc, #368]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 800698c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006992:	f7fd fadf 	bl	8003f54 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800699a:	f7fd fadb 	bl	8003f54 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e231      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80069ac:	4b53      	ldr	r3, [pc, #332]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1f0      	bne.n	800699a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03c      	beq.n	8006a3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01c      	beq.n	8006a06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069cc:	4b4b      	ldr	r3, [pc, #300]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d2:	4a4a      	ldr	r2, [pc, #296]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80069d4:	f043 0301 	orr.w	r3, r3, #1
 80069d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069dc:	f7fd faba 	bl	8003f54 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fd fab6 	bl	8003f54 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e20c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069f6:	4b41      	ldr	r3, [pc, #260]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 80069f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0ef      	beq.n	80069e4 <HAL_RCC_OscConfig+0x3ec>
 8006a04:	e01b      	b.n	8006a3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a06:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a0e:	f023 0301 	bic.w	r3, r3, #1
 8006a12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a16:	f7fd fa9d 	bl	8003f54 <HAL_GetTick>
 8006a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1e:	f7fd fa99 	bl	8003f54 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e1ef      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a30:	4b32      	ldr	r3, [pc, #200]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1ef      	bne.n	8006a1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80a6 	beq.w	8006b98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006a50:	4b2a      	ldr	r3, [pc, #168]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10d      	bne.n	8006a78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5c:	4b27      	ldr	r3, [pc, #156]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a60:	4a26      	ldr	r2, [pc, #152]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a68:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	60bb      	str	r3, [r7, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a74:	2301      	movs	r3, #1
 8006a76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a78:	4b21      	ldr	r3, [pc, #132]	@ (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d118      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a84:	4b1e      	ldr	r3, [pc, #120]	@ (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1d      	ldr	r2, [pc, #116]	@ (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006a8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a90:	f7fd fa60 	bl	8003f54 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a98:	f7fd fa5c 	bl	8003f54 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1b2      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aaa:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <HAL_RCC_OscConfig+0x508>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d108      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4d8>
 8006abe:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ace:	e029      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d115      	bne.n	8006b04 <HAL_RCC_OscConfig+0x50c>
 8006ad8:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ade:	4a07      	ldr	r2, [pc, #28]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006ae0:	f043 0304 	orr.w	r3, r3, #4
 8006ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ae8:	4b04      	ldr	r3, [pc, #16]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aee:	4a03      	ldr	r2, [pc, #12]	@ (8006afc <HAL_RCC_OscConfig+0x504>)
 8006af0:	f043 0301 	orr.w	r3, r3, #1
 8006af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006af8:	e014      	b.n	8006b24 <HAL_RCC_OscConfig+0x52c>
 8006afa:	bf00      	nop
 8006afc:	40021000 	.word	0x40021000
 8006b00:	40007000 	.word	0x40007000
 8006b04:	4b9a      	ldr	r3, [pc, #616]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b0a:	4a99      	ldr	r2, [pc, #612]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006b14:	4b96      	ldr	r3, [pc, #600]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b1a:	4a95      	ldr	r2, [pc, #596]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d016      	beq.n	8006b5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fa12 	bl	8003f54 <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b32:	e00a      	b.n	8006b4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b34:	f7fd fa0e 	bl	8003f54 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e162      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b4a:	4b89      	ldr	r3, [pc, #548]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0ed      	beq.n	8006b34 <HAL_RCC_OscConfig+0x53c>
 8006b58:	e015      	b.n	8006b86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b5a:	f7fd f9fb 	bl	8003f54 <HAL_GetTick>
 8006b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b60:	e00a      	b.n	8006b78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b62:	f7fd f9f7 	bl	8003f54 <HAL_GetTick>
 8006b66:	4602      	mov	r2, r0
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e14b      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b78:	4b7d      	ldr	r3, [pc, #500]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ed      	bne.n	8006b62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b86:	7ffb      	ldrb	r3, [r7, #31]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d105      	bne.n	8006b98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b8c:	4b78      	ldr	r3, [pc, #480]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b90:	4a77      	ldr	r2, [pc, #476]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b96:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03c      	beq.n	8006c1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01c      	beq.n	8006be6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006bac:	4b70      	ldr	r3, [pc, #448]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bbc:	f7fd f9ca 	bl	8003f54 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bc4:	f7fd f9c6 	bl	8003f54 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e11c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bd6:	4b66      	ldr	r3, [pc, #408]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0ef      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x5cc>
 8006be4:	e01b      	b.n	8006c1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006be6:	4b62      	ldr	r3, [pc, #392]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bec:	4a60      	ldr	r2, [pc, #384]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf6:	f7fd f9ad 	bl	8003f54 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bfe:	f7fd f9a9 	bl	8003f54 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0ff      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c10:	4b57      	ldr	r3, [pc, #348]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1ef      	bne.n	8006bfe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 80f3 	beq.w	8006e0e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	f040 80c9 	bne.w	8006dc4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006c32:	4b4f      	ldr	r3, [pc, #316]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0203 	and.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d12c      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	3b01      	subs	r3, #1
 8006c52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d123      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d11b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d113      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	3b01      	subs	r3, #1
 8006c86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d109      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d06b      	beq.n	8006d78 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d062      	beq.n	8006d6c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ca6:	4b32      	ldr	r3, [pc, #200]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0ac      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a2d      	ldr	r2, [pc, #180]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cc0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006cc2:	f7fd f947 	bl	8003f54 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cca:	f7fd f943 	bl	8003f54 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e099      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cdc:	4b24      	ldr	r3, [pc, #144]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1f0      	bne.n	8006cca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ce8:	4b21      	ldr	r3, [pc, #132]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	4b21      	ldr	r3, [pc, #132]	@ (8006d74 <HAL_RCC_OscConfig+0x77c>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006cf8:	3a01      	subs	r2, #1
 8006cfa:	0112      	lsls	r2, r2, #4
 8006cfc:	4311      	orrs	r1, r2
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d02:	0212      	lsls	r2, r2, #8
 8006d04:	4311      	orrs	r1, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d0a:	0852      	lsrs	r2, r2, #1
 8006d0c:	3a01      	subs	r2, #1
 8006d0e:	0552      	lsls	r2, r2, #21
 8006d10:	4311      	orrs	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006d16:	0852      	lsrs	r2, r2, #1
 8006d18:	3a01      	subs	r2, #1
 8006d1a:	0652      	lsls	r2, r2, #25
 8006d1c:	4311      	orrs	r1, r2
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d22:	06d2      	lsls	r2, r2, #27
 8006d24:	430a      	orrs	r2, r1
 8006d26:	4912      	ldr	r1, [pc, #72]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006d2c:	4b10      	ldr	r3, [pc, #64]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a0f      	ldr	r2, [pc, #60]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d38:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006d44:	f7fd f906 	bl	8003f54 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4c:	f7fd f902 	bl	8003f54 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e058      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <HAL_RCC_OscConfig+0x778>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d6a:	e050      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e04f      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
 8006d70:	40021000 	.word	0x40021000
 8006d74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d78:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d144      	bne.n	8006e0e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006d84:	4b24      	ldr	r3, [pc, #144]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a23      	ldr	r2, [pc, #140]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d90:	4b21      	ldr	r3, [pc, #132]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4a20      	ldr	r2, [pc, #128]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006d9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006d9c:	f7fd f8da 	bl	8003f54 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006da4:	f7fd f8d6 	bl	8003f54 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e02c      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db6:	4b18      	ldr	r3, [pc, #96]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x7ac>
 8006dc2:	e024      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d01f      	beq.n	8006e0a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dca:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a12      	ldr	r2, [pc, #72]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd6:	f7fd f8bd 	bl	8003f54 <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ddc:	e008      	b.n	8006df0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dde:	f7fd f8b9 	bl	8003f54 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e00f      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006df0:	4b09      	ldr	r3, [pc, #36]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f0      	bne.n	8006dde <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006dfc:	4b06      	ldr	r3, [pc, #24]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	4905      	ldr	r1, [pc, #20]	@ (8006e18 <HAL_RCC_OscConfig+0x820>)
 8006e02:	4b06      	ldr	r3, [pc, #24]	@ (8006e1c <HAL_RCC_OscConfig+0x824>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	60cb      	str	r3, [r1, #12]
 8006e08:	e001      	b.n	8006e0e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	feeefffc 	.word	0xfeeefffc

08006e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e0e7      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e34:	4b75      	ldr	r3, [pc, #468]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d910      	bls.n	8006e64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e42:	4b72      	ldr	r3, [pc, #456]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f023 0207 	bic.w	r2, r3, #7
 8006e4a:	4970      	ldr	r1, [pc, #448]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e52:	4b6e      	ldr	r3, [pc, #440]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0cf      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	4b66      	ldr	r3, [pc, #408]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d908      	bls.n	8006e92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e80:	4b63      	ldr	r3, [pc, #396]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4960      	ldr	r1, [pc, #384]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d04c      	beq.n	8006f38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ea6:	4b5a      	ldr	r3, [pc, #360]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d121      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e0a6      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d107      	bne.n	8006ece <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ebe:	4b54      	ldr	r3, [pc, #336]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d115      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e09a      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e08e      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e086      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ef6:	4b46      	ldr	r3, [pc, #280]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f023 0203 	bic.w	r2, r3, #3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	4943      	ldr	r1, [pc, #268]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f08:	f7fd f824 	bl	8003f54 <HAL_GetTick>
 8006f0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f0e:	e00a      	b.n	8006f26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f10:	f7fd f820 	bl	8003f54 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e06e      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f26:	4b3a      	ldr	r3, [pc, #232]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 020c 	and.w	r2, r3, #12
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d1eb      	bne.n	8006f10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d010      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689a      	ldr	r2, [r3, #8]
 8006f48:	4b31      	ldr	r3, [pc, #196]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d208      	bcs.n	8006f66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f54:	4b2e      	ldr	r3, [pc, #184]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	492b      	ldr	r1, [pc, #172]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f66:	4b29      	ldr	r3, [pc, #164]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0307 	and.w	r3, r3, #7
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d210      	bcs.n	8006f96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f74:	4b25      	ldr	r3, [pc, #148]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 0207 	bic.w	r2, r3, #7
 8006f7c:	4923      	ldr	r1, [pc, #140]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f84:	4b21      	ldr	r3, [pc, #132]	@ (800700c <HAL_RCC_ClockConfig+0x1ec>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d001      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e036      	b.n	8007004 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d008      	beq.n	8006fb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	4918      	ldr	r1, [pc, #96]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc0:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	4910      	ldr	r1, [pc, #64]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fd4:	f000 f824 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b0d      	ldr	r3, [pc, #52]	@ (8007010 <HAL_RCC_ClockConfig+0x1f0>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	091b      	lsrs	r3, r3, #4
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	490b      	ldr	r1, [pc, #44]	@ (8007014 <HAL_RCC_ClockConfig+0x1f4>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff0:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <HAL_RCC_ClockConfig+0x1f8>)
 8006ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ff4:	4b09      	ldr	r3, [pc, #36]	@ (800701c <HAL_RCC_ClockConfig+0x1fc>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fc ff5b 	bl	8003eb4 <HAL_InitTick>
 8006ffe:	4603      	mov	r3, r0
 8007000:	72fb      	strb	r3, [r7, #11]

  return status;
 8007002:	7afb      	ldrb	r3, [r7, #11]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	40022000 	.word	0x40022000
 8007010:	40021000 	.word	0x40021000
 8007014:	0800e9f0 	.word	0x0800e9f0
 8007018:	20000030 	.word	0x20000030
 800701c:	20000034 	.word	0x20000034

08007020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	@ 0x24
 8007024:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800702e:	4b3e      	ldr	r3, [pc, #248]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 030c 	and.w	r3, r3, #12
 8007036:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007038:	4b3b      	ldr	r3, [pc, #236]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	f003 0303 	and.w	r3, r3, #3
 8007040:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_GetSysClockFreq+0x34>
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	2b0c      	cmp	r3, #12
 800704c:	d121      	bne.n	8007092 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d11e      	bne.n	8007092 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007054:	4b34      	ldr	r3, [pc, #208]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d107      	bne.n	8007070 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007060:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	e005      	b.n	800707c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007070:	4b2d      	ldr	r3, [pc, #180]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 030f 	and.w	r3, r3, #15
 800707a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800707c:	4a2b      	ldr	r2, [pc, #172]	@ (800712c <HAL_RCC_GetSysClockFreq+0x10c>)
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007084:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007090:	e00a      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	2b04      	cmp	r3, #4
 8007096:	d102      	bne.n	800709e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007098:	4b25      	ldr	r3, [pc, #148]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x110>)
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e004      	b.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80070a4:	4b23      	ldr	r3, [pc, #140]	@ (8007134 <HAL_RCC_GetSysClockFreq+0x114>)
 80070a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d134      	bne.n	8007118 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d003      	beq.n	80070c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d003      	beq.n	80070cc <HAL_RCC_GetSysClockFreq+0xac>
 80070c4:	e005      	b.n	80070d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80070c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007130 <HAL_RCC_GetSysClockFreq+0x110>)
 80070c8:	617b      	str	r3, [r7, #20]
      break;
 80070ca:	e005      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80070cc:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <HAL_RCC_GetSysClockFreq+0x114>)
 80070ce:	617b      	str	r3, [r7, #20]
      break;
 80070d0:	e002      	b.n	80070d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	617b      	str	r3, [r7, #20]
      break;
 80070d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070d8:	4b13      	ldr	r3, [pc, #76]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 0307 	and.w	r3, r3, #7
 80070e2:	3301      	adds	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	0a1b      	lsrs	r3, r3, #8
 80070ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	fb03 f202 	mul.w	r2, r3, r2
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <HAL_RCC_GetSysClockFreq+0x108>)
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	0e5b      	lsrs	r3, r3, #25
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	3301      	adds	r3, #1
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007118:	69bb      	ldr	r3, [r7, #24]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3724      	adds	r7, #36	@ 0x24
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40021000 	.word	0x40021000
 800712c:	0800ea08 	.word	0x0800ea08
 8007130:	00f42400 	.word	0x00f42400
 8007134:	007a1200 	.word	0x007a1200

08007138 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800713c:	4b03      	ldr	r3, [pc, #12]	@ (800714c <HAL_RCC_GetHCLKFreq+0x14>)
 800713e:	681b      	ldr	r3, [r3, #0]
}
 8007140:	4618      	mov	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	20000030 	.word	0x20000030

08007150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007154:	f7ff fff0 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007158:	4602      	mov	r2, r0
 800715a:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <HAL_RCC_GetPCLK1Freq+0x24>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	0a1b      	lsrs	r3, r3, #8
 8007160:	f003 0307 	and.w	r3, r3, #7
 8007164:	4904      	ldr	r1, [pc, #16]	@ (8007178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007166:	5ccb      	ldrb	r3, [r1, r3]
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007170:	4618      	mov	r0, r3
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40021000 	.word	0x40021000
 8007178:	0800ea00 	.word	0x0800ea00

0800717c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007180:	f7ff ffda 	bl	8007138 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b06      	ldr	r3, [pc, #24]	@ (80071a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0adb      	lsrs	r3, r3, #11
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4904      	ldr	r1, [pc, #16]	@ (80071a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40021000 	.word	0x40021000
 80071a4:	0800ea00 	.word	0x0800ea00

080071a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80071b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d003      	beq.n	80071c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80071c0:	f7ff f9b6 	bl	8006530 <HAL_PWREx_GetVoltageRange>
 80071c4:	6178      	str	r0, [r7, #20]
 80071c6:	e014      	b.n	80071f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80071c8:	4b25      	ldr	r3, [pc, #148]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071cc:	4a24      	ldr	r2, [pc, #144]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d4:	4b22      	ldr	r3, [pc, #136]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80071e0:	f7ff f9a6 	bl	8006530 <HAL_PWREx_GetVoltageRange>
 80071e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80071e6:	4b1e      	ldr	r3, [pc, #120]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ea:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80071ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071f8:	d10b      	bne.n	8007212 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b80      	cmp	r3, #128	@ 0x80
 80071fe:	d919      	bls.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2ba0      	cmp	r3, #160	@ 0xa0
 8007204:	d902      	bls.n	800720c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007206:	2302      	movs	r3, #2
 8007208:	613b      	str	r3, [r7, #16]
 800720a:	e013      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800720c:	2301      	movs	r3, #1
 800720e:	613b      	str	r3, [r7, #16]
 8007210:	e010      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b80      	cmp	r3, #128	@ 0x80
 8007216:	d902      	bls.n	800721e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007218:	2303      	movs	r3, #3
 800721a:	613b      	str	r3, [r7, #16]
 800721c:	e00a      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b80      	cmp	r3, #128	@ 0x80
 8007222:	d102      	bne.n	800722a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007224:	2302      	movs	r3, #2
 8007226:	613b      	str	r3, [r7, #16]
 8007228:	e004      	b.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b70      	cmp	r3, #112	@ 0x70
 800722e:	d101      	bne.n	8007234 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007230:	2301      	movs	r3, #1
 8007232:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007234:	4b0b      	ldr	r3, [pc, #44]	@ (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f023 0207 	bic.w	r2, r3, #7
 800723c:	4909      	ldr	r1, [pc, #36]	@ (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007244:	4b07      	ldr	r3, [pc, #28]	@ (8007264 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d001      	beq.n	8007256 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	4618      	mov	r0, r3
 800725a:	3718      	adds	r7, #24
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40021000 	.word	0x40021000
 8007264:	40022000 	.word	0x40022000

08007268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007270:	2300      	movs	r3, #0
 8007272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007274:	2300      	movs	r3, #0
 8007276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007280:	2b00      	cmp	r3, #0
 8007282:	d031      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007288:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800728c:	d01a      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800728e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007292:	d814      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007298:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800729c:	d10f      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800729e:	4b5d      	ldr	r3, [pc, #372]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072aa:	e00c      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3304      	adds	r3, #4
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f9ce 	bl	8007654 <RCCEx_PLLSAI1_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80072bc:	e003      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	74fb      	strb	r3, [r7, #19]
      break;
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80072c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c6:	7cfb      	ldrb	r3, [r7, #19]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10b      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072cc:	4b51      	ldr	r3, [pc, #324]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072da:	494e      	ldr	r1, [pc, #312]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80072e2:	e001      	b.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 809e 	beq.w	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072f6:	2300      	movs	r3, #0
 80072f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80072fa:	4b46      	ldr	r3, [pc, #280]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80072fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007306:	2301      	movs	r3, #1
 8007308:	e000      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800730a:	2300      	movs	r3, #0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00d      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007310:	4b40      	ldr	r3, [pc, #256]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007314:	4a3f      	ldr	r2, [pc, #252]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800731a:	6593      	str	r3, [r2, #88]	@ 0x58
 800731c:	4b3d      	ldr	r3, [pc, #244]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800731e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007328:	2301      	movs	r3, #1
 800732a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800732c:	4b3a      	ldr	r3, [pc, #232]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a39      	ldr	r2, [pc, #228]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007336:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007338:	f7fc fe0c 	bl	8003f54 <HAL_GetTick>
 800733c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800733e:	e009      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007340:	f7fc fe08 	bl	8003f54 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d902      	bls.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	74fb      	strb	r3, [r7, #19]
        break;
 8007352:	e005      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007354:	4b30      	ldr	r3, [pc, #192]	@ (8007418 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0ef      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007360:	7cfb      	ldrb	r3, [r7, #19]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d15a      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007366:	4b2b      	ldr	r3, [pc, #172]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007370:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01e      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	429a      	cmp	r2, r3
 8007380:	d019      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007382:	4b24      	ldr	r3, [pc, #144]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800738c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800738e:	4b21      	ldr	r3, [pc, #132]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007394:	4a1f      	ldr	r2, [pc, #124]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800739a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800739e:	4b1d      	ldr	r3, [pc, #116]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073ae:	4a19      	ldr	r2, [pc, #100]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d016      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c0:	f7fc fdc8 	bl	8003f54 <HAL_GetTick>
 80073c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073c6:	e00b      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073c8:	f7fc fdc4 	bl	8003f54 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d902      	bls.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	74fb      	strb	r3, [r7, #19]
            break;
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0ec      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80073ee:	7cfb      	ldrb	r3, [r7, #19]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f4:	4b07      	ldr	r3, [pc, #28]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80073f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007402:	4904      	ldr	r1, [pc, #16]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007404:	4313      	orrs	r3, r2
 8007406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800740a:	e009      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	74bb      	strb	r3, [r7, #18]
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007412:	bf00      	nop
 8007414:	40021000 	.word	0x40021000
 8007418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007420:	7c7b      	ldrb	r3, [r7, #17]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d105      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007426:	4b8a      	ldr	r3, [pc, #552]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742a:	4a89      	ldr	r2, [pc, #548]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007430:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00a      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800743e:	4b84      	ldr	r3, [pc, #528]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007444:	f023 0203 	bic.w	r2, r3, #3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	4980      	ldr	r1, [pc, #512]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007460:	4b7b      	ldr	r3, [pc, #492]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007466:	f023 020c 	bic.w	r2, r3, #12
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746e:	4978      	ldr	r1, [pc, #480]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007482:	4b73      	ldr	r3, [pc, #460]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007488:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	496f      	ldr	r1, [pc, #444]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007492:	4313      	orrs	r3, r2
 8007494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00a      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074aa:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b2:	4967      	ldr	r1, [pc, #412]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074c6:	4b62      	ldr	r3, [pc, #392]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	495e      	ldr	r1, [pc, #376]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074e8:	4b59      	ldr	r3, [pc, #356]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	4956      	ldr	r1, [pc, #344]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800750a:	4b51      	ldr	r3, [pc, #324]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007518:	494d      	ldr	r1, [pc, #308]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d028      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800752c:	4b48      	ldr	r3, [pc, #288]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007532:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753a:	4945      	ldr	r1, [pc, #276]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007546:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800754a:	d106      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800754c:	4b40      	ldr	r3, [pc, #256]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4a3f      	ldr	r2, [pc, #252]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007556:	60d3      	str	r3, [r2, #12]
 8007558:	e011      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007562:	d10c      	bne.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3304      	adds	r3, #4
 8007568:	2101      	movs	r1, #1
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f872 	bl	8007654 <RCCEx_PLLSAI1_Config>
 8007570:	4603      	mov	r3, r0
 8007572:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800757a:	7cfb      	ldrb	r3, [r7, #19]
 800757c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d028      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800758a:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007590:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007598:	492d      	ldr	r1, [pc, #180]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075a8:	d106      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075aa:	4b29      	ldr	r3, [pc, #164]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4a28      	ldr	r2, [pc, #160]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075b4:	60d3      	str	r3, [r2, #12]
 80075b6:	e011      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075c0:	d10c      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3304      	adds	r3, #4
 80075c6:	2101      	movs	r1, #1
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 f843 	bl	8007654 <RCCEx_PLLSAI1_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075d2:	7cfb      	ldrb	r3, [r7, #19]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01c      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075e8:	4b19      	ldr	r3, [pc, #100]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075f6:	4916      	ldr	r1, [pc, #88]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007602:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007606:	d10c      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	2102      	movs	r1, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f000 f820 	bl	8007654 <RCCEx_PLLSAI1_Config>
 8007614:	4603      	mov	r3, r0
 8007616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007618:	7cfb      	ldrb	r3, [r7, #19]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d001      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800761e:	7cfb      	ldrb	r3, [r7, #19]
 8007620:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800762e:	4b08      	ldr	r3, [pc, #32]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007634:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800763c:	4904      	ldr	r1, [pc, #16]	@ (8007650 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007644:	7cbb      	ldrb	r3, [r7, #18]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	40021000 	.word	0x40021000

08007654 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007662:	4b74      	ldr	r3, [pc, #464]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800766e:	4b71      	ldr	r3, [pc, #452]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f003 0203 	and.w	r2, r3, #3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d10d      	bne.n	800769a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
       ||
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007686:	4b6b      	ldr	r3, [pc, #428]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	091b      	lsrs	r3, r3, #4
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
       ||
 8007696:	429a      	cmp	r2, r3
 8007698:	d047      	beq.n	800772a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	73fb      	strb	r3, [r7, #15]
 800769e:	e044      	b.n	800772a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d018      	beq.n	80076da <RCCEx_PLLSAI1_Config+0x86>
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d825      	bhi.n	80076f8 <RCCEx_PLLSAI1_Config+0xa4>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d002      	beq.n	80076b6 <RCCEx_PLLSAI1_Config+0x62>
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d009      	beq.n	80076c8 <RCCEx_PLLSAI1_Config+0x74>
 80076b4:	e020      	b.n	80076f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d11d      	bne.n	80076fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076c6:	e01a      	b.n	80076fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076c8:	4b5a      	ldr	r3, [pc, #360]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d116      	bne.n	8007702 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076d8:	e013      	b.n	8007702 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80076da:	4b56      	ldr	r3, [pc, #344]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10f      	bne.n	8007706 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80076e6:	4b53      	ldr	r3, [pc, #332]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076f6:	e006      	b.n	8007706 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	73fb      	strb	r3, [r7, #15]
      break;
 80076fc:	e004      	b.n	8007708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007706:	bf00      	nop
    }

    if(status == HAL_OK)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10d      	bne.n	800772a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800770e:	4b49      	ldr	r3, [pc, #292]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	3b01      	subs	r3, #1
 8007720:	011b      	lsls	r3, r3, #4
 8007722:	430b      	orrs	r3, r1
 8007724:	4943      	ldr	r1, [pc, #268]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007726:	4313      	orrs	r3, r2
 8007728:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d17c      	bne.n	800782a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007730:	4b40      	ldr	r3, [pc, #256]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007736:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800773a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773c:	f7fc fc0a 	bl	8003f54 <HAL_GetTick>
 8007740:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007742:	e009      	b.n	8007758 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007744:	f7fc fc06 	bl	8003f54 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d902      	bls.n	8007758 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	73fb      	strb	r3, [r7, #15]
        break;
 8007756:	e005      	b.n	8007764 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007758:	4b36      	ldr	r3, [pc, #216]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1ef      	bne.n	8007744 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d15f      	bne.n	800782a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d110      	bne.n	8007792 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007770:	4b30      	ldr	r3, [pc, #192]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8007778:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6892      	ldr	r2, [r2, #8]
 8007780:	0211      	lsls	r1, r2, #8
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68d2      	ldr	r2, [r2, #12]
 8007786:	06d2      	lsls	r2, r2, #27
 8007788:	430a      	orrs	r2, r1
 800778a:	492a      	ldr	r1, [pc, #168]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	610b      	str	r3, [r1, #16]
 8007790:	e027      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d112      	bne.n	80077be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007798:	4b26      	ldr	r3, [pc, #152]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80077a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6892      	ldr	r2, [r2, #8]
 80077a8:	0211      	lsls	r1, r2, #8
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6912      	ldr	r2, [r2, #16]
 80077ae:	0852      	lsrs	r2, r2, #1
 80077b0:	3a01      	subs	r2, #1
 80077b2:	0552      	lsls	r2, r2, #21
 80077b4:	430a      	orrs	r2, r1
 80077b6:	491f      	ldr	r1, [pc, #124]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]
 80077bc:	e011      	b.n	80077e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077be:	4b1d      	ldr	r3, [pc, #116]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80077c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6892      	ldr	r2, [r2, #8]
 80077ce:	0211      	lsls	r1, r2, #8
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6952      	ldr	r2, [r2, #20]
 80077d4:	0852      	lsrs	r2, r2, #1
 80077d6:	3a01      	subs	r2, #1
 80077d8:	0652      	lsls	r2, r2, #25
 80077da:	430a      	orrs	r2, r1
 80077dc:	4915      	ldr	r1, [pc, #84]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80077e2:	4b14      	ldr	r3, [pc, #80]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a13      	ldr	r2, [pc, #76]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 80077e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ee:	f7fc fbb1 	bl	8003f54 <HAL_GetTick>
 80077f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80077f4:	e009      	b.n	800780a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80077f6:	f7fc fbad 	bl	8003f54 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d902      	bls.n	800780a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	73fb      	strb	r3, [r7, #15]
          break;
 8007808:	e005      	b.n	8007816 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800780a:	4b0a      	ldr	r3, [pc, #40]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0ef      	beq.n	80077f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d106      	bne.n	800782a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	699b      	ldr	r3, [r3, #24]
 8007824:	4903      	ldr	r1, [pc, #12]	@ (8007834 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007826:	4313      	orrs	r3, r2
 8007828:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800782a:	7bfb      	ldrb	r3, [r7, #15]
}
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	40021000 	.word	0x40021000

08007838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e095      	b.n	8007976 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d108      	bne.n	8007864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800785a:	d009      	beq.n	8007870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	61da      	str	r2, [r3, #28]
 8007862:	e005      	b.n	8007870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fc f88c 	bl	80039a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078b0:	d902      	bls.n	80078b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
 80078b6:	e002      	b.n	80078be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80078b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80078c6:	d007      	beq.n	80078d8 <HAL_SPI_Init+0xa0>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80078d0:	d002      	beq.n	80078d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	431a      	orrs	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007910:	431a      	orrs	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791a:	ea42 0103 	orr.w	r1, r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	0c1b      	lsrs	r3, r3, #16
 8007934:	f003 0204 	and.w	r2, r3, #4
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007954:	ea42 0103 	orr.w	r1, r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b088      	sub	sp, #32
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	603b      	str	r3, [r7, #0]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800798e:	f7fc fae1 	bl	8003f54 <HAL_GetTick>
 8007992:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d001      	beq.n	80079a8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80079a4:	2302      	movs	r3, #2
 80079a6:	e15c      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_SPI_Transmit+0x36>
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e154      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_SPI_Transmit+0x48>
 80079c2:	2302      	movs	r3, #2
 80079c4:	e14d      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	88fa      	ldrh	r2, [r7, #6]
 80079e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a18:	d10f      	bne.n	8007a3a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a44:	2b40      	cmp	r3, #64	@ 0x40
 8007a46:	d007      	beq.n	8007a58 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a60:	d952      	bls.n	8007b08 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d002      	beq.n	8007a70 <HAL_SPI_Transmit+0xf2>
 8007a6a:	8b7b      	ldrh	r3, [r7, #26]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d145      	bne.n	8007afc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a74:	881a      	ldrh	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a94:	e032      	b.n	8007afc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d112      	bne.n	8007aca <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	881a      	ldrh	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	1c9a      	adds	r2, r3, #2
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ac8:	e018      	b.n	8007afc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aca:	f7fc fa43 	bl	8003f54 <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d803      	bhi.n	8007ae2 <HAL_SPI_Transmit+0x164>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d102      	bne.n	8007ae8 <HAL_SPI_Transmit+0x16a>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d109      	bne.n	8007afc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0b2      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1c7      	bne.n	8007a96 <HAL_SPI_Transmit+0x118>
 8007b06:	e083      	b.n	8007c10 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <HAL_SPI_Transmit+0x198>
 8007b10:	8b7b      	ldrh	r3, [r7, #26]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d177      	bne.n	8007c06 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d912      	bls.n	8007b46 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	1c9a      	adds	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b02      	subs	r3, #2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b44:	e05f      	b.n	8007c06 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b6c:	e04b      	b.n	8007c06 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d12b      	bne.n	8007bd4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d912      	bls.n	8007bac <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	881a      	ldrh	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b96:	1c9a      	adds	r2, r3, #2
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b02      	subs	r3, #2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007baa:	e02c      	b.n	8007c06 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bbe:	1c5a      	adds	r2, r3, #1
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bd2:	e018      	b.n	8007c06 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd4:	f7fc f9be 	bl	8003f54 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d803      	bhi.n	8007bec <HAL_SPI_Transmit+0x26e>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d102      	bne.n	8007bf2 <HAL_SPI_Transmit+0x274>
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e02d      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1ae      	bne.n	8007b6e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fb65 	bl	80082e4 <SPI_EndRxTxTransaction>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2220      	movs	r2, #32
 8007c24:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	617b      	str	r3, [r7, #20]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8007c60:	2300      	movs	r3, #0
  }
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b08a      	sub	sp, #40	@ 0x28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c7c:	f7fc f96a 	bl	8003f54 <HAL_GetTick>
 8007c80:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007c88:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007c90:	887b      	ldrh	r3, [r7, #2]
 8007c92:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8007c94:	887b      	ldrh	r3, [r7, #2]
 8007c96:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c98:	7ffb      	ldrb	r3, [r7, #31]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d00c      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0x4e>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ca4:	d106      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <HAL_SPI_TransmitReceive+0x4a>
 8007cae:	7ffb      	ldrb	r3, [r7, #31]
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d001      	beq.n	8007cb8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e1f3      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x60>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d002      	beq.n	8007cca <HAL_SPI_TransmitReceive+0x60>
 8007cc4:	887b      	ldrh	r3, [r7, #2]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e1e8      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x72>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e1e1      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d003      	beq.n	8007cf8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	887a      	ldrh	r2, [r7, #2]
 8007d08:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	887a      	ldrh	r2, [r7, #2]
 8007d10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68ba      	ldr	r2, [r7, #8]
 8007d18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	887a      	ldrh	r2, [r7, #2]
 8007d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	887a      	ldrh	r2, [r7, #2]
 8007d24:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d3a:	d802      	bhi.n	8007d42 <HAL_SPI_TransmitReceive+0xd8>
 8007d3c:	8abb      	ldrh	r3, [r7, #20]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d908      	bls.n	8007d54 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007d50:	605a      	str	r2, [r3, #4]
 8007d52:	e007      	b.n	8007d64 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d62:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d6e:	2b40      	cmp	r3, #64	@ 0x40
 8007d70:	d007      	beq.n	8007d82 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007d8a:	f240 8083 	bls.w	8007e94 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_SPI_TransmitReceive+0x132>
 8007d96:	8afb      	ldrh	r3, [r7, #22]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d16f      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007da0:	881a      	ldrh	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	1c9a      	adds	r2, r3, #2
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc0:	e05c      	b.n	8007e7c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d11b      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x19e>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d016      	beq.n	8007e08 <HAL_SPI_TransmitReceive+0x19e>
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d113      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	881a      	ldrh	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	1c9a      	adds	r2, r3, #2
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	b29a      	uxth	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d11c      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x1e6>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d016      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2c:	b292      	uxth	r2, r2
 8007e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e50:	f7fc f880 	bl	8003f54 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d80d      	bhi.n	8007e7c <HAL_SPI_TransmitReceive+0x212>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d009      	beq.n	8007e7c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e111      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d19d      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x158>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d197      	bne.n	8007dc2 <HAL_SPI_TransmitReceive+0x158>
 8007e92:	e0e5      	b.n	8008060 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_SPI_TransmitReceive+0x23a>
 8007e9c:	8afb      	ldrh	r3, [r7, #22]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	f040 80d1 	bne.w	8008046 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d912      	bls.n	8007ed4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb2:	881a      	ldrh	r2, [r3, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	1c9a      	adds	r2, r3, #2
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b02      	subs	r3, #2
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007ed2:	e0b8      	b.n	8008046 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	7812      	ldrb	r2, [r2, #0]
 8007ee0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007efa:	e0a4      	b.n	8008046 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d134      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x30a>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02f      	beq.n	8007f74 <HAL_SPI_TransmitReceive+0x30a>
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d12c      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d912      	bls.n	8007f4a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f28:	881a      	ldrh	r2, [r3, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f34:	1c9a      	adds	r2, r3, #2
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b02      	subs	r3, #2
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007f48:	e012      	b.n	8007f70 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	330c      	adds	r3, #12
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5c:	1c5a      	adds	r2, r3, #1
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d148      	bne.n	8008014 <HAL_SPI_TransmitReceive+0x3aa>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d042      	beq.n	8008014 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d923      	bls.n	8007fe2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa4:	b292      	uxth	r2, r2
 8007fa6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fac:	1c9a      	adds	r2, r3, #2
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b02      	subs	r3, #2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d81f      	bhi.n	8008010 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685a      	ldr	r2, [r3, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007fde:	605a      	str	r2, [r3, #4]
 8007fe0:	e016      	b.n	8008010 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f103 020c 	add.w	r2, r3, #12
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	7812      	ldrb	r2, [r2, #0]
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008010:	2301      	movs	r3, #1
 8008012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008014:	f7fb ff9e 	bl	8003f54 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008020:	429a      	cmp	r2, r3
 8008022:	d803      	bhi.n	800802c <HAL_SPI_TransmitReceive+0x3c2>
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d102      	bne.n	8008032 <HAL_SPI_TransmitReceive+0x3c8>
 800802c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e02c      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800804a:	b29b      	uxth	r3, r3
 800804c:	2b00      	cmp	r3, #0
 800804e:	f47f af55 	bne.w	8007efc <HAL_SPI_TransmitReceive+0x292>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	f47f af4e 	bne.w	8007efc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008060:	6a3a      	ldr	r2, [r7, #32]
 8008062:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008064:	68f8      	ldr	r0, [r7, #12]
 8008066:	f000 f93d 	bl	80082e4 <SPI_EndRxTxTransaction>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d008      	beq.n	8008082 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e00e      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800809e:	2300      	movs	r3, #0
  }
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	@ 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	4613      	mov	r3, r2
 80080b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80080b8:	f7fb ff4c 	bl	8003f54 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	4413      	add	r3, r2
 80080c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80080c8:	f7fb ff44 	bl	8003f54 <HAL_GetTick>
 80080cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80080ce:	4b39      	ldr	r3, [pc, #228]	@ (80081b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	015b      	lsls	r3, r3, #5
 80080d4:	0d1b      	lsrs	r3, r3, #20
 80080d6:	69fa      	ldr	r2, [r7, #28]
 80080d8:	fb02 f303 	mul.w	r3, r2, r3
 80080dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080de:	e054      	b.n	800818a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d050      	beq.n	800818a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80080e8:	f7fb ff34 	bl	8003f54 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d902      	bls.n	80080fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d13d      	bne.n	800817a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800810c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008116:	d111      	bne.n	800813c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008120:	d004      	beq.n	800812c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800812a:	d107      	bne.n	800813c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800813a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008144:	d10f      	bne.n	8008166 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e017      	b.n	80081aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d101      	bne.n	8008184 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	3b01      	subs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	4013      	ands	r3, r2
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	bf0c      	ite	eq
 800819a:	2301      	moveq	r3, #1
 800819c:	2300      	movne	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	461a      	mov	r2, r3
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d19b      	bne.n	80080e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3720      	adds	r7, #32
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000030 	.word	0x20000030

080081b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	@ 0x28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80081ca:	f7fb fec3 	bl	8003f54 <HAL_GetTick>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	4413      	add	r3, r2
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80081da:	f7fb febb 	bl	8003f54 <HAL_GetTick>
 80081de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80081e8:	4b3d      	ldr	r3, [pc, #244]	@ (80082e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	00da      	lsls	r2, r3, #3
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	0d1b      	lsrs	r3, r3, #20
 80081f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008200:	e060      	b.n	80082c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008208:	d107      	bne.n	800821a <SPI_WaitFifoStateUntilTimeout+0x62>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
 8008216:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008218:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d050      	beq.n	80082c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008222:	f7fb fe97 	bl	8003f54 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800822e:	429a      	cmp	r2, r3
 8008230:	d902      	bls.n	8008238 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	d13d      	bne.n	80082b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008246:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008250:	d111      	bne.n	8008276 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800825a:	d004      	beq.n	8008266 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008264:	d107      	bne.n	8008276 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008274:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800827e:	d10f      	bne.n	80082a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800828e:	601a      	str	r2, [r3, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800829e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e010      	b.n	80082d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	4013      	ands	r3, r2
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d196      	bne.n	8008202 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3728      	adds	r7, #40	@ 0x28
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000030 	.word	0x20000030

080082e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff ff5b 	bl	80081b8 <SPI_WaitFifoStateUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d007      	beq.n	8008318 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800830c:	f043 0220 	orr.w	r2, r3, #32
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e027      	b.n	8008368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2200      	movs	r2, #0
 8008320:	2180      	movs	r1, #128	@ 0x80
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fec0 	bl	80080a8 <SPI_WaitFlagStateUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008332:	f043 0220 	orr.w	r2, r3, #32
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e014      	b.n	8008368 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff ff34 	bl	80081b8 <SPI_WaitFifoStateUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d007      	beq.n	8008366 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e000      	b.n	8008368 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e040      	b.n	8008404 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7fb fb4c 	bl	8003a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2224      	movs	r2, #36	@ 0x24
 800839c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 fa54 	bl	8008864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f825 	bl	800840c <UART_SetConfig>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e01b      	b.n	8008404 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fad3 	bl	80089a8 <UART_CheckIdleState>
 8008402:	4603      	mov	r3, r0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800840c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008410:	b08a      	sub	sp, #40	@ 0x28
 8008412:	af00      	add	r7, sp, #0
 8008414:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008416:	2300      	movs	r3, #0
 8008418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	431a      	orrs	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	431a      	orrs	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	4313      	orrs	r3, r2
 8008432:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4bb4      	ldr	r3, [pc, #720]	@ (800870c <UART_SetConfig+0x300>)
 800843c:	4013      	ands	r3, r2
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008444:	430b      	orrs	r3, r1
 8008446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4aa9      	ldr	r2, [pc, #676]	@ (8008710 <UART_SetConfig+0x304>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d004      	beq.n	8008478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008474:	4313      	orrs	r3, r2
 8008476:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008488:	430a      	orrs	r2, r1
 800848a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4aa0      	ldr	r2, [pc, #640]	@ (8008714 <UART_SetConfig+0x308>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d126      	bne.n	80084e4 <UART_SetConfig+0xd8>
 8008496:	4ba0      	ldr	r3, [pc, #640]	@ (8008718 <UART_SetConfig+0x30c>)
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d81b      	bhi.n	80084dc <UART_SetConfig+0xd0>
 80084a4:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <UART_SetConfig+0xa0>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084c5 	.word	0x080084c5
 80084b8:	080084d5 	.word	0x080084d5
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084c2:	e080      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ca:	e07c      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084d2:	e078      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80084d4:	2308      	movs	r3, #8
 80084d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084da:	e074      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084e2:	e070      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a8c      	ldr	r2, [pc, #560]	@ (800871c <UART_SetConfig+0x310>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d138      	bne.n	8008560 <UART_SetConfig+0x154>
 80084ee:	4b8a      	ldr	r3, [pc, #552]	@ (8008718 <UART_SetConfig+0x30c>)
 80084f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084f4:	f003 030c 	and.w	r3, r3, #12
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	d82d      	bhi.n	8008558 <UART_SetConfig+0x14c>
 80084fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008504 <UART_SetConfig+0xf8>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008539 	.word	0x08008539
 8008508:	08008559 	.word	0x08008559
 800850c:	08008559 	.word	0x08008559
 8008510:	08008559 	.word	0x08008559
 8008514:	08008549 	.word	0x08008549
 8008518:	08008559 	.word	0x08008559
 800851c:	08008559 	.word	0x08008559
 8008520:	08008559 	.word	0x08008559
 8008524:	08008541 	.word	0x08008541
 8008528:	08008559 	.word	0x08008559
 800852c:	08008559 	.word	0x08008559
 8008530:	08008559 	.word	0x08008559
 8008534:	08008551 	.word	0x08008551
 8008538:	2300      	movs	r3, #0
 800853a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800853e:	e042      	b.n	80085c6 <UART_SetConfig+0x1ba>
 8008540:	2302      	movs	r3, #2
 8008542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008546:	e03e      	b.n	80085c6 <UART_SetConfig+0x1ba>
 8008548:	2304      	movs	r3, #4
 800854a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800854e:	e03a      	b.n	80085c6 <UART_SetConfig+0x1ba>
 8008550:	2308      	movs	r3, #8
 8008552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008556:	e036      	b.n	80085c6 <UART_SetConfig+0x1ba>
 8008558:	2310      	movs	r3, #16
 800855a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800855e:	e032      	b.n	80085c6 <UART_SetConfig+0x1ba>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a6a      	ldr	r2, [pc, #424]	@ (8008710 <UART_SetConfig+0x304>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d12a      	bne.n	80085c0 <UART_SetConfig+0x1b4>
 800856a:	4b6b      	ldr	r3, [pc, #428]	@ (8008718 <UART_SetConfig+0x30c>)
 800856c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008574:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008578:	d01a      	beq.n	80085b0 <UART_SetConfig+0x1a4>
 800857a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800857e:	d81b      	bhi.n	80085b8 <UART_SetConfig+0x1ac>
 8008580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008584:	d00c      	beq.n	80085a0 <UART_SetConfig+0x194>
 8008586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800858a:	d815      	bhi.n	80085b8 <UART_SetConfig+0x1ac>
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <UART_SetConfig+0x18c>
 8008590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008594:	d008      	beq.n	80085a8 <UART_SetConfig+0x19c>
 8008596:	e00f      	b.n	80085b8 <UART_SetConfig+0x1ac>
 8008598:	2300      	movs	r3, #0
 800859a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800859e:	e012      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80085a0:	2302      	movs	r3, #2
 80085a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085a6:	e00e      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80085a8:	2304      	movs	r3, #4
 80085aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085ae:	e00a      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80085b0:	2308      	movs	r3, #8
 80085b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085b6:	e006      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80085b8:	2310      	movs	r3, #16
 80085ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80085be:	e002      	b.n	80085c6 <UART_SetConfig+0x1ba>
 80085c0:	2310      	movs	r3, #16
 80085c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a51      	ldr	r2, [pc, #324]	@ (8008710 <UART_SetConfig+0x304>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d17a      	bne.n	80086c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d824      	bhi.n	8008622 <UART_SetConfig+0x216>
 80085d8:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <UART_SetConfig+0x1d4>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008605 	.word	0x08008605
 80085e4:	08008623 	.word	0x08008623
 80085e8:	0800860d 	.word	0x0800860d
 80085ec:	08008623 	.word	0x08008623
 80085f0:	08008613 	.word	0x08008613
 80085f4:	08008623 	.word	0x08008623
 80085f8:	08008623 	.word	0x08008623
 80085fc:	08008623 	.word	0x08008623
 8008600:	0800861b 	.word	0x0800861b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008604:	f7fe fda4 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 8008608:	61f8      	str	r0, [r7, #28]
        break;
 800860a:	e010      	b.n	800862e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800860c:	4b44      	ldr	r3, [pc, #272]	@ (8008720 <UART_SetConfig+0x314>)
 800860e:	61fb      	str	r3, [r7, #28]
        break;
 8008610:	e00d      	b.n	800862e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008612:	f7fe fd05 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8008616:	61f8      	str	r0, [r7, #28]
        break;
 8008618:	e009      	b.n	800862e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800861a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800861e:	61fb      	str	r3, [r7, #28]
        break;
 8008620:	e005      	b.n	800862e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800862c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8107 	beq.w	8008844 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	4613      	mov	r3, r2
 800863c:	005b      	lsls	r3, r3, #1
 800863e:	4413      	add	r3, r2
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	429a      	cmp	r2, r3
 8008644:	d305      	bcc.n	8008652 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	429a      	cmp	r2, r3
 8008650:	d903      	bls.n	800865a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008658:	e0f4      	b.n	8008844 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	2200      	movs	r2, #0
 800865e:	461c      	mov	r4, r3
 8008660:	4615      	mov	r5, r2
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	022b      	lsls	r3, r5, #8
 800866c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008670:	0222      	lsls	r2, r4, #8
 8008672:	68f9      	ldr	r1, [r7, #12]
 8008674:	6849      	ldr	r1, [r1, #4]
 8008676:	0849      	lsrs	r1, r1, #1
 8008678:	2000      	movs	r0, #0
 800867a:	4688      	mov	r8, r1
 800867c:	4681      	mov	r9, r0
 800867e:	eb12 0a08 	adds.w	sl, r2, r8
 8008682:	eb43 0b09 	adc.w	fp, r3, r9
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008694:	4650      	mov	r0, sl
 8008696:	4659      	mov	r1, fp
 8008698:	f7f8 fb06 	bl	8000ca8 <__aeabi_uldivmod>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	4613      	mov	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086aa:	d308      	bcc.n	80086be <UART_SetConfig+0x2b2>
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b2:	d204      	bcs.n	80086be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	60da      	str	r2, [r3, #12]
 80086bc:	e0c2      	b.n	8008844 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80086c4:	e0be      	b.n	8008844 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ce:	d16a      	bne.n	80087a6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80086d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d834      	bhi.n	8008742 <UART_SetConfig+0x336>
 80086d8:	a201      	add	r2, pc, #4	@ (adr r2, 80086e0 <UART_SetConfig+0x2d4>)
 80086da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086de:	bf00      	nop
 80086e0:	08008705 	.word	0x08008705
 80086e4:	08008725 	.word	0x08008725
 80086e8:	0800872d 	.word	0x0800872d
 80086ec:	08008743 	.word	0x08008743
 80086f0:	08008733 	.word	0x08008733
 80086f4:	08008743 	.word	0x08008743
 80086f8:	08008743 	.word	0x08008743
 80086fc:	08008743 	.word	0x08008743
 8008700:	0800873b 	.word	0x0800873b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008704:	f7fe fd24 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 8008708:	61f8      	str	r0, [r7, #28]
        break;
 800870a:	e020      	b.n	800874e <UART_SetConfig+0x342>
 800870c:	efff69f3 	.word	0xefff69f3
 8008710:	40008000 	.word	0x40008000
 8008714:	40013800 	.word	0x40013800
 8008718:	40021000 	.word	0x40021000
 800871c:	40004400 	.word	0x40004400
 8008720:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008724:	f7fe fd2a 	bl	800717c <HAL_RCC_GetPCLK2Freq>
 8008728:	61f8      	str	r0, [r7, #28]
        break;
 800872a:	e010      	b.n	800874e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800872c:	4b4c      	ldr	r3, [pc, #304]	@ (8008860 <UART_SetConfig+0x454>)
 800872e:	61fb      	str	r3, [r7, #28]
        break;
 8008730:	e00d      	b.n	800874e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008732:	f7fe fc75 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 8008736:	61f8      	str	r0, [r7, #28]
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	61fb      	str	r3, [r7, #28]
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800874c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d077      	beq.n	8008844 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	005a      	lsls	r2, r3, #1
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	441a      	add	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d916      	bls.n	800879e <UART_SetConfig+0x392>
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008776:	d212      	bcs.n	800879e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	b29b      	uxth	r3, r3
 800877c:	f023 030f 	bic.w	r3, r3, #15
 8008780:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	085b      	lsrs	r3, r3, #1
 8008786:	b29b      	uxth	r3, r3
 8008788:	f003 0307 	and.w	r3, r3, #7
 800878c:	b29a      	uxth	r2, r3
 800878e:	8afb      	ldrh	r3, [r7, #22]
 8008790:	4313      	orrs	r3, r2
 8008792:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	8afa      	ldrh	r2, [r7, #22]
 800879a:	60da      	str	r2, [r3, #12]
 800879c:	e052      	b.n	8008844 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80087a4:	e04e      	b.n	8008844 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d827      	bhi.n	80087fe <UART_SetConfig+0x3f2>
 80087ae:	a201      	add	r2, pc, #4	@ (adr r2, 80087b4 <UART_SetConfig+0x3a8>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	080087ff 	.word	0x080087ff
 80087c4:	080087ef 	.word	0x080087ef
 80087c8:	080087ff 	.word	0x080087ff
 80087cc:	080087ff 	.word	0x080087ff
 80087d0:	080087ff 	.word	0x080087ff
 80087d4:	080087f7 	.word	0x080087f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d8:	f7fe fcba 	bl	8007150 <HAL_RCC_GetPCLK1Freq>
 80087dc:	61f8      	str	r0, [r7, #28]
        break;
 80087de:	e014      	b.n	800880a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e0:	f7fe fccc 	bl	800717c <HAL_RCC_GetPCLK2Freq>
 80087e4:	61f8      	str	r0, [r7, #28]
        break;
 80087e6:	e010      	b.n	800880a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008860 <UART_SetConfig+0x454>)
 80087ea:	61fb      	str	r3, [r7, #28]
        break;
 80087ec:	e00d      	b.n	800880a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ee:	f7fe fc17 	bl	8007020 <HAL_RCC_GetSysClockFreq>
 80087f2:	61f8      	str	r0, [r7, #28]
        break;
 80087f4:	e009      	b.n	800880a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087fa:	61fb      	str	r3, [r7, #28]
        break;
 80087fc:	e005      	b.n	800880a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008808:	bf00      	nop
    }

    if (pclk != 0U)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d019      	beq.n	8008844 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	085a      	lsrs	r2, r3, #1
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	441a      	add	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008822:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2b0f      	cmp	r3, #15
 8008828:	d909      	bls.n	800883e <UART_SetConfig+0x432>
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008830:	d205      	bcs.n	800883e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60da      	str	r2, [r3, #12]
 800883c:	e002      	b.n	8008844 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008850:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8008854:	4618      	mov	r0, r3
 8008856:	3728      	adds	r7, #40	@ 0x28
 8008858:	46bd      	mov	sp, r7
 800885a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885e:	bf00      	nop
 8008860:	00f42400 	.word	0x00f42400

08008864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008870:	f003 0308 	and.w	r3, r3, #8
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01a      	beq.n	800897a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008962:	d10a      	bne.n	800897a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	605a      	str	r2, [r3, #4]
  }
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b098      	sub	sp, #96	@ 0x60
 80089ac:	af02      	add	r7, sp, #8
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089b8:	f7fb facc 	bl	8003f54 <HAL_GetTick>
 80089bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0308 	and.w	r3, r3, #8
 80089c8:	2b08      	cmp	r3, #8
 80089ca:	d12e      	bne.n	8008a2a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089d4:	2200      	movs	r2, #0
 80089d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f88c 	bl	8008af8 <UART_WaitOnFlagUntilTimeout>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d021      	beq.n	8008a2a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e6      	bne.n	80089e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e062      	b.n	8008af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d149      	bne.n	8008acc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a40:	2200      	movs	r2, #0
 8008a42:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f856 	bl	8008af8 <UART_WaitOnFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d03c      	beq.n	8008acc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	e853 3f00 	ldrex	r3, [r3]
 8008a5e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a78:	e841 2300 	strex	r3, r2, [r1]
 8008a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1e6      	bne.n	8008a52 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0301 	bic.w	r3, r3, #1
 8008a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aa4:	61fa      	str	r2, [r7, #28]
 8008aa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	69b9      	ldr	r1, [r7, #24]
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e5      	bne.n	8008a84 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e011      	b.n	8008af0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3758      	adds	r7, #88	@ 0x58
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b08:	e04f      	b.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d04b      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b12:	f7fb fa1f 	bl	8003f54 <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e04e      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d037      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b80      	cmp	r3, #128	@ 0x80
 8008b3e:	d034      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b40      	cmp	r3, #64	@ 0x40
 8008b44:	d031      	beq.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d110      	bne.n	8008b76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f838 	bl	8008bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2208      	movs	r2, #8
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e029      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b84:	d111      	bne.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f81e 	bl	8008bd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e00f      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	bf0c      	ite	eq
 8008bba:	2301      	moveq	r3, #1
 8008bbc:	2300      	movne	r3, #0
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	79fb      	ldrb	r3, [r7, #7]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d0a0      	beq.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b095      	sub	sp, #84	@ 0x54
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bf8:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bfa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e6      	bne.n	8008bda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3308      	adds	r3, #8
 8008c12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e5      	bne.n	8008c0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d118      	bne.n	8008c7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f023 0310 	bic.w	r3, r3, #16
 8008c5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c66:	61bb      	str	r3, [r7, #24]
 8008c68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	6979      	ldr	r1, [r7, #20]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	613b      	str	r3, [r7, #16]
   return(result);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c8e:	bf00      	nop
 8008c90:	3754      	adds	r7, #84	@ 0x54
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <arm_mat_trans_f32>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	8802      	ldrh	r2, [r0, #0]
 8008ca2:	884b      	ldrh	r3, [r1, #2]
 8008ca4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008ca8:	684f      	ldr	r7, [r1, #4]
 8008caa:	8840      	ldrh	r0, [r0, #2]
 8008cac:	4293      	cmp	r3, r2
 8008cae:	b083      	sub	sp, #12
 8008cb0:	d14c      	bne.n	8008d4c <arm_mat_trans_f32+0xb0>
 8008cb2:	f8b1 e000 	ldrh.w	lr, [r1]
 8008cb6:	4586      	cmp	lr, r0
 8008cb8:	d148      	bne.n	8008d4c <arm_mat_trans_f32+0xb0>
 8008cba:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8008cbe:	009c      	lsls	r4, r3, #2
 8008cc0:	f00e 0e03 	and.w	lr, lr, #3
 8008cc4:	fb08 f904 	mul.w	r9, r8, r4
 8008cc8:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8008ccc:	011d      	lsls	r5, r3, #4
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8008cd4:	eb07 0a04 	add.w	sl, r7, r4
 8008cd8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8008cdc:	9201      	str	r2, [sp, #4]
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	f1b8 0f00 	cmp.w	r8, #0
 8008ce6:	d01d      	beq.n	8008d24 <arm_mat_trans_f32+0x88>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	f10c 0210 	add.w	r2, ip, #16
 8008cee:	4439      	add	r1, r7
 8008cf0:	4640      	mov	r0, r8
 8008cf2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8008cf6:	601e      	str	r6, [r3, #0]
 8008cf8:	ed52 7a03 	vldr	s15, [r2, #-12]
 8008cfc:	191e      	adds	r6, r3, r4
 8008cfe:	edc6 7a00 	vstr	s15, [r6]
 8008d02:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8008d06:	600e      	str	r6, [r1, #0]
 8008d08:	ed52 7a01 	vldr	s15, [r2, #-4]
 8008d0c:	190e      	adds	r6, r1, r4
 8008d0e:	3801      	subs	r0, #1
 8008d10:	442b      	add	r3, r5
 8008d12:	f102 0210 	add.w	r2, r2, #16
 8008d16:	edc6 7a00 	vstr	s15, [r6]
 8008d1a:	4429      	add	r1, r5
 8008d1c:	d1e9      	bne.n	8008cf2 <arm_mat_trans_f32+0x56>
 8008d1e:	44dc      	add	ip, fp
 8008d20:	eb09 0307 	add.w	r3, r9, r7
 8008d24:	f1be 0f00 	cmp.w	lr, #0
 8008d28:	d009      	beq.n	8008d3e <arm_mat_trans_f32+0xa2>
 8008d2a:	4672      	mov	r2, lr
 8008d2c:	4661      	mov	r1, ip
 8008d2e:	f851 0b04 	ldr.w	r0, [r1], #4
 8008d32:	6018      	str	r0, [r3, #0]
 8008d34:	3a01      	subs	r2, #1
 8008d36:	4423      	add	r3, r4
 8008d38:	d1f9      	bne.n	8008d2e <arm_mat_trans_f32+0x92>
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	449c      	add	ip, r3
 8008d3e:	3704      	adds	r7, #4
 8008d40:	4557      	cmp	r7, sl
 8008d42:	d1cd      	bne.n	8008ce0 <arm_mat_trans_f32+0x44>
 8008d44:	2000      	movs	r0, #0
 8008d46:	b003      	add	sp, #12
 8008d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d4c:	f06f 0002 	mvn.w	r0, #2
 8008d50:	e7f9      	b.n	8008d46 <arm_mat_trans_f32+0xaa>
 8008d52:	bf00      	nop

08008d54 <arm_mat_sub_f32>:
 8008d54:	b4f0      	push	{r4, r5, r6, r7}
 8008d56:	e9d1 4700 	ldrd	r4, r7, [r1]
 8008d5a:	6803      	ldr	r3, [r0, #0]
 8008d5c:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8008d60:	6856      	ldr	r6, [r2, #4]
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	d15d      	bne.n	8008e22 <arm_mat_sub_f32+0xce>
 8008d66:	6812      	ldr	r2, [r2, #0]
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d15a      	bne.n	8008e22 <arm_mat_sub_f32+0xce>
 8008d6c:	8803      	ldrh	r3, [r0, #0]
 8008d6e:	8844      	ldrh	r4, [r0, #2]
 8008d70:	fb04 f403 	mul.w	r4, r4, r3
 8008d74:	08a5      	lsrs	r5, r4, #2
 8008d76:	d032      	beq.n	8008dde <arm_mat_sub_f32+0x8a>
 8008d78:	f10c 0110 	add.w	r1, ip, #16
 8008d7c:	f107 0210 	add.w	r2, r7, #16
 8008d80:	f106 0310 	add.w	r3, r6, #16
 8008d84:	4628      	mov	r0, r5
 8008d86:	ed12 7a04 	vldr	s14, [r2, #-16]
 8008d8a:	ed51 7a04 	vldr	s15, [r1, #-16]
 8008d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008d92:	3801      	subs	r0, #1
 8008d94:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008d98:	ed12 7a03 	vldr	s14, [r2, #-12]
 8008d9c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008da0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008da4:	f101 0110 	add.w	r1, r1, #16
 8008da8:	ed43 7a03 	vstr	s15, [r3, #-12]
 8008dac:	ed12 7a02 	vldr	s14, [r2, #-8]
 8008db0:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8008db4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008db8:	f102 0210 	add.w	r2, r2, #16
 8008dbc:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008dc0:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8008dc4:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8008dc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008dcc:	f103 0310 	add.w	r3, r3, #16
 8008dd0:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8008dd4:	d1d7      	bne.n	8008d86 <arm_mat_sub_f32+0x32>
 8008dd6:	012b      	lsls	r3, r5, #4
 8008dd8:	449c      	add	ip, r3
 8008dda:	441f      	add	r7, r3
 8008ddc:	441e      	add	r6, r3
 8008dde:	f014 0403 	ands.w	r4, r4, #3
 8008de2:	d01b      	beq.n	8008e1c <arm_mat_sub_f32+0xc8>
 8008de4:	eddc 7a00 	vldr	s15, [ip]
 8008de8:	ed97 7a00 	vldr	s14, [r7]
 8008dec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008df0:	3c01      	subs	r4, #1
 8008df2:	edc6 7a00 	vstr	s15, [r6]
 8008df6:	d011      	beq.n	8008e1c <arm_mat_sub_f32+0xc8>
 8008df8:	eddc 7a01 	vldr	s15, [ip, #4]
 8008dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8008e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e04:	2c01      	cmp	r4, #1
 8008e06:	edc6 7a01 	vstr	s15, [r6, #4]
 8008e0a:	d007      	beq.n	8008e1c <arm_mat_sub_f32+0xc8>
 8008e0c:	eddc 7a02 	vldr	s15, [ip, #8]
 8008e10:	ed97 7a02 	vldr	s14, [r7, #8]
 8008e14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008e18:	edc6 7a02 	vstr	s15, [r6, #8]
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8008e20:	4770      	bx	lr
 8008e22:	f06f 0002 	mvn.w	r0, #2
 8008e26:	e7fa      	b.n	8008e1e <arm_mat_sub_f32+0xca>

08008e28 <arm_mat_mult_f32>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	8845      	ldrh	r5, [r0, #2]
 8008e2e:	880b      	ldrh	r3, [r1, #0]
 8008e30:	8806      	ldrh	r6, [r0, #0]
 8008e32:	6847      	ldr	r7, [r0, #4]
 8008e34:	6854      	ldr	r4, [r2, #4]
 8008e36:	6848      	ldr	r0, [r1, #4]
 8008e38:	b08b      	sub	sp, #44	@ 0x2c
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e3e:	9604      	str	r6, [sp, #16]
 8008e40:	8849      	ldrh	r1, [r1, #2]
 8008e42:	f040 808a 	bne.w	8008f5a <arm_mat_mult_f32+0x132>
 8008e46:	8815      	ldrh	r5, [r2, #0]
 8008e48:	42b5      	cmp	r5, r6
 8008e4a:	f040 8086 	bne.w	8008f5a <arm_mat_mult_f32+0x132>
 8008e4e:	8852      	ldrh	r2, [r2, #2]
 8008e50:	428a      	cmp	r2, r1
 8008e52:	f040 8082 	bne.w	8008f5a <arm_mat_mult_f32+0x132>
 8008e56:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8008e5a:	1d01      	adds	r1, r0, #4
 8008e5c:	0116      	lsls	r6, r2, #4
 8008e5e:	9108      	str	r1, [sp, #32]
 8008e60:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8008e64:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8008e68:	9101      	str	r1, [sp, #4]
 8008e6a:	fb06 f108 	mul.w	r1, r6, r8
 8008e6e:	0095      	lsls	r5, r2, #2
 8008e70:	9103      	str	r1, [sp, #12]
 8008e72:	00d2      	lsls	r2, r2, #3
 8008e74:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8008e78:	f003 0903 	and.w	r9, r3, #3
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	f107 0b10 	add.w	fp, r7, #16
 8008e82:	eb04 0a05 	add.w	sl, r4, r5
 8008e86:	9107      	str	r1, [sp, #28]
 8008e88:	9202      	str	r2, [sp, #8]
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	f1ab 0310 	sub.w	r3, fp, #16
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	9b07      	ldr	r3, [sp, #28]
 8008e94:	f8dd e020 	ldr.w	lr, [sp, #32]
 8008e98:	eb03 0c0a 	add.w	ip, r3, sl
 8008e9c:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8008f64 <arm_mat_mult_f32+0x13c>
 8008ea0:	f1b8 0f00 	cmp.w	r8, #0
 8008ea4:	d053      	beq.n	8008f4e <arm_mat_mult_f32+0x126>
 8008ea6:	9b02      	ldr	r3, [sp, #8]
 8008ea8:	4644      	mov	r4, r8
 8008eaa:	18c1      	adds	r1, r0, r3
 8008eac:	4602      	mov	r2, r0
 8008eae:	465b      	mov	r3, fp
 8008eb0:	ed92 6a00 	vldr	s12, [r2]
 8008eb4:	ed13 7a04 	vldr	s14, [r3, #-16]
 8008eb8:	ed53 4a03 	vldr	s9, [r3, #-12]
 8008ebc:	ed53 6a02 	vldr	s13, [r3, #-8]
 8008ec0:	ed91 5a00 	vldr	s10, [r1]
 8008ec4:	ed53 5a01 	vldr	s11, [r3, #-4]
 8008ec8:	1957      	adds	r7, r2, r5
 8008eca:	ee27 7a06 	vmul.f32	s14, s14, s12
 8008ece:	ed97 6a00 	vldr	s12, [r7]
 8008ed2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ed6:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008eda:	194f      	adds	r7, r1, r5
 8008edc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8008ee0:	ee26 7a85 	vmul.f32	s14, s13, s10
 8008ee4:	edd7 7a00 	vldr	s15, [r7]
 8008ee8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008eec:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008ef0:	3c01      	subs	r4, #1
 8008ef2:	4432      	add	r2, r6
 8008ef4:	4431      	add	r1, r6
 8008ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008efa:	f103 0310 	add.w	r3, r3, #16
 8008efe:	d1d7      	bne.n	8008eb0 <arm_mat_mult_f32+0x88>
 8008f00:	9b03      	ldr	r3, [sp, #12]
 8008f02:	9a01      	ldr	r2, [sp, #4]
 8008f04:	4418      	add	r0, r3
 8008f06:	f1b9 0f00 	cmp.w	r9, #0
 8008f0a:	d00b      	beq.n	8008f24 <arm_mat_mult_f32+0xfc>
 8008f0c:	464b      	mov	r3, r9
 8008f0e:	edd0 6a00 	vldr	s13, [r0]
 8008f12:	ecb2 7a01 	vldmia	r2!, {s14}
 8008f16:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	4428      	add	r0, r5
 8008f1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f22:	d1f4      	bne.n	8008f0e <arm_mat_mult_f32+0xe6>
 8008f24:	ecec 7a01 	vstmia	ip!, {s15}
 8008f28:	45d4      	cmp	ip, sl
 8008f2a:	4670      	mov	r0, lr
 8008f2c:	f10e 0e04 	add.w	lr, lr, #4
 8008f30:	d1b4      	bne.n	8008e9c <arm_mat_mult_f32+0x74>
 8008f32:	9a01      	ldr	r2, [sp, #4]
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	4611      	mov	r1, r2
 8008f38:	4419      	add	r1, r3
 8008f3a:	449b      	add	fp, r3
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	9101      	str	r1, [sp, #4]
 8008f40:	3b01      	subs	r3, #1
 8008f42:	44aa      	add	sl, r5
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	d004      	beq.n	8008f52 <arm_mat_mult_f32+0x12a>
 8008f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4a:	6858      	ldr	r0, [r3, #4]
 8008f4c:	e79e      	b.n	8008e8c <arm_mat_mult_f32+0x64>
 8008f4e:	9a05      	ldr	r2, [sp, #20]
 8008f50:	e7d9      	b.n	8008f06 <arm_mat_mult_f32+0xde>
 8008f52:	4618      	mov	r0, r3
 8008f54:	b00b      	add	sp, #44	@ 0x2c
 8008f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5a:	f06f 0002 	mvn.w	r0, #2
 8008f5e:	b00b      	add	sp, #44	@ 0x2c
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	00000000 	.word	0x00000000

08008f68 <arm_mat_inverse_f32>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	8843      	ldrh	r3, [r0, #2]
 8008f6e:	8804      	ldrh	r4, [r0, #0]
 8008f70:	684e      	ldr	r6, [r1, #4]
 8008f72:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8008f76:	b087      	sub	sp, #28
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	9603      	str	r6, [sp, #12]
 8008f7e:	f040 80ea 	bne.w	8009156 <arm_mat_inverse_f32+0x1ee>
 8008f82:	880a      	ldrh	r2, [r1, #0]
 8008f84:	884b      	ldrh	r3, [r1, #2]
 8008f86:	4293      	cmp	r3, r2
 8008f88:	f040 80e5 	bne.w	8009156 <arm_mat_inverse_f32+0x1ee>
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	f040 80e2 	bne.w	8009156 <arm_mat_inverse_f32+0x1ee>
 8008f92:	9005      	str	r0, [sp, #20]
 8008f94:	b30c      	cbz	r4, 8008fda <arm_mat_inverse_f32+0x72>
 8008f96:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8008f9a:	1e67      	subs	r7, r4, #1
 8008f9c:	f846 bb04 	str.w	fp, [r6], #4
 8008fa0:	d01b      	beq.n	8008fda <arm_mat_inverse_f32+0x72>
 8008fa2:	f04f 0801 	mov.w	r8, #1
 8008fa6:	00ba      	lsls	r2, r7, #2
 8008fa8:	eb06 0a02 	add.w	sl, r6, r2
 8008fac:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	f002 ff00 	bl	800bdb8 <memset>
 8008fb8:	eb0a 0605 	add.w	r6, sl, r5
 8008fbc:	462a      	mov	r2, r5
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	4650      	mov	r0, sl
 8008fc2:	f1b8 0f00 	cmp.w	r8, #0
 8008fc6:	f000 80cb 	beq.w	8009160 <arm_mat_inverse_f32+0x1f8>
 8008fca:	f002 fef5 	bl	800bdb8 <memset>
 8008fce:	3f01      	subs	r7, #1
 8008fd0:	f108 0801 	add.w	r8, r8, #1
 8008fd4:	f846 bb04 	str.w	fp, [r6], #4
 8008fd8:	d1e5      	bne.n	8008fa6 <arm_mat_inverse_f32+0x3e>
 8008fda:	9b01      	ldr	r3, [sp, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80b5 	beq.w	800914c <arm_mat_inverse_f32+0x1e4>
 8008fe2:	009d      	lsls	r5, r3, #2
 8008fe4:	eb09 0205 	add.w	r2, r9, r5
 8008fe8:	46cc      	mov	ip, r9
 8008fea:	9202      	str	r2, [sp, #8]
 8008fec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008ff0:	1d2a      	adds	r2, r5, #4
 8008ff2:	9204      	str	r2, [sp, #16]
 8008ff4:	462f      	mov	r7, r5
 8008ff6:	469e      	mov	lr, r3
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	eddc 6a00 	vldr	s13, [ip]
 8009000:	42b4      	cmp	r4, r6
 8009002:	eba3 0b07 	sub.w	fp, r3, r7
 8009006:	f000 80a1 	beq.w	800914c <arm_mat_inverse_f32+0x1e4>
 800900a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8009170 <arm_mat_inverse_f32+0x208>
 800900e:	4632      	mov	r2, r6
 8009010:	4663      	mov	r3, ip
 8009012:	e00b      	b.n	800902c <arm_mat_inverse_f32+0xc4>
 8009014:	eef4 7a47 	vcmp.f32	s15, s14
 8009018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800901c:	f102 0201 	add.w	r2, r2, #1
 8009020:	bfc8      	it	gt
 8009022:	eeb0 7a67 	vmovgt.f32	s14, s15
 8009026:	42a2      	cmp	r2, r4
 8009028:	442b      	add	r3, r5
 800902a:	d014      	beq.n	8009056 <arm_mat_inverse_f32+0xee>
 800902c:	edd3 7a00 	vldr	s15, [r3]
 8009030:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009038:	eeb1 6a67 	vneg.f32	s12, s15
 800903c:	dcea      	bgt.n	8009014 <arm_mat_inverse_f32+0xac>
 800903e:	eeb4 6a47 	vcmp.f32	s12, s14
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	f102 0201 	add.w	r2, r2, #1
 800904a:	bfc8      	it	gt
 800904c:	eeb0 7a46 	vmovgt.f32	s14, s12
 8009050:	42a2      	cmp	r2, r4
 8009052:	442b      	add	r3, r5
 8009054:	d1ea      	bne.n	800902c <arm_mat_inverse_f32+0xc4>
 8009056:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800905a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800905e:	d075      	beq.n	800914c <arm_mat_inverse_f32+0x1e4>
 8009060:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009068:	d070      	beq.n	800914c <arm_mat_inverse_f32+0x1e4>
 800906a:	4672      	mov	r2, lr
 800906c:	4663      	mov	r3, ip
 800906e:	ed93 7a00 	vldr	s14, [r3]
 8009072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009076:	3a01      	subs	r2, #1
 8009078:	ece3 7a01 	vstmia	r3!, {s15}
 800907c:	d1f7      	bne.n	800906e <arm_mat_inverse_f32+0x106>
 800907e:	9901      	ldr	r1, [sp, #4]
 8009080:	464b      	mov	r3, r9
 8009082:	ed93 7a00 	vldr	s14, [r3]
 8009086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800908a:	3901      	subs	r1, #1
 800908c:	ece3 7a01 	vstmia	r3!, {s15}
 8009090:	d1f7      	bne.n	8009082 <arm_mat_inverse_f32+0x11a>
 8009092:	9803      	ldr	r0, [sp, #12]
 8009094:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8009098:	42b1      	cmp	r1, r6
 800909a:	d039      	beq.n	8009110 <arm_mat_inverse_f32+0x1a8>
 800909c:	eddb 6a00 	vldr	s13, [fp]
 80090a0:	465a      	mov	r2, fp
 80090a2:	4673      	mov	r3, lr
 80090a4:	46e2      	mov	sl, ip
 80090a6:	ecba 7a01 	vldmia	sl!, {s14}
 80090aa:	edd2 7a00 	vldr	s15, [r2]
 80090ae:	ee26 7a87 	vmul.f32	s14, s13, s14
 80090b2:	3b01      	subs	r3, #1
 80090b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090b8:	ece2 7a01 	vstmia	r2!, {s15}
 80090bc:	d1f3      	bne.n	80090a6 <arm_mat_inverse_f32+0x13e>
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	44bb      	add	fp, r7
 80090c2:	4602      	mov	r2, r0
 80090c4:	46ca      	mov	sl, r9
 80090c6:	ecba 7a01 	vldmia	sl!, {s14}
 80090ca:	edd2 7a00 	vldr	s15, [r2]
 80090ce:	ee26 7a87 	vmul.f32	s14, s13, s14
 80090d2:	3b01      	subs	r3, #1
 80090d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80090d8:	ece2 7a01 	vstmia	r2!, {s15}
 80090dc:	d1f3      	bne.n	80090c6 <arm_mat_inverse_f32+0x15e>
 80090de:	4428      	add	r0, r5
 80090e0:	3101      	adds	r1, #1
 80090e2:	428c      	cmp	r4, r1
 80090e4:	44c3      	add	fp, r8
 80090e6:	d1d7      	bne.n	8009098 <arm_mat_inverse_f32+0x130>
 80090e8:	9b04      	ldr	r3, [sp, #16]
 80090ea:	f1be 0e01 	subs.w	lr, lr, #1
 80090ee:	f106 0601 	add.w	r6, r6, #1
 80090f2:	449c      	add	ip, r3
 80090f4:	f1a7 0704 	sub.w	r7, r7, #4
 80090f8:	44a9      	add	r9, r5
 80090fa:	f47f af7e 	bne.w	8008ffa <arm_mat_inverse_f32+0x92>
 80090fe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8009102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009106:	d006      	beq.n	8009116 <arm_mat_inverse_f32+0x1ae>
 8009108:	2000      	movs	r0, #0
 800910a:	b007      	add	sp, #28
 800910c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009110:	44bb      	add	fp, r7
 8009112:	4428      	add	r0, r5
 8009114:	e7e4      	b.n	80090e0 <arm_mat_inverse_f32+0x178>
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	9a01      	ldr	r2, [sp, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	edd3 7a00 	vldr	s15, [r3]
 8009120:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009124:	fb02 f204 	mul.w	r2, r2, r4
 8009128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912c:	4614      	mov	r4, r2
 800912e:	bf08      	it	eq
 8009130:	3304      	addeq	r3, #4
 8009132:	d007      	beq.n	8009144 <arm_mat_inverse_f32+0x1dc>
 8009134:	e7e8      	b.n	8009108 <arm_mat_inverse_f32+0x1a0>
 8009136:	ecf3 7a01 	vldmia	r3!, {s15}
 800913a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009142:	d1e1      	bne.n	8009108 <arm_mat_inverse_f32+0x1a0>
 8009144:	f10e 0e01 	add.w	lr, lr, #1
 8009148:	4574      	cmp	r4, lr
 800914a:	d1f4      	bne.n	8009136 <arm_mat_inverse_f32+0x1ce>
 800914c:	f06f 0004 	mvn.w	r0, #4
 8009150:	b007      	add	sp, #28
 8009152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009156:	f06f 0002 	mvn.w	r0, #2
 800915a:	b007      	add	sp, #28
 800915c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009160:	4656      	mov	r6, sl
 8009162:	3f01      	subs	r7, #1
 8009164:	f846 bb04 	str.w	fp, [r6], #4
 8009168:	f47f af1b 	bne.w	8008fa2 <arm_mat_inverse_f32+0x3a>
 800916c:	e735      	b.n	8008fda <arm_mat_inverse_f32+0x72>
 800916e:	bf00      	nop
 8009170:	00000000 	.word	0x00000000

08009174 <arm_mat_init_f32>:
 8009174:	8001      	strh	r1, [r0, #0]
 8009176:	8042      	strh	r2, [r0, #2]
 8009178:	6043      	str	r3, [r0, #4]
 800917a:	4770      	bx	lr

0800917c <arm_mat_add_f32>:
 800917c:	b4f0      	push	{r4, r5, r6, r7}
 800917e:	e9d1 4700 	ldrd	r4, r7, [r1]
 8009182:	6803      	ldr	r3, [r0, #0]
 8009184:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009188:	6856      	ldr	r6, [r2, #4]
 800918a:	42a3      	cmp	r3, r4
 800918c:	d15d      	bne.n	800924a <arm_mat_add_f32+0xce>
 800918e:	6812      	ldr	r2, [r2, #0]
 8009190:	4293      	cmp	r3, r2
 8009192:	d15a      	bne.n	800924a <arm_mat_add_f32+0xce>
 8009194:	8803      	ldrh	r3, [r0, #0]
 8009196:	8844      	ldrh	r4, [r0, #2]
 8009198:	fb04 f403 	mul.w	r4, r4, r3
 800919c:	08a5      	lsrs	r5, r4, #2
 800919e:	d032      	beq.n	8009206 <arm_mat_add_f32+0x8a>
 80091a0:	f10c 0110 	add.w	r1, ip, #16
 80091a4:	f107 0210 	add.w	r2, r7, #16
 80091a8:	f106 0310 	add.w	r3, r6, #16
 80091ac:	4628      	mov	r0, r5
 80091ae:	ed12 7a04 	vldr	s14, [r2, #-16]
 80091b2:	ed51 7a04 	vldr	s15, [r1, #-16]
 80091b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091ba:	3801      	subs	r0, #1
 80091bc:	ed43 7a04 	vstr	s15, [r3, #-16]
 80091c0:	ed12 7a03 	vldr	s14, [r2, #-12]
 80091c4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80091c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091cc:	f101 0110 	add.w	r1, r1, #16
 80091d0:	ed43 7a03 	vstr	s15, [r3, #-12]
 80091d4:	ed12 7a02 	vldr	s14, [r2, #-8]
 80091d8:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 80091dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091e0:	f102 0210 	add.w	r2, r2, #16
 80091e4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80091e8:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 80091ec:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 80091f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091f4:	f103 0310 	add.w	r3, r3, #16
 80091f8:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 80091fc:	d1d7      	bne.n	80091ae <arm_mat_add_f32+0x32>
 80091fe:	012b      	lsls	r3, r5, #4
 8009200:	449c      	add	ip, r3
 8009202:	441f      	add	r7, r3
 8009204:	441e      	add	r6, r3
 8009206:	f014 0403 	ands.w	r4, r4, #3
 800920a:	d01b      	beq.n	8009244 <arm_mat_add_f32+0xc8>
 800920c:	edd7 7a00 	vldr	s15, [r7]
 8009210:	ed9c 7a00 	vldr	s14, [ip]
 8009214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009218:	3c01      	subs	r4, #1
 800921a:	edc6 7a00 	vstr	s15, [r6]
 800921e:	d011      	beq.n	8009244 <arm_mat_add_f32+0xc8>
 8009220:	eddc 7a01 	vldr	s15, [ip, #4]
 8009224:	ed97 7a01 	vldr	s14, [r7, #4]
 8009228:	ee77 7a87 	vadd.f32	s15, s15, s14
 800922c:	2c01      	cmp	r4, #1
 800922e:	edc6 7a01 	vstr	s15, [r6, #4]
 8009232:	d007      	beq.n	8009244 <arm_mat_add_f32+0xc8>
 8009234:	eddc 7a02 	vldr	s15, [ip, #8]
 8009238:	ed97 7a02 	vldr	s14, [r7, #8]
 800923c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009240:	edc6 7a02 	vstr	s15, [r6, #8]
 8009244:	2000      	movs	r0, #0
 8009246:	bcf0      	pop	{r4, r5, r6, r7}
 8009248:	4770      	bx	lr
 800924a:	f06f 0002 	mvn.w	r0, #2
 800924e:	e7fa      	b.n	8009246 <arm_mat_add_f32+0xca>

08009250 <cosf>:
 8009250:	ee10 3a10 	vmov	r3, s0
 8009254:	b507      	push	{r0, r1, r2, lr}
 8009256:	4a1e      	ldr	r2, [pc, #120]	@ (80092d0 <cosf+0x80>)
 8009258:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800925c:	4293      	cmp	r3, r2
 800925e:	d806      	bhi.n	800926e <cosf+0x1e>
 8009260:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80092d4 <cosf+0x84>
 8009264:	b003      	add	sp, #12
 8009266:	f85d eb04 	ldr.w	lr, [sp], #4
 800926a:	f000 b87b 	b.w	8009364 <__kernel_cosf>
 800926e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009272:	d304      	bcc.n	800927e <cosf+0x2e>
 8009274:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009278:	b003      	add	sp, #12
 800927a:	f85d fb04 	ldr.w	pc, [sp], #4
 800927e:	4668      	mov	r0, sp
 8009280:	f000 f910 	bl	80094a4 <__ieee754_rem_pio2f>
 8009284:	f000 0003 	and.w	r0, r0, #3
 8009288:	2801      	cmp	r0, #1
 800928a:	d009      	beq.n	80092a0 <cosf+0x50>
 800928c:	2802      	cmp	r0, #2
 800928e:	d010      	beq.n	80092b2 <cosf+0x62>
 8009290:	b9b0      	cbnz	r0, 80092c0 <cosf+0x70>
 8009292:	eddd 0a01 	vldr	s1, [sp, #4]
 8009296:	ed9d 0a00 	vldr	s0, [sp]
 800929a:	f000 f863 	bl	8009364 <__kernel_cosf>
 800929e:	e7eb      	b.n	8009278 <cosf+0x28>
 80092a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092a4:	ed9d 0a00 	vldr	s0, [sp]
 80092a8:	f000 f8b4 	bl	8009414 <__kernel_sinf>
 80092ac:	eeb1 0a40 	vneg.f32	s0, s0
 80092b0:	e7e2      	b.n	8009278 <cosf+0x28>
 80092b2:	eddd 0a01 	vldr	s1, [sp, #4]
 80092b6:	ed9d 0a00 	vldr	s0, [sp]
 80092ba:	f000 f853 	bl	8009364 <__kernel_cosf>
 80092be:	e7f5      	b.n	80092ac <cosf+0x5c>
 80092c0:	eddd 0a01 	vldr	s1, [sp, #4]
 80092c4:	ed9d 0a00 	vldr	s0, [sp]
 80092c8:	2001      	movs	r0, #1
 80092ca:	f000 f8a3 	bl	8009414 <__kernel_sinf>
 80092ce:	e7d3      	b.n	8009278 <cosf+0x28>
 80092d0:	3f490fd8 	.word	0x3f490fd8
 80092d4:	00000000 	.word	0x00000000

080092d8 <sinf>:
 80092d8:	ee10 3a10 	vmov	r3, s0
 80092dc:	b507      	push	{r0, r1, r2, lr}
 80092de:	4a1f      	ldr	r2, [pc, #124]	@ (800935c <sinf+0x84>)
 80092e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d807      	bhi.n	80092f8 <sinf+0x20>
 80092e8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009360 <sinf+0x88>
 80092ec:	2000      	movs	r0, #0
 80092ee:	b003      	add	sp, #12
 80092f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f4:	f000 b88e 	b.w	8009414 <__kernel_sinf>
 80092f8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80092fc:	d304      	bcc.n	8009308 <sinf+0x30>
 80092fe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009302:	b003      	add	sp, #12
 8009304:	f85d fb04 	ldr.w	pc, [sp], #4
 8009308:	4668      	mov	r0, sp
 800930a:	f000 f8cb 	bl	80094a4 <__ieee754_rem_pio2f>
 800930e:	f000 0003 	and.w	r0, r0, #3
 8009312:	2801      	cmp	r0, #1
 8009314:	d00a      	beq.n	800932c <sinf+0x54>
 8009316:	2802      	cmp	r0, #2
 8009318:	d00f      	beq.n	800933a <sinf+0x62>
 800931a:	b9c0      	cbnz	r0, 800934e <sinf+0x76>
 800931c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009320:	ed9d 0a00 	vldr	s0, [sp]
 8009324:	2001      	movs	r0, #1
 8009326:	f000 f875 	bl	8009414 <__kernel_sinf>
 800932a:	e7ea      	b.n	8009302 <sinf+0x2a>
 800932c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009330:	ed9d 0a00 	vldr	s0, [sp]
 8009334:	f000 f816 	bl	8009364 <__kernel_cosf>
 8009338:	e7e3      	b.n	8009302 <sinf+0x2a>
 800933a:	eddd 0a01 	vldr	s1, [sp, #4]
 800933e:	ed9d 0a00 	vldr	s0, [sp]
 8009342:	2001      	movs	r0, #1
 8009344:	f000 f866 	bl	8009414 <__kernel_sinf>
 8009348:	eeb1 0a40 	vneg.f32	s0, s0
 800934c:	e7d9      	b.n	8009302 <sinf+0x2a>
 800934e:	eddd 0a01 	vldr	s1, [sp, #4]
 8009352:	ed9d 0a00 	vldr	s0, [sp]
 8009356:	f000 f805 	bl	8009364 <__kernel_cosf>
 800935a:	e7f5      	b.n	8009348 <sinf+0x70>
 800935c:	3f490fd8 	.word	0x3f490fd8
 8009360:	00000000 	.word	0x00000000

08009364 <__kernel_cosf>:
 8009364:	ee10 3a10 	vmov	r3, s0
 8009368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800936c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009370:	eef0 6a40 	vmov.f32	s13, s0
 8009374:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009378:	d204      	bcs.n	8009384 <__kernel_cosf+0x20>
 800937a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800937e:	ee17 2a90 	vmov	r2, s15
 8009382:	b342      	cbz	r2, 80093d6 <__kernel_cosf+0x72>
 8009384:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009388:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80093f4 <__kernel_cosf+0x90>
 800938c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80093f8 <__kernel_cosf+0x94>
 8009390:	4a1a      	ldr	r2, [pc, #104]	@ (80093fc <__kernel_cosf+0x98>)
 8009392:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009396:	4293      	cmp	r3, r2
 8009398:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009400 <__kernel_cosf+0x9c>
 800939c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80093a0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009404 <__kernel_cosf+0xa0>
 80093a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80093a8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009408 <__kernel_cosf+0xa4>
 80093ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80093b0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800940c <__kernel_cosf+0xa8>
 80093b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80093b8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80093bc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80093c0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80093c4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80093c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093cc:	d804      	bhi.n	80093d8 <__kernel_cosf+0x74>
 80093ce:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80093d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80093d6:	4770      	bx	lr
 80093d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009410 <__kernel_cosf+0xac>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	bf9a      	itte	ls
 80093de:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80093e2:	ee07 3a10 	vmovls	s14, r3
 80093e6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80093ea:	ee30 0a47 	vsub.f32	s0, s0, s14
 80093ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093f2:	e7ec      	b.n	80093ce <__kernel_cosf+0x6a>
 80093f4:	ad47d74e 	.word	0xad47d74e
 80093f8:	310f74f6 	.word	0x310f74f6
 80093fc:	3e999999 	.word	0x3e999999
 8009400:	b493f27c 	.word	0xb493f27c
 8009404:	37d00d01 	.word	0x37d00d01
 8009408:	bab60b61 	.word	0xbab60b61
 800940c:	3d2aaaab 	.word	0x3d2aaaab
 8009410:	3f480000 	.word	0x3f480000

08009414 <__kernel_sinf>:
 8009414:	ee10 3a10 	vmov	r3, s0
 8009418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800941c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009420:	d204      	bcs.n	800942c <__kernel_sinf+0x18>
 8009422:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009426:	ee17 3a90 	vmov	r3, s15
 800942a:	b35b      	cbz	r3, 8009484 <__kernel_sinf+0x70>
 800942c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009430:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009488 <__kernel_sinf+0x74>
 8009434:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800948c <__kernel_sinf+0x78>
 8009438:	eea7 6a27 	vfma.f32	s12, s14, s15
 800943c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009490 <__kernel_sinf+0x7c>
 8009440:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009444:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009494 <__kernel_sinf+0x80>
 8009448:	eea7 6a87 	vfma.f32	s12, s15, s14
 800944c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009498 <__kernel_sinf+0x84>
 8009450:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009454:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009458:	b930      	cbnz	r0, 8009468 <__kernel_sinf+0x54>
 800945a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800949c <__kernel_sinf+0x88>
 800945e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009462:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009466:	4770      	bx	lr
 8009468:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800946c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009470:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009474:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009478:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80094a0 <__kernel_sinf+0x8c>
 800947c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009480:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	2f2ec9d3 	.word	0x2f2ec9d3
 800948c:	b2d72f34 	.word	0xb2d72f34
 8009490:	3638ef1b 	.word	0x3638ef1b
 8009494:	b9500d01 	.word	0xb9500d01
 8009498:	3c088889 	.word	0x3c088889
 800949c:	be2aaaab 	.word	0xbe2aaaab
 80094a0:	3e2aaaab 	.word	0x3e2aaaab

080094a4 <__ieee754_rem_pio2f>:
 80094a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094a6:	ee10 6a10 	vmov	r6, s0
 80094aa:	4b88      	ldr	r3, [pc, #544]	@ (80096cc <__ieee754_rem_pio2f+0x228>)
 80094ac:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80094b0:	429d      	cmp	r5, r3
 80094b2:	b087      	sub	sp, #28
 80094b4:	4604      	mov	r4, r0
 80094b6:	d805      	bhi.n	80094c4 <__ieee754_rem_pio2f+0x20>
 80094b8:	2300      	movs	r3, #0
 80094ba:	ed80 0a00 	vstr	s0, [r0]
 80094be:	6043      	str	r3, [r0, #4]
 80094c0:	2000      	movs	r0, #0
 80094c2:	e022      	b.n	800950a <__ieee754_rem_pio2f+0x66>
 80094c4:	4b82      	ldr	r3, [pc, #520]	@ (80096d0 <__ieee754_rem_pio2f+0x22c>)
 80094c6:	429d      	cmp	r5, r3
 80094c8:	d83a      	bhi.n	8009540 <__ieee754_rem_pio2f+0x9c>
 80094ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80096d4 <__ieee754_rem_pio2f+0x230>
 80094d4:	4a80      	ldr	r2, [pc, #512]	@ (80096d8 <__ieee754_rem_pio2f+0x234>)
 80094d6:	f023 030f 	bic.w	r3, r3, #15
 80094da:	dd18      	ble.n	800950e <__ieee754_rem_pio2f+0x6a>
 80094dc:	4293      	cmp	r3, r2
 80094de:	ee70 7a47 	vsub.f32	s15, s0, s14
 80094e2:	bf09      	itett	eq
 80094e4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80096dc <__ieee754_rem_pio2f+0x238>
 80094e8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80096e0 <__ieee754_rem_pio2f+0x23c>
 80094ec:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80096e4 <__ieee754_rem_pio2f+0x240>
 80094f0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80094f4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80094f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094fc:	ed80 7a00 	vstr	s14, [r0]
 8009500:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009504:	edc0 7a01 	vstr	s15, [r0, #4]
 8009508:	2001      	movs	r0, #1
 800950a:	b007      	add	sp, #28
 800950c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800950e:	4293      	cmp	r3, r2
 8009510:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009514:	bf09      	itett	eq
 8009516:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80096dc <__ieee754_rem_pio2f+0x238>
 800951a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80096e0 <__ieee754_rem_pio2f+0x23c>
 800951e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80096e4 <__ieee754_rem_pio2f+0x240>
 8009522:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009526:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800952a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800952e:	ed80 7a00 	vstr	s14, [r0]
 8009532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009536:	edc0 7a01 	vstr	s15, [r0, #4]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295
 800953e:	e7e4      	b.n	800950a <__ieee754_rem_pio2f+0x66>
 8009540:	4b69      	ldr	r3, [pc, #420]	@ (80096e8 <__ieee754_rem_pio2f+0x244>)
 8009542:	429d      	cmp	r5, r3
 8009544:	d873      	bhi.n	800962e <__ieee754_rem_pio2f+0x18a>
 8009546:	f000 f8dd 	bl	8009704 <fabsf>
 800954a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80096ec <__ieee754_rem_pio2f+0x248>
 800954e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009552:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800955a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800955e:	ee17 0a90 	vmov	r0, s15
 8009562:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80096d4 <__ieee754_rem_pio2f+0x230>
 8009566:	eea7 0a67 	vfms.f32	s0, s14, s15
 800956a:	281f      	cmp	r0, #31
 800956c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80096e0 <__ieee754_rem_pio2f+0x23c>
 8009570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009574:	eeb1 6a47 	vneg.f32	s12, s14
 8009578:	ee70 6a67 	vsub.f32	s13, s0, s15
 800957c:	ee16 1a90 	vmov	r1, s13
 8009580:	dc09      	bgt.n	8009596 <__ieee754_rem_pio2f+0xf2>
 8009582:	4a5b      	ldr	r2, [pc, #364]	@ (80096f0 <__ieee754_rem_pio2f+0x24c>)
 8009584:	1e47      	subs	r7, r0, #1
 8009586:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800958a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800958e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009592:	4293      	cmp	r3, r2
 8009594:	d107      	bne.n	80095a6 <__ieee754_rem_pio2f+0x102>
 8009596:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800959a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800959e:	2a08      	cmp	r2, #8
 80095a0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80095a4:	dc14      	bgt.n	80095d0 <__ieee754_rem_pio2f+0x12c>
 80095a6:	6021      	str	r1, [r4, #0]
 80095a8:	ed94 7a00 	vldr	s14, [r4]
 80095ac:	ee30 0a47 	vsub.f32	s0, s0, s14
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095b6:	ed84 0a01 	vstr	s0, [r4, #4]
 80095ba:	daa6      	bge.n	800950a <__ieee754_rem_pio2f+0x66>
 80095bc:	eeb1 7a47 	vneg.f32	s14, s14
 80095c0:	eeb1 0a40 	vneg.f32	s0, s0
 80095c4:	ed84 7a00 	vstr	s14, [r4]
 80095c8:	ed84 0a01 	vstr	s0, [r4, #4]
 80095cc:	4240      	negs	r0, r0
 80095ce:	e79c      	b.n	800950a <__ieee754_rem_pio2f+0x66>
 80095d0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80096dc <__ieee754_rem_pio2f+0x238>
 80095d4:	eef0 6a40 	vmov.f32	s13, s0
 80095d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80095dc:	ee70 7a66 	vsub.f32	s15, s0, s13
 80095e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80095e4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80096e4 <__ieee754_rem_pio2f+0x240>
 80095e8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80095ec:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80095f0:	ee15 2a90 	vmov	r2, s11
 80095f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80095f8:	1a5b      	subs	r3, r3, r1
 80095fa:	2b19      	cmp	r3, #25
 80095fc:	dc04      	bgt.n	8009608 <__ieee754_rem_pio2f+0x164>
 80095fe:	edc4 5a00 	vstr	s11, [r4]
 8009602:	eeb0 0a66 	vmov.f32	s0, s13
 8009606:	e7cf      	b.n	80095a8 <__ieee754_rem_pio2f+0x104>
 8009608:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80096f4 <__ieee754_rem_pio2f+0x250>
 800960c:	eeb0 0a66 	vmov.f32	s0, s13
 8009610:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009614:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009618:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80096f8 <__ieee754_rem_pio2f+0x254>
 800961c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009620:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009624:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009628:	ed84 7a00 	vstr	s14, [r4]
 800962c:	e7bc      	b.n	80095a8 <__ieee754_rem_pio2f+0x104>
 800962e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009632:	d306      	bcc.n	8009642 <__ieee754_rem_pio2f+0x19e>
 8009634:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009638:	edc0 7a01 	vstr	s15, [r0, #4]
 800963c:	edc0 7a00 	vstr	s15, [r0]
 8009640:	e73e      	b.n	80094c0 <__ieee754_rem_pio2f+0x1c>
 8009642:	15ea      	asrs	r2, r5, #23
 8009644:	3a86      	subs	r2, #134	@ 0x86
 8009646:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009652:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80096fc <__ieee754_rem_pio2f+0x258>
 8009656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800965a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800965e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009662:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009666:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800966a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800966e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009672:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009676:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800967a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800967e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009682:	edcd 7a05 	vstr	s15, [sp, #20]
 8009686:	d11e      	bne.n	80096c6 <__ieee754_rem_pio2f+0x222>
 8009688:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800968c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009690:	bf0c      	ite	eq
 8009692:	2301      	moveq	r3, #1
 8009694:	2302      	movne	r3, #2
 8009696:	491a      	ldr	r1, [pc, #104]	@ (8009700 <__ieee754_rem_pio2f+0x25c>)
 8009698:	9101      	str	r1, [sp, #4]
 800969a:	2102      	movs	r1, #2
 800969c:	9100      	str	r1, [sp, #0]
 800969e:	a803      	add	r0, sp, #12
 80096a0:	4621      	mov	r1, r4
 80096a2:	f000 f837 	bl	8009714 <__kernel_rem_pio2f>
 80096a6:	2e00      	cmp	r6, #0
 80096a8:	f6bf af2f 	bge.w	800950a <__ieee754_rem_pio2f+0x66>
 80096ac:	edd4 7a00 	vldr	s15, [r4]
 80096b0:	eef1 7a67 	vneg.f32	s15, s15
 80096b4:	edc4 7a00 	vstr	s15, [r4]
 80096b8:	edd4 7a01 	vldr	s15, [r4, #4]
 80096bc:	eef1 7a67 	vneg.f32	s15, s15
 80096c0:	edc4 7a01 	vstr	s15, [r4, #4]
 80096c4:	e782      	b.n	80095cc <__ieee754_rem_pio2f+0x128>
 80096c6:	2303      	movs	r3, #3
 80096c8:	e7e5      	b.n	8009696 <__ieee754_rem_pio2f+0x1f2>
 80096ca:	bf00      	nop
 80096cc:	3f490fd8 	.word	0x3f490fd8
 80096d0:	4016cbe3 	.word	0x4016cbe3
 80096d4:	3fc90f80 	.word	0x3fc90f80
 80096d8:	3fc90fd0 	.word	0x3fc90fd0
 80096dc:	37354400 	.word	0x37354400
 80096e0:	37354443 	.word	0x37354443
 80096e4:	2e85a308 	.word	0x2e85a308
 80096e8:	43490f80 	.word	0x43490f80
 80096ec:	3f22f984 	.word	0x3f22f984
 80096f0:	0800ea38 	.word	0x0800ea38
 80096f4:	2e85a300 	.word	0x2e85a300
 80096f8:	248d3132 	.word	0x248d3132
 80096fc:	43800000 	.word	0x43800000
 8009700:	0800eab8 	.word	0x0800eab8

08009704 <fabsf>:
 8009704:	ee10 3a10 	vmov	r3, s0
 8009708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800970c:	ee00 3a10 	vmov	s0, r3
 8009710:	4770      	bx	lr
	...

08009714 <__kernel_rem_pio2f>:
 8009714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009718:	ed2d 8b04 	vpush	{d8-d9}
 800971c:	b0d9      	sub	sp, #356	@ 0x164
 800971e:	4690      	mov	r8, r2
 8009720:	9001      	str	r0, [sp, #4]
 8009722:	4ab9      	ldr	r2, [pc, #740]	@ (8009a08 <__kernel_rem_pio2f+0x2f4>)
 8009724:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009726:	f118 0f04 	cmn.w	r8, #4
 800972a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800972e:	460f      	mov	r7, r1
 8009730:	f103 3bff 	add.w	fp, r3, #4294967295
 8009734:	db27      	blt.n	8009786 <__kernel_rem_pio2f+0x72>
 8009736:	f1b8 0203 	subs.w	r2, r8, #3
 800973a:	bf48      	it	mi
 800973c:	f108 0204 	addmi.w	r2, r8, #4
 8009740:	10d2      	asrs	r2, r2, #3
 8009742:	1c55      	adds	r5, r2, #1
 8009744:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009746:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 800974a:	00e8      	lsls	r0, r5, #3
 800974c:	eba2 060b 	sub.w	r6, r2, fp
 8009750:	9002      	str	r0, [sp, #8]
 8009752:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009756:	eb0a 0c0b 	add.w	ip, sl, fp
 800975a:	ac1c      	add	r4, sp, #112	@ 0x70
 800975c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009760:	2000      	movs	r0, #0
 8009762:	4560      	cmp	r0, ip
 8009764:	dd11      	ble.n	800978a <__kernel_rem_pio2f+0x76>
 8009766:	a91c      	add	r1, sp, #112	@ 0x70
 8009768:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800976c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009770:	f04f 0c00 	mov.w	ip, #0
 8009774:	45d4      	cmp	ip, sl
 8009776:	dc27      	bgt.n	80097c8 <__kernel_rem_pio2f+0xb4>
 8009778:	f8dd e004 	ldr.w	lr, [sp, #4]
 800977c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 8009780:	4606      	mov	r6, r0
 8009782:	2400      	movs	r4, #0
 8009784:	e016      	b.n	80097b4 <__kernel_rem_pio2f+0xa0>
 8009786:	2200      	movs	r2, #0
 8009788:	e7db      	b.n	8009742 <__kernel_rem_pio2f+0x2e>
 800978a:	42c6      	cmn	r6, r0
 800978c:	bf5d      	ittte	pl
 800978e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009792:	ee07 1a90 	vmovpl	s15, r1
 8009796:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800979a:	eef0 7a47 	vmovmi.f32	s15, s14
 800979e:	ece4 7a01 	vstmia	r4!, {s15}
 80097a2:	3001      	adds	r0, #1
 80097a4:	e7dd      	b.n	8009762 <__kernel_rem_pio2f+0x4e>
 80097a6:	ecfe 6a01 	vldmia	lr!, {s13}
 80097aa:	ed96 7a00 	vldr	s14, [r6]
 80097ae:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097b2:	3401      	adds	r4, #1
 80097b4:	455c      	cmp	r4, fp
 80097b6:	f1a6 0604 	sub.w	r6, r6, #4
 80097ba:	ddf4      	ble.n	80097a6 <__kernel_rem_pio2f+0x92>
 80097bc:	ece9 7a01 	vstmia	r9!, {s15}
 80097c0:	f10c 0c01 	add.w	ip, ip, #1
 80097c4:	3004      	adds	r0, #4
 80097c6:	e7d5      	b.n	8009774 <__kernel_rem_pio2f+0x60>
 80097c8:	a908      	add	r1, sp, #32
 80097ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ce:	9104      	str	r1, [sp, #16]
 80097d0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80097d2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8009a14 <__kernel_rem_pio2f+0x300>
 80097d6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8009a10 <__kernel_rem_pio2f+0x2fc>
 80097da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80097de:	9203      	str	r2, [sp, #12]
 80097e0:	4654      	mov	r4, sl
 80097e2:	00a2      	lsls	r2, r4, #2
 80097e4:	9205      	str	r2, [sp, #20]
 80097e6:	aa58      	add	r2, sp, #352	@ 0x160
 80097e8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80097ec:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80097f0:	a944      	add	r1, sp, #272	@ 0x110
 80097f2:	aa08      	add	r2, sp, #32
 80097f4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80097f8:	4694      	mov	ip, r2
 80097fa:	4626      	mov	r6, r4
 80097fc:	2e00      	cmp	r6, #0
 80097fe:	f1a0 0004 	sub.w	r0, r0, #4
 8009802:	dc4c      	bgt.n	800989e <__kernel_rem_pio2f+0x18a>
 8009804:	4628      	mov	r0, r5
 8009806:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800980a:	f000 f9f5 	bl	8009bf8 <scalbnf>
 800980e:	eeb0 8a40 	vmov.f32	s16, s0
 8009812:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8009816:	ee28 0a00 	vmul.f32	s0, s16, s0
 800981a:	f000 fa53 	bl	8009cc4 <floorf>
 800981e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8009822:	eea0 8a67 	vfms.f32	s16, s0, s15
 8009826:	2d00      	cmp	r5, #0
 8009828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800982c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009830:	ee17 9a90 	vmov	r9, s15
 8009834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009838:	ee38 8a67 	vsub.f32	s16, s16, s15
 800983c:	dd41      	ble.n	80098c2 <__kernel_rem_pio2f+0x1ae>
 800983e:	f104 3cff 	add.w	ip, r4, #4294967295
 8009842:	a908      	add	r1, sp, #32
 8009844:	f1c5 0e08 	rsb	lr, r5, #8
 8009848:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800984c:	fa46 f00e 	asr.w	r0, r6, lr
 8009850:	4481      	add	r9, r0
 8009852:	fa00 f00e 	lsl.w	r0, r0, lr
 8009856:	1a36      	subs	r6, r6, r0
 8009858:	f1c5 0007 	rsb	r0, r5, #7
 800985c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8009860:	4106      	asrs	r6, r0
 8009862:	2e00      	cmp	r6, #0
 8009864:	dd3c      	ble.n	80098e0 <__kernel_rem_pio2f+0x1cc>
 8009866:	f04f 0e00 	mov.w	lr, #0
 800986a:	f109 0901 	add.w	r9, r9, #1
 800986e:	4670      	mov	r0, lr
 8009870:	4574      	cmp	r4, lr
 8009872:	dc68      	bgt.n	8009946 <__kernel_rem_pio2f+0x232>
 8009874:	2d00      	cmp	r5, #0
 8009876:	dd03      	ble.n	8009880 <__kernel_rem_pio2f+0x16c>
 8009878:	2d01      	cmp	r5, #1
 800987a:	d074      	beq.n	8009966 <__kernel_rem_pio2f+0x252>
 800987c:	2d02      	cmp	r5, #2
 800987e:	d07d      	beq.n	800997c <__kernel_rem_pio2f+0x268>
 8009880:	2e02      	cmp	r6, #2
 8009882:	d12d      	bne.n	80098e0 <__kernel_rem_pio2f+0x1cc>
 8009884:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009888:	ee30 8a48 	vsub.f32	s16, s0, s16
 800988c:	b340      	cbz	r0, 80098e0 <__kernel_rem_pio2f+0x1cc>
 800988e:	4628      	mov	r0, r5
 8009890:	9306      	str	r3, [sp, #24]
 8009892:	f000 f9b1 	bl	8009bf8 <scalbnf>
 8009896:	9b06      	ldr	r3, [sp, #24]
 8009898:	ee38 8a40 	vsub.f32	s16, s16, s0
 800989c:	e020      	b.n	80098e0 <__kernel_rem_pio2f+0x1cc>
 800989e:	ee60 7a28 	vmul.f32	s15, s0, s17
 80098a2:	3e01      	subs	r6, #1
 80098a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80098a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ac:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80098b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80098b4:	ecac 0a01 	vstmia	ip!, {s0}
 80098b8:	ed90 0a00 	vldr	s0, [r0]
 80098bc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80098c0:	e79c      	b.n	80097fc <__kernel_rem_pio2f+0xe8>
 80098c2:	d105      	bne.n	80098d0 <__kernel_rem_pio2f+0x1bc>
 80098c4:	1e60      	subs	r0, r4, #1
 80098c6:	a908      	add	r1, sp, #32
 80098c8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80098cc:	11f6      	asrs	r6, r6, #7
 80098ce:	e7c8      	b.n	8009862 <__kernel_rem_pio2f+0x14e>
 80098d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80098d4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80098d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098dc:	da31      	bge.n	8009942 <__kernel_rem_pio2f+0x22e>
 80098de:	2600      	movs	r6, #0
 80098e0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80098e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098e8:	f040 8098 	bne.w	8009a1c <__kernel_rem_pio2f+0x308>
 80098ec:	1e60      	subs	r0, r4, #1
 80098ee:	2200      	movs	r2, #0
 80098f0:	4550      	cmp	r0, sl
 80098f2:	da4b      	bge.n	800998c <__kernel_rem_pio2f+0x278>
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	d065      	beq.n	80099c4 <__kernel_rem_pio2f+0x2b0>
 80098f8:	3c01      	subs	r4, #1
 80098fa:	ab08      	add	r3, sp, #32
 80098fc:	3d08      	subs	r5, #8
 80098fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f8      	beq.n	80098f8 <__kernel_rem_pio2f+0x1e4>
 8009906:	4628      	mov	r0, r5
 8009908:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800990c:	f000 f974 	bl	8009bf8 <scalbnf>
 8009910:	1c63      	adds	r3, r4, #1
 8009912:	aa44      	add	r2, sp, #272	@ 0x110
 8009914:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009a14 <__kernel_rem_pio2f+0x300>
 8009918:	0099      	lsls	r1, r3, #2
 800991a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800991e:	4623      	mov	r3, r4
 8009920:	2b00      	cmp	r3, #0
 8009922:	f280 80a9 	bge.w	8009a78 <__kernel_rem_pio2f+0x364>
 8009926:	4623      	mov	r3, r4
 8009928:	2b00      	cmp	r3, #0
 800992a:	f2c0 80c7 	blt.w	8009abc <__kernel_rem_pio2f+0x3a8>
 800992e:	aa44      	add	r2, sp, #272	@ 0x110
 8009930:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8009934:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8009a0c <__kernel_rem_pio2f+0x2f8>
 8009938:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 800993c:	2000      	movs	r0, #0
 800993e:	1ae2      	subs	r2, r4, r3
 8009940:	e0b1      	b.n	8009aa6 <__kernel_rem_pio2f+0x392>
 8009942:	2602      	movs	r6, #2
 8009944:	e78f      	b.n	8009866 <__kernel_rem_pio2f+0x152>
 8009946:	f852 1b04 	ldr.w	r1, [r2], #4
 800994a:	b948      	cbnz	r0, 8009960 <__kernel_rem_pio2f+0x24c>
 800994c:	b121      	cbz	r1, 8009958 <__kernel_rem_pio2f+0x244>
 800994e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8009952:	f842 1c04 	str.w	r1, [r2, #-4]
 8009956:	2101      	movs	r1, #1
 8009958:	f10e 0e01 	add.w	lr, lr, #1
 800995c:	4608      	mov	r0, r1
 800995e:	e787      	b.n	8009870 <__kernel_rem_pio2f+0x15c>
 8009960:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8009964:	e7f5      	b.n	8009952 <__kernel_rem_pio2f+0x23e>
 8009966:	f104 3cff 	add.w	ip, r4, #4294967295
 800996a:	aa08      	add	r2, sp, #32
 800996c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009970:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009974:	a908      	add	r1, sp, #32
 8009976:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800997a:	e781      	b.n	8009880 <__kernel_rem_pio2f+0x16c>
 800997c:	f104 3cff 	add.w	ip, r4, #4294967295
 8009980:	aa08      	add	r2, sp, #32
 8009982:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8009986:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800998a:	e7f3      	b.n	8009974 <__kernel_rem_pio2f+0x260>
 800998c:	a908      	add	r1, sp, #32
 800998e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009992:	3801      	subs	r0, #1
 8009994:	430a      	orrs	r2, r1
 8009996:	e7ab      	b.n	80098f0 <__kernel_rem_pio2f+0x1dc>
 8009998:	3201      	adds	r2, #1
 800999a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800999e:	2e00      	cmp	r6, #0
 80099a0:	d0fa      	beq.n	8009998 <__kernel_rem_pio2f+0x284>
 80099a2:	9905      	ldr	r1, [sp, #20]
 80099a4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80099a8:	eb0d 0001 	add.w	r0, sp, r1
 80099ac:	18e6      	adds	r6, r4, r3
 80099ae:	a91c      	add	r1, sp, #112	@ 0x70
 80099b0:	f104 0c01 	add.w	ip, r4, #1
 80099b4:	384c      	subs	r0, #76	@ 0x4c
 80099b6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80099ba:	4422      	add	r2, r4
 80099bc:	4562      	cmp	r2, ip
 80099be:	da04      	bge.n	80099ca <__kernel_rem_pio2f+0x2b6>
 80099c0:	4614      	mov	r4, r2
 80099c2:	e70e      	b.n	80097e2 <__kernel_rem_pio2f+0xce>
 80099c4:	9804      	ldr	r0, [sp, #16]
 80099c6:	2201      	movs	r2, #1
 80099c8:	e7e7      	b.n	800999a <__kernel_rem_pio2f+0x286>
 80099ca:	9903      	ldr	r1, [sp, #12]
 80099cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80099d0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80099d4:	9105      	str	r1, [sp, #20]
 80099d6:	ee07 1a90 	vmov	s15, r1
 80099da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099de:	2400      	movs	r4, #0
 80099e0:	ece6 7a01 	vstmia	r6!, {s15}
 80099e4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 80099e8:	46b1      	mov	r9, r6
 80099ea:	455c      	cmp	r4, fp
 80099ec:	dd04      	ble.n	80099f8 <__kernel_rem_pio2f+0x2e4>
 80099ee:	ece0 7a01 	vstmia	r0!, {s15}
 80099f2:	f10c 0c01 	add.w	ip, ip, #1
 80099f6:	e7e1      	b.n	80099bc <__kernel_rem_pio2f+0x2a8>
 80099f8:	ecfe 6a01 	vldmia	lr!, {s13}
 80099fc:	ed39 7a01 	vldmdb	r9!, {s14}
 8009a00:	3401      	adds	r4, #1
 8009a02:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009a06:	e7f0      	b.n	80099ea <__kernel_rem_pio2f+0x2d6>
 8009a08:	0800edfc 	.word	0x0800edfc
 8009a0c:	0800edd0 	.word	0x0800edd0
 8009a10:	43800000 	.word	0x43800000
 8009a14:	3b800000 	.word	0x3b800000
 8009a18:	00000000 	.word	0x00000000
 8009a1c:	9b02      	ldr	r3, [sp, #8]
 8009a1e:	eeb0 0a48 	vmov.f32	s0, s16
 8009a22:	eba3 0008 	sub.w	r0, r3, r8
 8009a26:	f000 f8e7 	bl	8009bf8 <scalbnf>
 8009a2a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009a10 <__kernel_rem_pio2f+0x2fc>
 8009a2e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a36:	db19      	blt.n	8009a6c <__kernel_rem_pio2f+0x358>
 8009a38:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009a14 <__kernel_rem_pio2f+0x300>
 8009a3c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009a40:	aa08      	add	r2, sp, #32
 8009a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a46:	3508      	adds	r5, #8
 8009a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a4c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a58:	ee10 3a10 	vmov	r3, s0
 8009a5c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009a60:	ee17 3a90 	vmov	r3, s15
 8009a64:	3401      	adds	r4, #1
 8009a66:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009a6a:	e74c      	b.n	8009906 <__kernel_rem_pio2f+0x1f2>
 8009a6c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009a70:	aa08      	add	r2, sp, #32
 8009a72:	ee10 3a10 	vmov	r3, s0
 8009a76:	e7f6      	b.n	8009a66 <__kernel_rem_pio2f+0x352>
 8009a78:	a808      	add	r0, sp, #32
 8009a7a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8009a7e:	9001      	str	r0, [sp, #4]
 8009a80:	ee07 0a90 	vmov	s15, r0
 8009a84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009a8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009a92:	ed62 7a01 	vstmdb	r2!, {s15}
 8009a96:	e743      	b.n	8009920 <__kernel_rem_pio2f+0x20c>
 8009a98:	ecfc 6a01 	vldmia	ip!, {s13}
 8009a9c:	ecb5 7a01 	vldmia	r5!, {s14}
 8009aa0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	4550      	cmp	r0, sl
 8009aa8:	dc01      	bgt.n	8009aae <__kernel_rem_pio2f+0x39a>
 8009aaa:	4282      	cmp	r2, r0
 8009aac:	daf4      	bge.n	8009a98 <__kernel_rem_pio2f+0x384>
 8009aae:	a858      	add	r0, sp, #352	@ 0x160
 8009ab0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009ab4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	e735      	b.n	8009928 <__kernel_rem_pio2f+0x214>
 8009abc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	dc09      	bgt.n	8009ad6 <__kernel_rem_pio2f+0x3c2>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dc2b      	bgt.n	8009b1e <__kernel_rem_pio2f+0x40a>
 8009ac6:	d044      	beq.n	8009b52 <__kernel_rem_pio2f+0x43e>
 8009ac8:	f009 0007 	and.w	r0, r9, #7
 8009acc:	b059      	add	sp, #356	@ 0x164
 8009ace:	ecbd 8b04 	vpop	{d8-d9}
 8009ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d1f5      	bne.n	8009ac8 <__kernel_rem_pio2f+0x3b4>
 8009adc:	aa30      	add	r2, sp, #192	@ 0xc0
 8009ade:	1f0b      	subs	r3, r1, #4
 8009ae0:	4413      	add	r3, r2
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	f1a2 0204 	sub.w	r2, r2, #4
 8009aec:	dc52      	bgt.n	8009b94 <__kernel_rem_pio2f+0x480>
 8009aee:	4622      	mov	r2, r4
 8009af0:	2a01      	cmp	r2, #1
 8009af2:	f1a3 0304 	sub.w	r3, r3, #4
 8009af6:	dc5d      	bgt.n	8009bb4 <__kernel_rem_pio2f+0x4a0>
 8009af8:	ab30      	add	r3, sp, #192	@ 0xc0
 8009afa:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 8009afe:	440b      	add	r3, r1
 8009b00:	2c01      	cmp	r4, #1
 8009b02:	dc67      	bgt.n	8009bd4 <__kernel_rem_pio2f+0x4c0>
 8009b04:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009b08:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009b0c:	2e00      	cmp	r6, #0
 8009b0e:	d167      	bne.n	8009be0 <__kernel_rem_pio2f+0x4cc>
 8009b10:	edc7 6a00 	vstr	s13, [r7]
 8009b14:	ed87 7a01 	vstr	s14, [r7, #4]
 8009b18:	edc7 7a02 	vstr	s15, [r7, #8]
 8009b1c:	e7d4      	b.n	8009ac8 <__kernel_rem_pio2f+0x3b4>
 8009b1e:	ab30      	add	r3, sp, #192	@ 0xc0
 8009b20:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 8009b24:	440b      	add	r3, r1
 8009b26:	4622      	mov	r2, r4
 8009b28:	2a00      	cmp	r2, #0
 8009b2a:	da24      	bge.n	8009b76 <__kernel_rem_pio2f+0x462>
 8009b2c:	b34e      	cbz	r6, 8009b82 <__kernel_rem_pio2f+0x46e>
 8009b2e:	eef1 7a47 	vneg.f32	s15, s14
 8009b32:	edc7 7a00 	vstr	s15, [r7]
 8009b36:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b3e:	aa31      	add	r2, sp, #196	@ 0xc4
 8009b40:	2301      	movs	r3, #1
 8009b42:	429c      	cmp	r4, r3
 8009b44:	da20      	bge.n	8009b88 <__kernel_rem_pio2f+0x474>
 8009b46:	b10e      	cbz	r6, 8009b4c <__kernel_rem_pio2f+0x438>
 8009b48:	eef1 7a67 	vneg.f32	s15, s15
 8009b4c:	edc7 7a01 	vstr	s15, [r7, #4]
 8009b50:	e7ba      	b.n	8009ac8 <__kernel_rem_pio2f+0x3b4>
 8009b52:	ab30      	add	r3, sp, #192	@ 0xc0
 8009b54:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8009a18 <__kernel_rem_pio2f+0x304>
 8009b58:	440b      	add	r3, r1
 8009b5a:	2c00      	cmp	r4, #0
 8009b5c:	da05      	bge.n	8009b6a <__kernel_rem_pio2f+0x456>
 8009b5e:	b10e      	cbz	r6, 8009b64 <__kernel_rem_pio2f+0x450>
 8009b60:	eef1 7a67 	vneg.f32	s15, s15
 8009b64:	edc7 7a00 	vstr	s15, [r7]
 8009b68:	e7ae      	b.n	8009ac8 <__kernel_rem_pio2f+0x3b4>
 8009b6a:	ed33 7a01 	vldmdb	r3!, {s14}
 8009b6e:	3c01      	subs	r4, #1
 8009b70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b74:	e7f1      	b.n	8009b5a <__kernel_rem_pio2f+0x446>
 8009b76:	ed73 7a01 	vldmdb	r3!, {s15}
 8009b7a:	3a01      	subs	r2, #1
 8009b7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b80:	e7d2      	b.n	8009b28 <__kernel_rem_pio2f+0x414>
 8009b82:	eef0 7a47 	vmov.f32	s15, s14
 8009b86:	e7d4      	b.n	8009b32 <__kernel_rem_pio2f+0x41e>
 8009b88:	ecb2 7a01 	vldmia	r2!, {s14}
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009b92:	e7d6      	b.n	8009b42 <__kernel_rem_pio2f+0x42e>
 8009b94:	edd2 7a00 	vldr	s15, [r2]
 8009b98:	edd2 6a01 	vldr	s13, [r2, #4]
 8009b9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009ba0:	3801      	subs	r0, #1
 8009ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ba6:	ed82 7a00 	vstr	s14, [r2]
 8009baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bae:	edc2 7a01 	vstr	s15, [r2, #4]
 8009bb2:	e798      	b.n	8009ae6 <__kernel_rem_pio2f+0x3d2>
 8009bb4:	edd3 7a00 	vldr	s15, [r3]
 8009bb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8009bbc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009bc0:	3a01      	subs	r2, #1
 8009bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bc6:	ed83 7a00 	vstr	s14, [r3]
 8009bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bce:	edc3 7a01 	vstr	s15, [r3, #4]
 8009bd2:	e78d      	b.n	8009af0 <__kernel_rem_pio2f+0x3dc>
 8009bd4:	ed33 7a01 	vldmdb	r3!, {s14}
 8009bd8:	3c01      	subs	r4, #1
 8009bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009bde:	e78f      	b.n	8009b00 <__kernel_rem_pio2f+0x3ec>
 8009be0:	eef1 6a66 	vneg.f32	s13, s13
 8009be4:	eeb1 7a47 	vneg.f32	s14, s14
 8009be8:	edc7 6a00 	vstr	s13, [r7]
 8009bec:	ed87 7a01 	vstr	s14, [r7, #4]
 8009bf0:	eef1 7a67 	vneg.f32	s15, s15
 8009bf4:	e790      	b.n	8009b18 <__kernel_rem_pio2f+0x404>
 8009bf6:	bf00      	nop

08009bf8 <scalbnf>:
 8009bf8:	ee10 3a10 	vmov	r3, s0
 8009bfc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009c00:	d02b      	beq.n	8009c5a <scalbnf+0x62>
 8009c02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8009c06:	d302      	bcc.n	8009c0e <scalbnf+0x16>
 8009c08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c0c:	4770      	bx	lr
 8009c0e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8009c12:	d123      	bne.n	8009c5c <scalbnf+0x64>
 8009c14:	4b24      	ldr	r3, [pc, #144]	@ (8009ca8 <scalbnf+0xb0>)
 8009c16:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009cac <scalbnf+0xb4>
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009c20:	db17      	blt.n	8009c52 <scalbnf+0x5a>
 8009c22:	ee10 3a10 	vmov	r3, s0
 8009c26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009c2a:	3a19      	subs	r2, #25
 8009c2c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009c30:	4288      	cmp	r0, r1
 8009c32:	dd15      	ble.n	8009c60 <scalbnf+0x68>
 8009c34:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009cb0 <scalbnf+0xb8>
 8009c38:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8009cb4 <scalbnf+0xbc>
 8009c3c:	ee10 3a10 	vmov	r3, s0
 8009c40:	eeb0 7a67 	vmov.f32	s14, s15
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	bfb8      	it	lt
 8009c48:	eef0 7a66 	vmovlt.f32	s15, s13
 8009c4c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009c50:	4770      	bx	lr
 8009c52:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009cb8 <scalbnf+0xc0>
 8009c56:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009c5a:	4770      	bx	lr
 8009c5c:	0dd2      	lsrs	r2, r2, #23
 8009c5e:	e7e5      	b.n	8009c2c <scalbnf+0x34>
 8009c60:	4410      	add	r0, r2
 8009c62:	28fe      	cmp	r0, #254	@ 0xfe
 8009c64:	dce6      	bgt.n	8009c34 <scalbnf+0x3c>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	dd06      	ble.n	8009c78 <scalbnf+0x80>
 8009c6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c6e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009c72:	ee00 3a10 	vmov	s0, r3
 8009c76:	4770      	bx	lr
 8009c78:	f110 0f16 	cmn.w	r0, #22
 8009c7c:	da09      	bge.n	8009c92 <scalbnf+0x9a>
 8009c7e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009cb8 <scalbnf+0xc0>
 8009c82:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009cbc <scalbnf+0xc4>
 8009c86:	ee10 3a10 	vmov	r3, s0
 8009c8a:	eeb0 7a67 	vmov.f32	s14, s15
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	e7d9      	b.n	8009c46 <scalbnf+0x4e>
 8009c92:	3019      	adds	r0, #25
 8009c94:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009c98:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009c9c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009cc0 <scalbnf+0xc8>
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	e7d7      	b.n	8009c56 <scalbnf+0x5e>
 8009ca6:	bf00      	nop
 8009ca8:	ffff3cb0 	.word	0xffff3cb0
 8009cac:	4c000000 	.word	0x4c000000
 8009cb0:	7149f2ca 	.word	0x7149f2ca
 8009cb4:	f149f2ca 	.word	0xf149f2ca
 8009cb8:	0da24260 	.word	0x0da24260
 8009cbc:	8da24260 	.word	0x8da24260
 8009cc0:	33000000 	.word	0x33000000

08009cc4 <floorf>:
 8009cc4:	ee10 3a10 	vmov	r3, s0
 8009cc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009ccc:	3a7f      	subs	r2, #127	@ 0x7f
 8009cce:	2a16      	cmp	r2, #22
 8009cd0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009cd4:	dc2b      	bgt.n	8009d2e <floorf+0x6a>
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	da12      	bge.n	8009d00 <floorf+0x3c>
 8009cda:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009d40 <floorf+0x7c>
 8009cde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009ce2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cea:	dd06      	ble.n	8009cfa <floorf+0x36>
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	da24      	bge.n	8009d3a <floorf+0x76>
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	4b14      	ldr	r3, [pc, #80]	@ (8009d44 <floorf+0x80>)
 8009cf4:	bf08      	it	eq
 8009cf6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009cfa:	ee00 3a10 	vmov	s0, r3
 8009cfe:	4770      	bx	lr
 8009d00:	4911      	ldr	r1, [pc, #68]	@ (8009d48 <floorf+0x84>)
 8009d02:	4111      	asrs	r1, r2
 8009d04:	420b      	tst	r3, r1
 8009d06:	d0fa      	beq.n	8009cfe <floorf+0x3a>
 8009d08:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009d40 <floorf+0x7c>
 8009d0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d18:	ddef      	ble.n	8009cfa <floorf+0x36>
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bfbe      	ittt	lt
 8009d1e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009d22:	fa40 f202 	asrlt.w	r2, r0, r2
 8009d26:	189b      	addlt	r3, r3, r2
 8009d28:	ea23 0301 	bic.w	r3, r3, r1
 8009d2c:	e7e5      	b.n	8009cfa <floorf+0x36>
 8009d2e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009d32:	d3e4      	bcc.n	8009cfe <floorf+0x3a>
 8009d34:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d38:	4770      	bx	lr
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	e7dd      	b.n	8009cfa <floorf+0x36>
 8009d3e:	bf00      	nop
 8009d40:	7149f2ca 	.word	0x7149f2ca
 8009d44:	bf800000 	.word	0xbf800000
 8009d48:	007fffff 	.word	0x007fffff

08009d4c <sulp>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	460d      	mov	r5, r1
 8009d52:	ec45 4b10 	vmov	d0, r4, r5
 8009d56:	4616      	mov	r6, r2
 8009d58:	f003 ff0a 	bl	800db70 <__ulp>
 8009d5c:	ec51 0b10 	vmov	r0, r1, d0
 8009d60:	b17e      	cbz	r6, 8009d82 <sulp+0x36>
 8009d62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	dd09      	ble.n	8009d82 <sulp+0x36>
 8009d6e:	051b      	lsls	r3, r3, #20
 8009d70:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d74:	2400      	movs	r4, #0
 8009d76:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	f7f6 fc4b 	bl	8000618 <__aeabi_dmul>
 8009d82:	ec41 0b10 	vmov	d0, r0, r1
 8009d86:	bd70      	pop	{r4, r5, r6, pc}

08009d88 <_strtod_l>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	b09f      	sub	sp, #124	@ 0x7c
 8009d8e:	460c      	mov	r4, r1
 8009d90:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009d92:	2200      	movs	r2, #0
 8009d94:	921a      	str	r2, [sp, #104]	@ 0x68
 8009d96:	9005      	str	r0, [sp, #20]
 8009d98:	f04f 0a00 	mov.w	sl, #0
 8009d9c:	f04f 0b00 	mov.w	fp, #0
 8009da0:	460a      	mov	r2, r1
 8009da2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009da4:	7811      	ldrb	r1, [r2, #0]
 8009da6:	292b      	cmp	r1, #43	@ 0x2b
 8009da8:	d04a      	beq.n	8009e40 <_strtod_l+0xb8>
 8009daa:	d838      	bhi.n	8009e1e <_strtod_l+0x96>
 8009dac:	290d      	cmp	r1, #13
 8009dae:	d832      	bhi.n	8009e16 <_strtod_l+0x8e>
 8009db0:	2908      	cmp	r1, #8
 8009db2:	d832      	bhi.n	8009e1a <_strtod_l+0x92>
 8009db4:	2900      	cmp	r1, #0
 8009db6:	d03b      	beq.n	8009e30 <_strtod_l+0xa8>
 8009db8:	2200      	movs	r2, #0
 8009dba:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009dbc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009dbe:	782a      	ldrb	r2, [r5, #0]
 8009dc0:	2a30      	cmp	r2, #48	@ 0x30
 8009dc2:	f040 80b3 	bne.w	8009f2c <_strtod_l+0x1a4>
 8009dc6:	786a      	ldrb	r2, [r5, #1]
 8009dc8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dcc:	2a58      	cmp	r2, #88	@ 0x58
 8009dce:	d16e      	bne.n	8009eae <_strtod_l+0x126>
 8009dd0:	9302      	str	r3, [sp, #8]
 8009dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dd4:	9301      	str	r3, [sp, #4]
 8009dd6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	4a8e      	ldr	r2, [pc, #568]	@ (800a014 <_strtod_l+0x28c>)
 8009ddc:	9805      	ldr	r0, [sp, #20]
 8009dde:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009de0:	a919      	add	r1, sp, #100	@ 0x64
 8009de2:	f002 ffb7 	bl	800cd54 <__gethex>
 8009de6:	f010 060f 	ands.w	r6, r0, #15
 8009dea:	4604      	mov	r4, r0
 8009dec:	d005      	beq.n	8009dfa <_strtod_l+0x72>
 8009dee:	2e06      	cmp	r6, #6
 8009df0:	d128      	bne.n	8009e44 <_strtod_l+0xbc>
 8009df2:	3501      	adds	r5, #1
 8009df4:	2300      	movs	r3, #0
 8009df6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 858e 	bne.w	800a91e <_strtod_l+0xb96>
 8009e02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e04:	b1cb      	cbz	r3, 8009e3a <_strtod_l+0xb2>
 8009e06:	4652      	mov	r2, sl
 8009e08:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e0c:	ec43 2b10 	vmov	d0, r2, r3
 8009e10:	b01f      	add	sp, #124	@ 0x7c
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	2920      	cmp	r1, #32
 8009e18:	d1ce      	bne.n	8009db8 <_strtod_l+0x30>
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	e7c1      	b.n	8009da2 <_strtod_l+0x1a>
 8009e1e:	292d      	cmp	r1, #45	@ 0x2d
 8009e20:	d1ca      	bne.n	8009db8 <_strtod_l+0x30>
 8009e22:	2101      	movs	r1, #1
 8009e24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e26:	1c51      	adds	r1, r2, #1
 8009e28:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e2a:	7852      	ldrb	r2, [r2, #1]
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	d1c5      	bne.n	8009dbc <_strtod_l+0x34>
 8009e30:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e32:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 8570 	bne.w	800a91a <_strtod_l+0xb92>
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	e7e5      	b.n	8009e0c <_strtod_l+0x84>
 8009e40:	2100      	movs	r1, #0
 8009e42:	e7ef      	b.n	8009e24 <_strtod_l+0x9c>
 8009e44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e46:	b13a      	cbz	r2, 8009e58 <_strtod_l+0xd0>
 8009e48:	2135      	movs	r1, #53	@ 0x35
 8009e4a:	a81c      	add	r0, sp, #112	@ 0x70
 8009e4c:	f003 ff8a 	bl	800dd64 <__copybits>
 8009e50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e52:	9805      	ldr	r0, [sp, #20]
 8009e54:	f003 fb58 	bl	800d508 <_Bfree>
 8009e58:	3e01      	subs	r6, #1
 8009e5a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e5c:	2e04      	cmp	r6, #4
 8009e5e:	d806      	bhi.n	8009e6e <_strtod_l+0xe6>
 8009e60:	e8df f006 	tbb	[pc, r6]
 8009e64:	201d0314 	.word	0x201d0314
 8009e68:	14          	.byte	0x14
 8009e69:	00          	.byte	0x00
 8009e6a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009e6e:	05e1      	lsls	r1, r4, #23
 8009e70:	bf48      	it	mi
 8009e72:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e76:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e7a:	0d1b      	lsrs	r3, r3, #20
 8009e7c:	051b      	lsls	r3, r3, #20
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1bb      	bne.n	8009dfa <_strtod_l+0x72>
 8009e82:	f002 f81d 	bl	800bec0 <__errno>
 8009e86:	2322      	movs	r3, #34	@ 0x22
 8009e88:	6003      	str	r3, [r0, #0]
 8009e8a:	e7b6      	b.n	8009dfa <_strtod_l+0x72>
 8009e8c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009e90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009e98:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009e9c:	e7e7      	b.n	8009e6e <_strtod_l+0xe6>
 8009e9e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a01c <_strtod_l+0x294>
 8009ea2:	e7e4      	b.n	8009e6e <_strtod_l+0xe6>
 8009ea4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8009eac:	e7df      	b.n	8009e6e <_strtod_l+0xe6>
 8009eae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009eb4:	785b      	ldrb	r3, [r3, #1]
 8009eb6:	2b30      	cmp	r3, #48	@ 0x30
 8009eb8:	d0f9      	beq.n	8009eae <_strtod_l+0x126>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d09d      	beq.n	8009dfa <_strtod_l+0x72>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ec4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	9308      	str	r3, [sp, #32]
 8009eca:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ecc:	461f      	mov	r7, r3
 8009ece:	220a      	movs	r2, #10
 8009ed0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009ed2:	7805      	ldrb	r5, [r0, #0]
 8009ed4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009ed8:	b2d9      	uxtb	r1, r3
 8009eda:	2909      	cmp	r1, #9
 8009edc:	d928      	bls.n	8009f30 <_strtod_l+0x1a8>
 8009ede:	494e      	ldr	r1, [pc, #312]	@ (800a018 <_strtod_l+0x290>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f001 ff7e 	bl	800bde2 <strncmp>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d032      	beq.n	8009f50 <_strtod_l+0x1c8>
 8009eea:	2000      	movs	r0, #0
 8009eec:	462a      	mov	r2, r5
 8009eee:	4681      	mov	r9, r0
 8009ef0:	463d      	mov	r5, r7
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2a65      	cmp	r2, #101	@ 0x65
 8009ef6:	d001      	beq.n	8009efc <_strtod_l+0x174>
 8009ef8:	2a45      	cmp	r2, #69	@ 0x45
 8009efa:	d114      	bne.n	8009f26 <_strtod_l+0x19e>
 8009efc:	b91d      	cbnz	r5, 8009f06 <_strtod_l+0x17e>
 8009efe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f00:	4302      	orrs	r2, r0
 8009f02:	d095      	beq.n	8009e30 <_strtod_l+0xa8>
 8009f04:	2500      	movs	r5, #0
 8009f06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f08:	1c62      	adds	r2, r4, #1
 8009f0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f0c:	7862      	ldrb	r2, [r4, #1]
 8009f0e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f10:	d077      	beq.n	800a002 <_strtod_l+0x27a>
 8009f12:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f14:	d07b      	beq.n	800a00e <_strtod_l+0x286>
 8009f16:	f04f 0c00 	mov.w	ip, #0
 8009f1a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f1e:	2909      	cmp	r1, #9
 8009f20:	f240 8082 	bls.w	800a028 <_strtod_l+0x2a0>
 8009f24:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f26:	f04f 0800 	mov.w	r8, #0
 8009f2a:	e0a2      	b.n	800a072 <_strtod_l+0x2ea>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	e7c7      	b.n	8009ec0 <_strtod_l+0x138>
 8009f30:	2f08      	cmp	r7, #8
 8009f32:	bfd5      	itete	le
 8009f34:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f36:	9908      	ldrgt	r1, [sp, #32]
 8009f38:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f3c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f40:	f100 0001 	add.w	r0, r0, #1
 8009f44:	bfd4      	ite	le
 8009f46:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f48:	9308      	strgt	r3, [sp, #32]
 8009f4a:	3701      	adds	r7, #1
 8009f4c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f4e:	e7bf      	b.n	8009ed0 <_strtod_l+0x148>
 8009f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f52:	1c5a      	adds	r2, r3, #1
 8009f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f56:	785a      	ldrb	r2, [r3, #1]
 8009f58:	b37f      	cbz	r7, 8009fba <_strtod_l+0x232>
 8009f5a:	4681      	mov	r9, r0
 8009f5c:	463d      	mov	r5, r7
 8009f5e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f62:	2b09      	cmp	r3, #9
 8009f64:	d912      	bls.n	8009f8c <_strtod_l+0x204>
 8009f66:	2301      	movs	r3, #1
 8009f68:	e7c4      	b.n	8009ef4 <_strtod_l+0x16c>
 8009f6a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f6c:	1c5a      	adds	r2, r3, #1
 8009f6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f70:	785a      	ldrb	r2, [r3, #1]
 8009f72:	3001      	adds	r0, #1
 8009f74:	2a30      	cmp	r2, #48	@ 0x30
 8009f76:	d0f8      	beq.n	8009f6a <_strtod_l+0x1e2>
 8009f78:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	f200 84d3 	bhi.w	800a928 <_strtod_l+0xba0>
 8009f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f84:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f86:	4681      	mov	r9, r0
 8009f88:	2000      	movs	r0, #0
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	3a30      	subs	r2, #48	@ 0x30
 8009f8e:	f100 0301 	add.w	r3, r0, #1
 8009f92:	d02a      	beq.n	8009fea <_strtod_l+0x262>
 8009f94:	4499      	add	r9, r3
 8009f96:	eb00 0c05 	add.w	ip, r0, r5
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	210a      	movs	r1, #10
 8009f9e:	4563      	cmp	r3, ip
 8009fa0:	d10d      	bne.n	8009fbe <_strtod_l+0x236>
 8009fa2:	1c69      	adds	r1, r5, #1
 8009fa4:	4401      	add	r1, r0
 8009fa6:	4428      	add	r0, r5
 8009fa8:	2808      	cmp	r0, #8
 8009faa:	dc16      	bgt.n	8009fda <_strtod_l+0x252>
 8009fac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fae:	230a      	movs	r3, #10
 8009fb0:	fb03 2300 	mla	r3, r3, r0, r2
 8009fb4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e018      	b.n	8009fec <_strtod_l+0x264>
 8009fba:	4638      	mov	r0, r7
 8009fbc:	e7da      	b.n	8009f74 <_strtod_l+0x1ec>
 8009fbe:	2b08      	cmp	r3, #8
 8009fc0:	f103 0301 	add.w	r3, r3, #1
 8009fc4:	dc03      	bgt.n	8009fce <_strtod_l+0x246>
 8009fc6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009fc8:	434e      	muls	r6, r1
 8009fca:	960a      	str	r6, [sp, #40]	@ 0x28
 8009fcc:	e7e7      	b.n	8009f9e <_strtod_l+0x216>
 8009fce:	2b10      	cmp	r3, #16
 8009fd0:	bfde      	ittt	le
 8009fd2:	9e08      	ldrle	r6, [sp, #32]
 8009fd4:	434e      	mulle	r6, r1
 8009fd6:	9608      	strle	r6, [sp, #32]
 8009fd8:	e7e1      	b.n	8009f9e <_strtod_l+0x216>
 8009fda:	280f      	cmp	r0, #15
 8009fdc:	dceb      	bgt.n	8009fb6 <_strtod_l+0x22e>
 8009fde:	9808      	ldr	r0, [sp, #32]
 8009fe0:	230a      	movs	r3, #10
 8009fe2:	fb03 2300 	mla	r3, r3, r0, r2
 8009fe6:	9308      	str	r3, [sp, #32]
 8009fe8:	e7e5      	b.n	8009fb6 <_strtod_l+0x22e>
 8009fea:	4629      	mov	r1, r5
 8009fec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009fee:	1c50      	adds	r0, r2, #1
 8009ff0:	9019      	str	r0, [sp, #100]	@ 0x64
 8009ff2:	7852      	ldrb	r2, [r2, #1]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	460d      	mov	r5, r1
 8009ff8:	e7b1      	b.n	8009f5e <_strtod_l+0x1d6>
 8009ffa:	f04f 0900 	mov.w	r9, #0
 8009ffe:	2301      	movs	r3, #1
 800a000:	e77d      	b.n	8009efe <_strtod_l+0x176>
 800a002:	f04f 0c00 	mov.w	ip, #0
 800a006:	1ca2      	adds	r2, r4, #2
 800a008:	9219      	str	r2, [sp, #100]	@ 0x64
 800a00a:	78a2      	ldrb	r2, [r4, #2]
 800a00c:	e785      	b.n	8009f1a <_strtod_l+0x192>
 800a00e:	f04f 0c01 	mov.w	ip, #1
 800a012:	e7f8      	b.n	800a006 <_strtod_l+0x27e>
 800a014:	0800ee20 	.word	0x0800ee20
 800a018:	0800ee08 	.word	0x0800ee08
 800a01c:	7ff00000 	.word	0x7ff00000
 800a020:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a022:	1c51      	adds	r1, r2, #1
 800a024:	9119      	str	r1, [sp, #100]	@ 0x64
 800a026:	7852      	ldrb	r2, [r2, #1]
 800a028:	2a30      	cmp	r2, #48	@ 0x30
 800a02a:	d0f9      	beq.n	800a020 <_strtod_l+0x298>
 800a02c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a030:	2908      	cmp	r1, #8
 800a032:	f63f af78 	bhi.w	8009f26 <_strtod_l+0x19e>
 800a036:	3a30      	subs	r2, #48	@ 0x30
 800a038:	920e      	str	r2, [sp, #56]	@ 0x38
 800a03a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a03c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a03e:	f04f 080a 	mov.w	r8, #10
 800a042:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a044:	1c56      	adds	r6, r2, #1
 800a046:	9619      	str	r6, [sp, #100]	@ 0x64
 800a048:	7852      	ldrb	r2, [r2, #1]
 800a04a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a04e:	f1be 0f09 	cmp.w	lr, #9
 800a052:	d939      	bls.n	800a0c8 <_strtod_l+0x340>
 800a054:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a056:	1a76      	subs	r6, r6, r1
 800a058:	2e08      	cmp	r6, #8
 800a05a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a05e:	dc03      	bgt.n	800a068 <_strtod_l+0x2e0>
 800a060:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a062:	4588      	cmp	r8, r1
 800a064:	bfa8      	it	ge
 800a066:	4688      	movge	r8, r1
 800a068:	f1bc 0f00 	cmp.w	ip, #0
 800a06c:	d001      	beq.n	800a072 <_strtod_l+0x2ea>
 800a06e:	f1c8 0800 	rsb	r8, r8, #0
 800a072:	2d00      	cmp	r5, #0
 800a074:	d14e      	bne.n	800a114 <_strtod_l+0x38c>
 800a076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a078:	4308      	orrs	r0, r1
 800a07a:	f47f aebe 	bne.w	8009dfa <_strtod_l+0x72>
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f aed6 	bne.w	8009e30 <_strtod_l+0xa8>
 800a084:	2a69      	cmp	r2, #105	@ 0x69
 800a086:	d028      	beq.n	800a0da <_strtod_l+0x352>
 800a088:	dc25      	bgt.n	800a0d6 <_strtod_l+0x34e>
 800a08a:	2a49      	cmp	r2, #73	@ 0x49
 800a08c:	d025      	beq.n	800a0da <_strtod_l+0x352>
 800a08e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a090:	f47f aece 	bne.w	8009e30 <_strtod_l+0xa8>
 800a094:	499b      	ldr	r1, [pc, #620]	@ (800a304 <_strtod_l+0x57c>)
 800a096:	a819      	add	r0, sp, #100	@ 0x64
 800a098:	f003 f87e 	bl	800d198 <__match>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	f43f aec7 	beq.w	8009e30 <_strtod_l+0xa8>
 800a0a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b28      	cmp	r3, #40	@ 0x28
 800a0a8:	d12e      	bne.n	800a108 <_strtod_l+0x380>
 800a0aa:	4997      	ldr	r1, [pc, #604]	@ (800a308 <_strtod_l+0x580>)
 800a0ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0ae:	a819      	add	r0, sp, #100	@ 0x64
 800a0b0:	f003 f886 	bl	800d1c0 <__hexnan>
 800a0b4:	2805      	cmp	r0, #5
 800a0b6:	d127      	bne.n	800a108 <_strtod_l+0x380>
 800a0b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a0be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0c6:	e698      	b.n	8009dfa <_strtod_l+0x72>
 800a0c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0ca:	fb08 2101 	mla	r1, r8, r1, r2
 800a0ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a0d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0d4:	e7b5      	b.n	800a042 <_strtod_l+0x2ba>
 800a0d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a0d8:	e7da      	b.n	800a090 <_strtod_l+0x308>
 800a0da:	498c      	ldr	r1, [pc, #560]	@ (800a30c <_strtod_l+0x584>)
 800a0dc:	a819      	add	r0, sp, #100	@ 0x64
 800a0de:	f003 f85b 	bl	800d198 <__match>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f43f aea4 	beq.w	8009e30 <_strtod_l+0xa8>
 800a0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0ea:	4989      	ldr	r1, [pc, #548]	@ (800a310 <_strtod_l+0x588>)
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	a819      	add	r0, sp, #100	@ 0x64
 800a0f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0f2:	f003 f851 	bl	800d198 <__match>
 800a0f6:	b910      	cbnz	r0, 800a0fe <_strtod_l+0x376>
 800a0f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a0fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a320 <_strtod_l+0x598>
 800a102:	f04f 0a00 	mov.w	sl, #0
 800a106:	e678      	b.n	8009dfa <_strtod_l+0x72>
 800a108:	4882      	ldr	r0, [pc, #520]	@ (800a314 <_strtod_l+0x58c>)
 800a10a:	f001 ff15 	bl	800bf38 <nan>
 800a10e:	ec5b ab10 	vmov	sl, fp, d0
 800a112:	e672      	b.n	8009dfa <_strtod_l+0x72>
 800a114:	eba8 0309 	sub.w	r3, r8, r9
 800a118:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	bf08      	it	eq
 800a120:	462f      	moveq	r7, r5
 800a122:	2d10      	cmp	r5, #16
 800a124:	462c      	mov	r4, r5
 800a126:	bfa8      	it	ge
 800a128:	2410      	movge	r4, #16
 800a12a:	f7f6 f9fb 	bl	8000524 <__aeabi_ui2d>
 800a12e:	2d09      	cmp	r5, #9
 800a130:	4682      	mov	sl, r0
 800a132:	468b      	mov	fp, r1
 800a134:	dc13      	bgt.n	800a15e <_strtod_l+0x3d6>
 800a136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f43f ae5e 	beq.w	8009dfa <_strtod_l+0x72>
 800a13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a140:	dd78      	ble.n	800a234 <_strtod_l+0x4ac>
 800a142:	2b16      	cmp	r3, #22
 800a144:	dc5f      	bgt.n	800a206 <_strtod_l+0x47e>
 800a146:	4974      	ldr	r1, [pc, #464]	@ (800a318 <_strtod_l+0x590>)
 800a148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a150:	4652      	mov	r2, sl
 800a152:	465b      	mov	r3, fp
 800a154:	f7f6 fa60 	bl	8000618 <__aeabi_dmul>
 800a158:	4682      	mov	sl, r0
 800a15a:	468b      	mov	fp, r1
 800a15c:	e64d      	b.n	8009dfa <_strtod_l+0x72>
 800a15e:	4b6e      	ldr	r3, [pc, #440]	@ (800a318 <_strtod_l+0x590>)
 800a160:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a164:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a168:	f7f6 fa56 	bl	8000618 <__aeabi_dmul>
 800a16c:	4682      	mov	sl, r0
 800a16e:	9808      	ldr	r0, [sp, #32]
 800a170:	468b      	mov	fp, r1
 800a172:	f7f6 f9d7 	bl	8000524 <__aeabi_ui2d>
 800a176:	4602      	mov	r2, r0
 800a178:	460b      	mov	r3, r1
 800a17a:	4650      	mov	r0, sl
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 f895 	bl	80002ac <__adddf3>
 800a182:	2d0f      	cmp	r5, #15
 800a184:	4682      	mov	sl, r0
 800a186:	468b      	mov	fp, r1
 800a188:	ddd5      	ble.n	800a136 <_strtod_l+0x3ae>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	1b2c      	subs	r4, r5, r4
 800a18e:	441c      	add	r4, r3
 800a190:	2c00      	cmp	r4, #0
 800a192:	f340 8096 	ble.w	800a2c2 <_strtod_l+0x53a>
 800a196:	f014 030f 	ands.w	r3, r4, #15
 800a19a:	d00a      	beq.n	800a1b2 <_strtod_l+0x42a>
 800a19c:	495e      	ldr	r1, [pc, #376]	@ (800a318 <_strtod_l+0x590>)
 800a19e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1a2:	4652      	mov	r2, sl
 800a1a4:	465b      	mov	r3, fp
 800a1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1aa:	f7f6 fa35 	bl	8000618 <__aeabi_dmul>
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	468b      	mov	fp, r1
 800a1b2:	f034 040f 	bics.w	r4, r4, #15
 800a1b6:	d073      	beq.n	800a2a0 <_strtod_l+0x518>
 800a1b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a1bc:	dd48      	ble.n	800a250 <_strtod_l+0x4c8>
 800a1be:	2400      	movs	r4, #0
 800a1c0:	46a0      	mov	r8, r4
 800a1c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1c4:	46a1      	mov	r9, r4
 800a1c6:	9a05      	ldr	r2, [sp, #20]
 800a1c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a320 <_strtod_l+0x598>
 800a1cc:	2322      	movs	r3, #34	@ 0x22
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	f04f 0a00 	mov.w	sl, #0
 800a1d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f43f ae0f 	beq.w	8009dfa <_strtod_l+0x72>
 800a1dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a1de:	9805      	ldr	r0, [sp, #20]
 800a1e0:	f003 f992 	bl	800d508 <_Bfree>
 800a1e4:	9805      	ldr	r0, [sp, #20]
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	f003 f98e 	bl	800d508 <_Bfree>
 800a1ec:	9805      	ldr	r0, [sp, #20]
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	f003 f98a 	bl	800d508 <_Bfree>
 800a1f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a1f6:	9805      	ldr	r0, [sp, #20]
 800a1f8:	f003 f986 	bl	800d508 <_Bfree>
 800a1fc:	9805      	ldr	r0, [sp, #20]
 800a1fe:	4621      	mov	r1, r4
 800a200:	f003 f982 	bl	800d508 <_Bfree>
 800a204:	e5f9      	b.n	8009dfa <_strtod_l+0x72>
 800a206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a208:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a20c:	4293      	cmp	r3, r2
 800a20e:	dbbc      	blt.n	800a18a <_strtod_l+0x402>
 800a210:	4c41      	ldr	r4, [pc, #260]	@ (800a318 <_strtod_l+0x590>)
 800a212:	f1c5 050f 	rsb	r5, r5, #15
 800a216:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a21a:	4652      	mov	r2, sl
 800a21c:	465b      	mov	r3, fp
 800a21e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a222:	f7f6 f9f9 	bl	8000618 <__aeabi_dmul>
 800a226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a228:	1b5d      	subs	r5, r3, r5
 800a22a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a22e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a232:	e78f      	b.n	800a154 <_strtod_l+0x3cc>
 800a234:	3316      	adds	r3, #22
 800a236:	dba8      	blt.n	800a18a <_strtod_l+0x402>
 800a238:	4b37      	ldr	r3, [pc, #220]	@ (800a318 <_strtod_l+0x590>)
 800a23a:	eba9 0808 	sub.w	r8, r9, r8
 800a23e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a242:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a246:	4650      	mov	r0, sl
 800a248:	4659      	mov	r1, fp
 800a24a:	f7f6 fb0f 	bl	800086c <__aeabi_ddiv>
 800a24e:	e783      	b.n	800a158 <_strtod_l+0x3d0>
 800a250:	4b32      	ldr	r3, [pc, #200]	@ (800a31c <_strtod_l+0x594>)
 800a252:	9308      	str	r3, [sp, #32]
 800a254:	2300      	movs	r3, #0
 800a256:	1124      	asrs	r4, r4, #4
 800a258:	4650      	mov	r0, sl
 800a25a:	4659      	mov	r1, fp
 800a25c:	461e      	mov	r6, r3
 800a25e:	2c01      	cmp	r4, #1
 800a260:	dc21      	bgt.n	800a2a6 <_strtod_l+0x51e>
 800a262:	b10b      	cbz	r3, 800a268 <_strtod_l+0x4e0>
 800a264:	4682      	mov	sl, r0
 800a266:	468b      	mov	fp, r1
 800a268:	492c      	ldr	r1, [pc, #176]	@ (800a31c <_strtod_l+0x594>)
 800a26a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a26e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a27a:	f7f6 f9cd 	bl	8000618 <__aeabi_dmul>
 800a27e:	4b28      	ldr	r3, [pc, #160]	@ (800a320 <_strtod_l+0x598>)
 800a280:	460a      	mov	r2, r1
 800a282:	400b      	ands	r3, r1
 800a284:	4927      	ldr	r1, [pc, #156]	@ (800a324 <_strtod_l+0x59c>)
 800a286:	428b      	cmp	r3, r1
 800a288:	4682      	mov	sl, r0
 800a28a:	d898      	bhi.n	800a1be <_strtod_l+0x436>
 800a28c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a290:	428b      	cmp	r3, r1
 800a292:	bf86      	itte	hi
 800a294:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a328 <_strtod_l+0x5a0>
 800a298:	f04f 3aff 	movhi.w	sl, #4294967295
 800a29c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9308      	str	r3, [sp, #32]
 800a2a4:	e07a      	b.n	800a39c <_strtod_l+0x614>
 800a2a6:	07e2      	lsls	r2, r4, #31
 800a2a8:	d505      	bpl.n	800a2b6 <_strtod_l+0x52e>
 800a2aa:	9b08      	ldr	r3, [sp, #32]
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f6 f9b2 	bl	8000618 <__aeabi_dmul>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	9a08      	ldr	r2, [sp, #32]
 800a2b8:	3208      	adds	r2, #8
 800a2ba:	3601      	adds	r6, #1
 800a2bc:	1064      	asrs	r4, r4, #1
 800a2be:	9208      	str	r2, [sp, #32]
 800a2c0:	e7cd      	b.n	800a25e <_strtod_l+0x4d6>
 800a2c2:	d0ed      	beq.n	800a2a0 <_strtod_l+0x518>
 800a2c4:	4264      	negs	r4, r4
 800a2c6:	f014 020f 	ands.w	r2, r4, #15
 800a2ca:	d00a      	beq.n	800a2e2 <_strtod_l+0x55a>
 800a2cc:	4b12      	ldr	r3, [pc, #72]	@ (800a318 <_strtod_l+0x590>)
 800a2ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	4659      	mov	r1, fp
 800a2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2da:	f7f6 fac7 	bl	800086c <__aeabi_ddiv>
 800a2de:	4682      	mov	sl, r0
 800a2e0:	468b      	mov	fp, r1
 800a2e2:	1124      	asrs	r4, r4, #4
 800a2e4:	d0dc      	beq.n	800a2a0 <_strtod_l+0x518>
 800a2e6:	2c1f      	cmp	r4, #31
 800a2e8:	dd20      	ble.n	800a32c <_strtod_l+0x5a4>
 800a2ea:	2400      	movs	r4, #0
 800a2ec:	46a0      	mov	r8, r4
 800a2ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800a2f0:	46a1      	mov	r9, r4
 800a2f2:	9a05      	ldr	r2, [sp, #20]
 800a2f4:	2322      	movs	r3, #34	@ 0x22
 800a2f6:	f04f 0a00 	mov.w	sl, #0
 800a2fa:	f04f 0b00 	mov.w	fp, #0
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	e768      	b.n	800a1d4 <_strtod_l+0x44c>
 800a302:	bf00      	nop
 800a304:	0800ef6e 	.word	0x0800ef6e
 800a308:	0800ee0c 	.word	0x0800ee0c
 800a30c:	0800ef66 	.word	0x0800ef66
 800a310:	0800efa5 	.word	0x0800efa5
 800a314:	0800f234 	.word	0x0800f234
 800a318:	0800f120 	.word	0x0800f120
 800a31c:	0800f0f8 	.word	0x0800f0f8
 800a320:	7ff00000 	.word	0x7ff00000
 800a324:	7ca00000 	.word	0x7ca00000
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	f014 0310 	ands.w	r3, r4, #16
 800a330:	bf18      	it	ne
 800a332:	236a      	movne	r3, #106	@ 0x6a
 800a334:	4ea9      	ldr	r6, [pc, #676]	@ (800a5dc <_strtod_l+0x854>)
 800a336:	9308      	str	r3, [sp, #32]
 800a338:	4650      	mov	r0, sl
 800a33a:	4659      	mov	r1, fp
 800a33c:	2300      	movs	r3, #0
 800a33e:	07e2      	lsls	r2, r4, #31
 800a340:	d504      	bpl.n	800a34c <_strtod_l+0x5c4>
 800a342:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a346:	f7f6 f967 	bl	8000618 <__aeabi_dmul>
 800a34a:	2301      	movs	r3, #1
 800a34c:	1064      	asrs	r4, r4, #1
 800a34e:	f106 0608 	add.w	r6, r6, #8
 800a352:	d1f4      	bne.n	800a33e <_strtod_l+0x5b6>
 800a354:	b10b      	cbz	r3, 800a35a <_strtod_l+0x5d2>
 800a356:	4682      	mov	sl, r0
 800a358:	468b      	mov	fp, r1
 800a35a:	9b08      	ldr	r3, [sp, #32]
 800a35c:	b1b3      	cbz	r3, 800a38c <_strtod_l+0x604>
 800a35e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a362:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a366:	2b00      	cmp	r3, #0
 800a368:	4659      	mov	r1, fp
 800a36a:	dd0f      	ble.n	800a38c <_strtod_l+0x604>
 800a36c:	2b1f      	cmp	r3, #31
 800a36e:	dd55      	ble.n	800a41c <_strtod_l+0x694>
 800a370:	2b34      	cmp	r3, #52	@ 0x34
 800a372:	bfde      	ittt	le
 800a374:	f04f 33ff 	movle.w	r3, #4294967295
 800a378:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a37c:	4093      	lslle	r3, r2
 800a37e:	f04f 0a00 	mov.w	sl, #0
 800a382:	bfcc      	ite	gt
 800a384:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a388:	ea03 0b01 	andle.w	fp, r3, r1
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	4650      	mov	r0, sl
 800a392:	4659      	mov	r1, fp
 800a394:	f7f6 fba8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d1a6      	bne.n	800a2ea <_strtod_l+0x562>
 800a39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3a2:	9805      	ldr	r0, [sp, #20]
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	463a      	mov	r2, r7
 800a3a8:	f003 f916 	bl	800d5d8 <__s2b>
 800a3ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f43f af05 	beq.w	800a1be <_strtod_l+0x436>
 800a3b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3b6:	2a00      	cmp	r2, #0
 800a3b8:	eba9 0308 	sub.w	r3, r9, r8
 800a3bc:	bfa8      	it	ge
 800a3be:	2300      	movge	r3, #0
 800a3c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3c2:	2400      	movs	r4, #0
 800a3c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800a3ca:	46a0      	mov	r8, r4
 800a3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ce:	9805      	ldr	r0, [sp, #20]
 800a3d0:	6859      	ldr	r1, [r3, #4]
 800a3d2:	f003 f859 	bl	800d488 <_Balloc>
 800a3d6:	4681      	mov	r9, r0
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	f43f aef4 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a3de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e0:	691a      	ldr	r2, [r3, #16]
 800a3e2:	3202      	adds	r2, #2
 800a3e4:	f103 010c 	add.w	r1, r3, #12
 800a3e8:	0092      	lsls	r2, r2, #2
 800a3ea:	300c      	adds	r0, #12
 800a3ec:	f001 fd95 	bl	800bf1a <memcpy>
 800a3f0:	ec4b ab10 	vmov	d0, sl, fp
 800a3f4:	9805      	ldr	r0, [sp, #20]
 800a3f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3f8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a3fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a3fe:	f003 fc27 	bl	800dc50 <__d2b>
 800a402:	901a      	str	r0, [sp, #104]	@ 0x68
 800a404:	2800      	cmp	r0, #0
 800a406:	f43f aede 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a40a:	9805      	ldr	r0, [sp, #20]
 800a40c:	2101      	movs	r1, #1
 800a40e:	f003 f979 	bl	800d704 <__i2b>
 800a412:	4680      	mov	r8, r0
 800a414:	b948      	cbnz	r0, 800a42a <_strtod_l+0x6a2>
 800a416:	f04f 0800 	mov.w	r8, #0
 800a41a:	e6d4      	b.n	800a1c6 <_strtod_l+0x43e>
 800a41c:	f04f 32ff 	mov.w	r2, #4294967295
 800a420:	fa02 f303 	lsl.w	r3, r2, r3
 800a424:	ea03 0a0a 	and.w	sl, r3, sl
 800a428:	e7b0      	b.n	800a38c <_strtod_l+0x604>
 800a42a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a42c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a42e:	2d00      	cmp	r5, #0
 800a430:	bfab      	itete	ge
 800a432:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a434:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a436:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a438:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a43a:	bfac      	ite	ge
 800a43c:	18ef      	addge	r7, r5, r3
 800a43e:	1b5e      	sublt	r6, r3, r5
 800a440:	9b08      	ldr	r3, [sp, #32]
 800a442:	1aed      	subs	r5, r5, r3
 800a444:	4415      	add	r5, r2
 800a446:	4b66      	ldr	r3, [pc, #408]	@ (800a5e0 <_strtod_l+0x858>)
 800a448:	3d01      	subs	r5, #1
 800a44a:	429d      	cmp	r5, r3
 800a44c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a450:	da50      	bge.n	800a4f4 <_strtod_l+0x76c>
 800a452:	1b5b      	subs	r3, r3, r5
 800a454:	2b1f      	cmp	r3, #31
 800a456:	eba2 0203 	sub.w	r2, r2, r3
 800a45a:	f04f 0101 	mov.w	r1, #1
 800a45e:	dc3d      	bgt.n	800a4dc <_strtod_l+0x754>
 800a460:	fa01 f303 	lsl.w	r3, r1, r3
 800a464:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a466:	2300      	movs	r3, #0
 800a468:	9310      	str	r3, [sp, #64]	@ 0x40
 800a46a:	18bd      	adds	r5, r7, r2
 800a46c:	9b08      	ldr	r3, [sp, #32]
 800a46e:	42af      	cmp	r7, r5
 800a470:	4416      	add	r6, r2
 800a472:	441e      	add	r6, r3
 800a474:	463b      	mov	r3, r7
 800a476:	bfa8      	it	ge
 800a478:	462b      	movge	r3, r5
 800a47a:	42b3      	cmp	r3, r6
 800a47c:	bfa8      	it	ge
 800a47e:	4633      	movge	r3, r6
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfc2      	ittt	gt
 800a484:	1aed      	subgt	r5, r5, r3
 800a486:	1af6      	subgt	r6, r6, r3
 800a488:	1aff      	subgt	r7, r7, r3
 800a48a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	dd16      	ble.n	800a4be <_strtod_l+0x736>
 800a490:	4641      	mov	r1, r8
 800a492:	9805      	ldr	r0, [sp, #20]
 800a494:	461a      	mov	r2, r3
 800a496:	f003 f9f5 	bl	800d884 <__pow5mult>
 800a49a:	4680      	mov	r8, r0
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d0ba      	beq.n	800a416 <_strtod_l+0x68e>
 800a4a0:	4601      	mov	r1, r0
 800a4a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4a4:	9805      	ldr	r0, [sp, #20]
 800a4a6:	f003 f943 	bl	800d730 <__multiply>
 800a4aa:	900e      	str	r0, [sp, #56]	@ 0x38
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f43f ae8a 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a4b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4b4:	9805      	ldr	r0, [sp, #20]
 800a4b6:	f003 f827 	bl	800d508 <_Bfree>
 800a4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4be:	2d00      	cmp	r5, #0
 800a4c0:	dc1d      	bgt.n	800a4fe <_strtod_l+0x776>
 800a4c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd23      	ble.n	800a510 <_strtod_l+0x788>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4cc:	9805      	ldr	r0, [sp, #20]
 800a4ce:	f003 f9d9 	bl	800d884 <__pow5mult>
 800a4d2:	4681      	mov	r9, r0
 800a4d4:	b9e0      	cbnz	r0, 800a510 <_strtod_l+0x788>
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	e674      	b.n	800a1c6 <_strtod_l+0x43e>
 800a4dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a4e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a4e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a4e8:	35e2      	adds	r5, #226	@ 0xe2
 800a4ea:	fa01 f305 	lsl.w	r3, r1, r5
 800a4ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a4f2:	e7ba      	b.n	800a46a <_strtod_l+0x6e2>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4fc:	e7b5      	b.n	800a46a <_strtod_l+0x6e2>
 800a4fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a500:	9805      	ldr	r0, [sp, #20]
 800a502:	462a      	mov	r2, r5
 800a504:	f003 fa18 	bl	800d938 <__lshift>
 800a508:	901a      	str	r0, [sp, #104]	@ 0x68
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d1d9      	bne.n	800a4c2 <_strtod_l+0x73a>
 800a50e:	e65a      	b.n	800a1c6 <_strtod_l+0x43e>
 800a510:	2e00      	cmp	r6, #0
 800a512:	dd07      	ble.n	800a524 <_strtod_l+0x79c>
 800a514:	4649      	mov	r1, r9
 800a516:	9805      	ldr	r0, [sp, #20]
 800a518:	4632      	mov	r2, r6
 800a51a:	f003 fa0d 	bl	800d938 <__lshift>
 800a51e:	4681      	mov	r9, r0
 800a520:	2800      	cmp	r0, #0
 800a522:	d0d8      	beq.n	800a4d6 <_strtod_l+0x74e>
 800a524:	2f00      	cmp	r7, #0
 800a526:	dd08      	ble.n	800a53a <_strtod_l+0x7b2>
 800a528:	4641      	mov	r1, r8
 800a52a:	9805      	ldr	r0, [sp, #20]
 800a52c:	463a      	mov	r2, r7
 800a52e:	f003 fa03 	bl	800d938 <__lshift>
 800a532:	4680      	mov	r8, r0
 800a534:	2800      	cmp	r0, #0
 800a536:	f43f ae46 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a53a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a53c:	9805      	ldr	r0, [sp, #20]
 800a53e:	464a      	mov	r2, r9
 800a540:	f003 fa82 	bl	800da48 <__mdiff>
 800a544:	4604      	mov	r4, r0
 800a546:	2800      	cmp	r0, #0
 800a548:	f43f ae3d 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a54c:	68c3      	ldr	r3, [r0, #12]
 800a54e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a550:	2300      	movs	r3, #0
 800a552:	60c3      	str	r3, [r0, #12]
 800a554:	4641      	mov	r1, r8
 800a556:	f003 fa5b 	bl	800da10 <__mcmp>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	da46      	bge.n	800a5ec <_strtod_l+0x864>
 800a55e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a560:	ea53 030a 	orrs.w	r3, r3, sl
 800a564:	d16c      	bne.n	800a640 <_strtod_l+0x8b8>
 800a566:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d168      	bne.n	800a640 <_strtod_l+0x8b8>
 800a56e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a572:	0d1b      	lsrs	r3, r3, #20
 800a574:	051b      	lsls	r3, r3, #20
 800a576:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a57a:	d961      	bls.n	800a640 <_strtod_l+0x8b8>
 800a57c:	6963      	ldr	r3, [r4, #20]
 800a57e:	b913      	cbnz	r3, 800a586 <_strtod_l+0x7fe>
 800a580:	6923      	ldr	r3, [r4, #16]
 800a582:	2b01      	cmp	r3, #1
 800a584:	dd5c      	ble.n	800a640 <_strtod_l+0x8b8>
 800a586:	4621      	mov	r1, r4
 800a588:	2201      	movs	r2, #1
 800a58a:	9805      	ldr	r0, [sp, #20]
 800a58c:	f003 f9d4 	bl	800d938 <__lshift>
 800a590:	4641      	mov	r1, r8
 800a592:	4604      	mov	r4, r0
 800a594:	f003 fa3c 	bl	800da10 <__mcmp>
 800a598:	2800      	cmp	r0, #0
 800a59a:	dd51      	ble.n	800a640 <_strtod_l+0x8b8>
 800a59c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5a0:	9a08      	ldr	r2, [sp, #32]
 800a5a2:	0d1b      	lsrs	r3, r3, #20
 800a5a4:	051b      	lsls	r3, r3, #20
 800a5a6:	2a00      	cmp	r2, #0
 800a5a8:	d06b      	beq.n	800a682 <_strtod_l+0x8fa>
 800a5aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5ae:	d868      	bhi.n	800a682 <_strtod_l+0x8fa>
 800a5b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5b4:	f67f ae9d 	bls.w	800a2f2 <_strtod_l+0x56a>
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e4 <_strtod_l+0x85c>)
 800a5ba:	4650      	mov	r0, sl
 800a5bc:	4659      	mov	r1, fp
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f7f6 f82a 	bl	8000618 <__aeabi_dmul>
 800a5c4:	4b08      	ldr	r3, [pc, #32]	@ (800a5e8 <_strtod_l+0x860>)
 800a5c6:	400b      	ands	r3, r1
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f ae05 	bne.w	800a1dc <_strtod_l+0x454>
 800a5d2:	9a05      	ldr	r2, [sp, #20]
 800a5d4:	2322      	movs	r3, #34	@ 0x22
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	e600      	b.n	800a1dc <_strtod_l+0x454>
 800a5da:	bf00      	nop
 800a5dc:	0800ee38 	.word	0x0800ee38
 800a5e0:	fffffc02 	.word	0xfffffc02
 800a5e4:	39500000 	.word	0x39500000
 800a5e8:	7ff00000 	.word	0x7ff00000
 800a5ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a5f0:	d165      	bne.n	800a6be <_strtod_l+0x936>
 800a5f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a5f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5f8:	b35a      	cbz	r2, 800a652 <_strtod_l+0x8ca>
 800a5fa:	4a9f      	ldr	r2, [pc, #636]	@ (800a878 <_strtod_l+0xaf0>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d12b      	bne.n	800a658 <_strtod_l+0x8d0>
 800a600:	9b08      	ldr	r3, [sp, #32]
 800a602:	4651      	mov	r1, sl
 800a604:	b303      	cbz	r3, 800a648 <_strtod_l+0x8c0>
 800a606:	4b9d      	ldr	r3, [pc, #628]	@ (800a87c <_strtod_l+0xaf4>)
 800a608:	465a      	mov	r2, fp
 800a60a:	4013      	ands	r3, r2
 800a60c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a610:	f04f 32ff 	mov.w	r2, #4294967295
 800a614:	d81b      	bhi.n	800a64e <_strtod_l+0x8c6>
 800a616:	0d1b      	lsrs	r3, r3, #20
 800a618:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	4299      	cmp	r1, r3
 800a622:	d119      	bne.n	800a658 <_strtod_l+0x8d0>
 800a624:	4b96      	ldr	r3, [pc, #600]	@ (800a880 <_strtod_l+0xaf8>)
 800a626:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a628:	429a      	cmp	r2, r3
 800a62a:	d102      	bne.n	800a632 <_strtod_l+0x8aa>
 800a62c:	3101      	adds	r1, #1
 800a62e:	f43f adca 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a632:	4b92      	ldr	r3, [pc, #584]	@ (800a87c <_strtod_l+0xaf4>)
 800a634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a636:	401a      	ands	r2, r3
 800a638:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a63c:	f04f 0a00 	mov.w	sl, #0
 800a640:	9b08      	ldr	r3, [sp, #32]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1b8      	bne.n	800a5b8 <_strtod_l+0x830>
 800a646:	e5c9      	b.n	800a1dc <_strtod_l+0x454>
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	e7e8      	b.n	800a620 <_strtod_l+0x898>
 800a64e:	4613      	mov	r3, r2
 800a650:	e7e6      	b.n	800a620 <_strtod_l+0x898>
 800a652:	ea53 030a 	orrs.w	r3, r3, sl
 800a656:	d0a1      	beq.n	800a59c <_strtod_l+0x814>
 800a658:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a65a:	b1db      	cbz	r3, 800a694 <_strtod_l+0x90c>
 800a65c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a65e:	4213      	tst	r3, r2
 800a660:	d0ee      	beq.n	800a640 <_strtod_l+0x8b8>
 800a662:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a664:	9a08      	ldr	r2, [sp, #32]
 800a666:	4650      	mov	r0, sl
 800a668:	4659      	mov	r1, fp
 800a66a:	b1bb      	cbz	r3, 800a69c <_strtod_l+0x914>
 800a66c:	f7ff fb6e 	bl	8009d4c <sulp>
 800a670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a674:	ec53 2b10 	vmov	r2, r3, d0
 800a678:	f7f5 fe18 	bl	80002ac <__adddf3>
 800a67c:	4682      	mov	sl, r0
 800a67e:	468b      	mov	fp, r1
 800a680:	e7de      	b.n	800a640 <_strtod_l+0x8b8>
 800a682:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a686:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a68a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a68e:	f04f 3aff 	mov.w	sl, #4294967295
 800a692:	e7d5      	b.n	800a640 <_strtod_l+0x8b8>
 800a694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a696:	ea13 0f0a 	tst.w	r3, sl
 800a69a:	e7e1      	b.n	800a660 <_strtod_l+0x8d8>
 800a69c:	f7ff fb56 	bl	8009d4c <sulp>
 800a6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6a4:	ec53 2b10 	vmov	r2, r3, d0
 800a6a8:	f7f5 fdfe 	bl	80002a8 <__aeabi_dsub>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4682      	mov	sl, r0
 800a6b2:	468b      	mov	fp, r1
 800a6b4:	f7f6 fa18 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d0c1      	beq.n	800a640 <_strtod_l+0x8b8>
 800a6bc:	e619      	b.n	800a2f2 <_strtod_l+0x56a>
 800a6be:	4641      	mov	r1, r8
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f003 fb1d 	bl	800dd00 <__ratio>
 800a6c6:	ec57 6b10 	vmov	r6, r7, d0
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f6 fa1c 	bl	8000b10 <__aeabi_dcmple>
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	d06f      	beq.n	800a7bc <_strtod_l+0xa34>
 800a6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d17a      	bne.n	800a7d8 <_strtod_l+0xa50>
 800a6e2:	f1ba 0f00 	cmp.w	sl, #0
 800a6e6:	d158      	bne.n	800a79a <_strtod_l+0xa12>
 800a6e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d15a      	bne.n	800a7a8 <_strtod_l+0xa20>
 800a6f2:	4b64      	ldr	r3, [pc, #400]	@ (800a884 <_strtod_l+0xafc>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	f7f6 f9ff 	bl	8000afc <__aeabi_dcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	d159      	bne.n	800a7b6 <_strtod_l+0xa2e>
 800a702:	4630      	mov	r0, r6
 800a704:	4639      	mov	r1, r7
 800a706:	4b60      	ldr	r3, [pc, #384]	@ (800a888 <_strtod_l+0xb00>)
 800a708:	2200      	movs	r2, #0
 800a70a:	f7f5 ff85 	bl	8000618 <__aeabi_dmul>
 800a70e:	4606      	mov	r6, r0
 800a710:	460f      	mov	r7, r1
 800a712:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a716:	9606      	str	r6, [sp, #24]
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a71e:	4d57      	ldr	r5, [pc, #348]	@ (800a87c <_strtod_l+0xaf4>)
 800a720:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a726:	401d      	ands	r5, r3
 800a728:	4b58      	ldr	r3, [pc, #352]	@ (800a88c <_strtod_l+0xb04>)
 800a72a:	429d      	cmp	r5, r3
 800a72c:	f040 80b2 	bne.w	800a894 <_strtod_l+0xb0c>
 800a730:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a732:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a736:	ec4b ab10 	vmov	d0, sl, fp
 800a73a:	f003 fa19 	bl	800db70 <__ulp>
 800a73e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a742:	ec51 0b10 	vmov	r0, r1, d0
 800a746:	f7f5 ff67 	bl	8000618 <__aeabi_dmul>
 800a74a:	4652      	mov	r2, sl
 800a74c:	465b      	mov	r3, fp
 800a74e:	f7f5 fdad 	bl	80002ac <__adddf3>
 800a752:	460b      	mov	r3, r1
 800a754:	4949      	ldr	r1, [pc, #292]	@ (800a87c <_strtod_l+0xaf4>)
 800a756:	4a4e      	ldr	r2, [pc, #312]	@ (800a890 <_strtod_l+0xb08>)
 800a758:	4019      	ands	r1, r3
 800a75a:	4291      	cmp	r1, r2
 800a75c:	4682      	mov	sl, r0
 800a75e:	d942      	bls.n	800a7e6 <_strtod_l+0xa5e>
 800a760:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a762:	4b47      	ldr	r3, [pc, #284]	@ (800a880 <_strtod_l+0xaf8>)
 800a764:	429a      	cmp	r2, r3
 800a766:	d103      	bne.n	800a770 <_strtod_l+0x9e8>
 800a768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a76a:	3301      	adds	r3, #1
 800a76c:	f43f ad2b 	beq.w	800a1c6 <_strtod_l+0x43e>
 800a770:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a880 <_strtod_l+0xaf8>
 800a774:	f04f 3aff 	mov.w	sl, #4294967295
 800a778:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a77a:	9805      	ldr	r0, [sp, #20]
 800a77c:	f002 fec4 	bl	800d508 <_Bfree>
 800a780:	9805      	ldr	r0, [sp, #20]
 800a782:	4649      	mov	r1, r9
 800a784:	f002 fec0 	bl	800d508 <_Bfree>
 800a788:	9805      	ldr	r0, [sp, #20]
 800a78a:	4641      	mov	r1, r8
 800a78c:	f002 febc 	bl	800d508 <_Bfree>
 800a790:	9805      	ldr	r0, [sp, #20]
 800a792:	4621      	mov	r1, r4
 800a794:	f002 feb8 	bl	800d508 <_Bfree>
 800a798:	e618      	b.n	800a3cc <_strtod_l+0x644>
 800a79a:	f1ba 0f01 	cmp.w	sl, #1
 800a79e:	d103      	bne.n	800a7a8 <_strtod_l+0xa20>
 800a7a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f43f ada5 	beq.w	800a2f2 <_strtod_l+0x56a>
 800a7a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a858 <_strtod_l+0xad0>
 800a7ac:	4f35      	ldr	r7, [pc, #212]	@ (800a884 <_strtod_l+0xafc>)
 800a7ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7b2:	2600      	movs	r6, #0
 800a7b4:	e7b1      	b.n	800a71a <_strtod_l+0x992>
 800a7b6:	4f34      	ldr	r7, [pc, #208]	@ (800a888 <_strtod_l+0xb00>)
 800a7b8:	2600      	movs	r6, #0
 800a7ba:	e7aa      	b.n	800a712 <_strtod_l+0x98a>
 800a7bc:	4b32      	ldr	r3, [pc, #200]	@ (800a888 <_strtod_l+0xb00>)
 800a7be:	4630      	mov	r0, r6
 800a7c0:	4639      	mov	r1, r7
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f7f5 ff28 	bl	8000618 <__aeabi_dmul>
 800a7c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d09f      	beq.n	800a712 <_strtod_l+0x98a>
 800a7d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7d6:	e7a0      	b.n	800a71a <_strtod_l+0x992>
 800a7d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a860 <_strtod_l+0xad8>
 800a7dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7e0:	ec57 6b17 	vmov	r6, r7, d7
 800a7e4:	e799      	b.n	800a71a <_strtod_l+0x992>
 800a7e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a7ea:	9b08      	ldr	r3, [sp, #32]
 800a7ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1c1      	bne.n	800a778 <_strtod_l+0x9f0>
 800a7f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7f8:	0d1b      	lsrs	r3, r3, #20
 800a7fa:	051b      	lsls	r3, r3, #20
 800a7fc:	429d      	cmp	r5, r3
 800a7fe:	d1bb      	bne.n	800a778 <_strtod_l+0x9f0>
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	f7f6 fa68 	bl	8000cd8 <__aeabi_d2lz>
 800a808:	f7f5 fed8 	bl	80005bc <__aeabi_l2d>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4630      	mov	r0, r6
 800a812:	4639      	mov	r1, r7
 800a814:	f7f5 fd48 	bl	80002a8 <__aeabi_dsub>
 800a818:	460b      	mov	r3, r1
 800a81a:	4602      	mov	r2, r0
 800a81c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a820:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a826:	ea46 060a 	orr.w	r6, r6, sl
 800a82a:	431e      	orrs	r6, r3
 800a82c:	d06f      	beq.n	800a90e <_strtod_l+0xb86>
 800a82e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a868 <_strtod_l+0xae0>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f7f6 f962 	bl	8000afc <__aeabi_dcmplt>
 800a838:	2800      	cmp	r0, #0
 800a83a:	f47f accf 	bne.w	800a1dc <_strtod_l+0x454>
 800a83e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a870 <_strtod_l+0xae8>)
 800a840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a844:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a848:	f7f6 f976 	bl	8000b38 <__aeabi_dcmpgt>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d093      	beq.n	800a778 <_strtod_l+0x9f0>
 800a850:	e4c4      	b.n	800a1dc <_strtod_l+0x454>
 800a852:	bf00      	nop
 800a854:	f3af 8000 	nop.w
 800a858:	00000000 	.word	0x00000000
 800a85c:	bff00000 	.word	0xbff00000
 800a860:	00000000 	.word	0x00000000
 800a864:	3ff00000 	.word	0x3ff00000
 800a868:	94a03595 	.word	0x94a03595
 800a86c:	3fdfffff 	.word	0x3fdfffff
 800a870:	35afe535 	.word	0x35afe535
 800a874:	3fe00000 	.word	0x3fe00000
 800a878:	000fffff 	.word	0x000fffff
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	7fefffff 	.word	0x7fefffff
 800a884:	3ff00000 	.word	0x3ff00000
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	7fe00000 	.word	0x7fe00000
 800a890:	7c9fffff 	.word	0x7c9fffff
 800a894:	9b08      	ldr	r3, [sp, #32]
 800a896:	b323      	cbz	r3, 800a8e2 <_strtod_l+0xb5a>
 800a898:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a89c:	d821      	bhi.n	800a8e2 <_strtod_l+0xb5a>
 800a89e:	a328      	add	r3, pc, #160	@ (adr r3, 800a940 <_strtod_l+0xbb8>)
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	4630      	mov	r0, r6
 800a8a6:	4639      	mov	r1, r7
 800a8a8:	f7f6 f932 	bl	8000b10 <__aeabi_dcmple>
 800a8ac:	b1a0      	cbz	r0, 800a8d8 <_strtod_l+0xb50>
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7f6 f989 	bl	8000bc8 <__aeabi_d2uiz>
 800a8b6:	2801      	cmp	r0, #1
 800a8b8:	bf38      	it	cc
 800a8ba:	2001      	movcc	r0, #1
 800a8bc:	f7f5 fe32 	bl	8000524 <__aeabi_ui2d>
 800a8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8c2:	4606      	mov	r6, r0
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	b9fb      	cbnz	r3, 800a908 <_strtod_l+0xb80>
 800a8c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a8ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a8d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a8d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a8de:	1b5b      	subs	r3, r3, r5
 800a8e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a8e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a8e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a8ea:	f003 f941 	bl	800db70 <__ulp>
 800a8ee:	4650      	mov	r0, sl
 800a8f0:	ec53 2b10 	vmov	r2, r3, d0
 800a8f4:	4659      	mov	r1, fp
 800a8f6:	f7f5 fe8f 	bl	8000618 <__aeabi_dmul>
 800a8fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8fe:	f7f5 fcd5 	bl	80002ac <__adddf3>
 800a902:	4682      	mov	sl, r0
 800a904:	468b      	mov	fp, r1
 800a906:	e770      	b.n	800a7ea <_strtod_l+0xa62>
 800a908:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a90c:	e7e0      	b.n	800a8d0 <_strtod_l+0xb48>
 800a90e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a948 <_strtod_l+0xbc0>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f6 f8f2 	bl	8000afc <__aeabi_dcmplt>
 800a918:	e798      	b.n	800a84c <_strtod_l+0xac4>
 800a91a:	2300      	movs	r3, #0
 800a91c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a91e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a920:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	f7ff ba6d 	b.w	8009e02 <_strtod_l+0x7a>
 800a928:	2a65      	cmp	r2, #101	@ 0x65
 800a92a:	f43f ab66 	beq.w	8009ffa <_strtod_l+0x272>
 800a92e:	2a45      	cmp	r2, #69	@ 0x45
 800a930:	f43f ab63 	beq.w	8009ffa <_strtod_l+0x272>
 800a934:	2301      	movs	r3, #1
 800a936:	f7ff bb9e 	b.w	800a076 <_strtod_l+0x2ee>
 800a93a:	bf00      	nop
 800a93c:	f3af 8000 	nop.w
 800a940:	ffc00000 	.word	0xffc00000
 800a944:	41dfffff 	.word	0x41dfffff
 800a948:	94a03595 	.word	0x94a03595
 800a94c:	3fcfffff 	.word	0x3fcfffff

0800a950 <_strtod_r>:
 800a950:	4b01      	ldr	r3, [pc, #4]	@ (800a958 <_strtod_r+0x8>)
 800a952:	f7ff ba19 	b.w	8009d88 <_strtod_l>
 800a956:	bf00      	nop
 800a958:	20000048 	.word	0x20000048

0800a95c <strtod>:
 800a95c:	460a      	mov	r2, r1
 800a95e:	4601      	mov	r1, r0
 800a960:	4802      	ldr	r0, [pc, #8]	@ (800a96c <strtod+0x10>)
 800a962:	4b03      	ldr	r3, [pc, #12]	@ (800a970 <strtod+0x14>)
 800a964:	6800      	ldr	r0, [r0, #0]
 800a966:	f7ff ba0f 	b.w	8009d88 <_strtod_l>
 800a96a:	bf00      	nop
 800a96c:	200001b4 	.word	0x200001b4
 800a970:	20000048 	.word	0x20000048

0800a974 <strtof>:
 800a974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a978:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800aa38 <strtof+0xc4>
 800a97c:	4b29      	ldr	r3, [pc, #164]	@ (800aa24 <strtof+0xb0>)
 800a97e:	460a      	mov	r2, r1
 800a980:	ed2d 8b02 	vpush	{d8}
 800a984:	4601      	mov	r1, r0
 800a986:	f8d8 0000 	ldr.w	r0, [r8]
 800a98a:	f7ff f9fd 	bl	8009d88 <_strtod_l>
 800a98e:	ec55 4b10 	vmov	r4, r5, d0
 800a992:	4622      	mov	r2, r4
 800a994:	462b      	mov	r3, r5
 800a996:	4620      	mov	r0, r4
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f6 f8d7 	bl	8000b4c <__aeabi_dcmpun>
 800a99e:	b190      	cbz	r0, 800a9c6 <strtof+0x52>
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	4821      	ldr	r0, [pc, #132]	@ (800aa28 <strtof+0xb4>)
 800a9a4:	da09      	bge.n	800a9ba <strtof+0x46>
 800a9a6:	f001 facf 	bl	800bf48 <nanf>
 800a9aa:	eeb1 8a40 	vneg.f32	s16, s0
 800a9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b2:	ecbd 8b02 	vpop	{d8}
 800a9b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9ba:	ecbd 8b02 	vpop	{d8}
 800a9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	f001 bac1 	b.w	800bf48 <nanf>
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f6 f91d 	bl	8000c08 <__aeabi_d2f>
 800a9ce:	ee08 0a10 	vmov	s16, r0
 800a9d2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800aa2c <strtof+0xb8>
 800a9d6:	eeb0 7ac8 	vabs.f32	s14, s16
 800a9da:	eeb4 7a67 	vcmp.f32	s14, s15
 800a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e2:	dd11      	ble.n	800aa08 <strtof+0x94>
 800a9e4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a9e8:	4b11      	ldr	r3, [pc, #68]	@ (800aa30 <strtof+0xbc>)
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	4639      	mov	r1, r7
 800a9f2:	f7f6 f8ab 	bl	8000b4c <__aeabi_dcmpun>
 800a9f6:	b980      	cbnz	r0, 800aa1a <strtof+0xa6>
 800a9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa30 <strtof+0xbc>)
 800a9fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f6 f885 	bl	8000b10 <__aeabi_dcmple>
 800aa06:	b940      	cbnz	r0, 800aa1a <strtof+0xa6>
 800aa08:	ee18 3a10 	vmov	r3, s16
 800aa0c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800aa10:	d1cd      	bne.n	800a9ae <strtof+0x3a>
 800aa12:	4b08      	ldr	r3, [pc, #32]	@ (800aa34 <strtof+0xc0>)
 800aa14:	402b      	ands	r3, r5
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0c9      	beq.n	800a9ae <strtof+0x3a>
 800aa1a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa1e:	2222      	movs	r2, #34	@ 0x22
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	e7c4      	b.n	800a9ae <strtof+0x3a>
 800aa24:	20000048 	.word	0x20000048
 800aa28:	0800f234 	.word	0x0800f234
 800aa2c:	7f7fffff 	.word	0x7f7fffff
 800aa30:	7fefffff 	.word	0x7fefffff
 800aa34:	7ff00000 	.word	0x7ff00000
 800aa38:	200001b4 	.word	0x200001b4

0800aa3c <_strtol_l.constprop.0>:
 800aa3c:	2b24      	cmp	r3, #36	@ 0x24
 800aa3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa42:	4686      	mov	lr, r0
 800aa44:	4690      	mov	r8, r2
 800aa46:	d801      	bhi.n	800aa4c <_strtol_l.constprop.0+0x10>
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d106      	bne.n	800aa5a <_strtol_l.constprop.0+0x1e>
 800aa4c:	f001 fa38 	bl	800bec0 <__errno>
 800aa50:	2316      	movs	r3, #22
 800aa52:	6003      	str	r3, [r0, #0]
 800aa54:	2000      	movs	r0, #0
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	4834      	ldr	r0, [pc, #208]	@ (800ab2c <_strtol_l.constprop.0+0xf0>)
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	462a      	mov	r2, r5
 800aa60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa64:	5d06      	ldrb	r6, [r0, r4]
 800aa66:	f016 0608 	ands.w	r6, r6, #8
 800aa6a:	d1f8      	bne.n	800aa5e <_strtol_l.constprop.0+0x22>
 800aa6c:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa6e:	d12d      	bne.n	800aacc <_strtol_l.constprop.0+0x90>
 800aa70:	782c      	ldrb	r4, [r5, #0]
 800aa72:	2601      	movs	r6, #1
 800aa74:	1c95      	adds	r5, r2, #2
 800aa76:	f033 0210 	bics.w	r2, r3, #16
 800aa7a:	d109      	bne.n	800aa90 <_strtol_l.constprop.0+0x54>
 800aa7c:	2c30      	cmp	r4, #48	@ 0x30
 800aa7e:	d12a      	bne.n	800aad6 <_strtol_l.constprop.0+0x9a>
 800aa80:	782a      	ldrb	r2, [r5, #0]
 800aa82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aa86:	2a58      	cmp	r2, #88	@ 0x58
 800aa88:	d125      	bne.n	800aad6 <_strtol_l.constprop.0+0x9a>
 800aa8a:	786c      	ldrb	r4, [r5, #1]
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	3502      	adds	r5, #2
 800aa90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa94:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa98:	2200      	movs	r2, #0
 800aa9a:	fbbc f9f3 	udiv	r9, ip, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	fb03 ca19 	mls	sl, r3, r9, ip
 800aaa4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aaa8:	2f09      	cmp	r7, #9
 800aaaa:	d81b      	bhi.n	800aae4 <_strtol_l.constprop.0+0xa8>
 800aaac:	463c      	mov	r4, r7
 800aaae:	42a3      	cmp	r3, r4
 800aab0:	dd27      	ble.n	800ab02 <_strtol_l.constprop.0+0xc6>
 800aab2:	1c57      	adds	r7, r2, #1
 800aab4:	d007      	beq.n	800aac6 <_strtol_l.constprop.0+0x8a>
 800aab6:	4581      	cmp	r9, r0
 800aab8:	d320      	bcc.n	800aafc <_strtol_l.constprop.0+0xc0>
 800aaba:	d101      	bne.n	800aac0 <_strtol_l.constprop.0+0x84>
 800aabc:	45a2      	cmp	sl, r4
 800aabe:	db1d      	blt.n	800aafc <_strtol_l.constprop.0+0xc0>
 800aac0:	fb00 4003 	mla	r0, r0, r3, r4
 800aac4:	2201      	movs	r2, #1
 800aac6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aaca:	e7eb      	b.n	800aaa4 <_strtol_l.constprop.0+0x68>
 800aacc:	2c2b      	cmp	r4, #43	@ 0x2b
 800aace:	bf04      	itt	eq
 800aad0:	782c      	ldrbeq	r4, [r5, #0]
 800aad2:	1c95      	addeq	r5, r2, #2
 800aad4:	e7cf      	b.n	800aa76 <_strtol_l.constprop.0+0x3a>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1da      	bne.n	800aa90 <_strtol_l.constprop.0+0x54>
 800aada:	2c30      	cmp	r4, #48	@ 0x30
 800aadc:	bf0c      	ite	eq
 800aade:	2308      	moveq	r3, #8
 800aae0:	230a      	movne	r3, #10
 800aae2:	e7d5      	b.n	800aa90 <_strtol_l.constprop.0+0x54>
 800aae4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aae8:	2f19      	cmp	r7, #25
 800aaea:	d801      	bhi.n	800aaf0 <_strtol_l.constprop.0+0xb4>
 800aaec:	3c37      	subs	r4, #55	@ 0x37
 800aaee:	e7de      	b.n	800aaae <_strtol_l.constprop.0+0x72>
 800aaf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aaf4:	2f19      	cmp	r7, #25
 800aaf6:	d804      	bhi.n	800ab02 <_strtol_l.constprop.0+0xc6>
 800aaf8:	3c57      	subs	r4, #87	@ 0x57
 800aafa:	e7d8      	b.n	800aaae <_strtol_l.constprop.0+0x72>
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	e7e1      	b.n	800aac6 <_strtol_l.constprop.0+0x8a>
 800ab02:	1c53      	adds	r3, r2, #1
 800ab04:	d108      	bne.n	800ab18 <_strtol_l.constprop.0+0xdc>
 800ab06:	2322      	movs	r3, #34	@ 0x22
 800ab08:	f8ce 3000 	str.w	r3, [lr]
 800ab0c:	4660      	mov	r0, ip
 800ab0e:	f1b8 0f00 	cmp.w	r8, #0
 800ab12:	d0a0      	beq.n	800aa56 <_strtol_l.constprop.0+0x1a>
 800ab14:	1e69      	subs	r1, r5, #1
 800ab16:	e006      	b.n	800ab26 <_strtol_l.constprop.0+0xea>
 800ab18:	b106      	cbz	r6, 800ab1c <_strtol_l.constprop.0+0xe0>
 800ab1a:	4240      	negs	r0, r0
 800ab1c:	f1b8 0f00 	cmp.w	r8, #0
 800ab20:	d099      	beq.n	800aa56 <_strtol_l.constprop.0+0x1a>
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	d1f6      	bne.n	800ab14 <_strtol_l.constprop.0+0xd8>
 800ab26:	f8c8 1000 	str.w	r1, [r8]
 800ab2a:	e794      	b.n	800aa56 <_strtol_l.constprop.0+0x1a>
 800ab2c:	0800ee61 	.word	0x0800ee61

0800ab30 <_strtol_r>:
 800ab30:	f7ff bf84 	b.w	800aa3c <_strtol_l.constprop.0>

0800ab34 <_strtoul_l.constprop.0>:
 800ab34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4e34      	ldr	r6, [pc, #208]	@ (800ac0c <_strtoul_l.constprop.0+0xd8>)
 800ab3a:	4686      	mov	lr, r0
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab44:	5d37      	ldrb	r7, [r6, r4]
 800ab46:	f017 0708 	ands.w	r7, r7, #8
 800ab4a:	d1f8      	bne.n	800ab3e <_strtoul_l.constprop.0+0xa>
 800ab4c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab4e:	d12f      	bne.n	800abb0 <_strtoul_l.constprop.0+0x7c>
 800ab50:	782c      	ldrb	r4, [r5, #0]
 800ab52:	2701      	movs	r7, #1
 800ab54:	1c85      	adds	r5, r0, #2
 800ab56:	f033 0010 	bics.w	r0, r3, #16
 800ab5a:	d109      	bne.n	800ab70 <_strtoul_l.constprop.0+0x3c>
 800ab5c:	2c30      	cmp	r4, #48	@ 0x30
 800ab5e:	d12c      	bne.n	800abba <_strtoul_l.constprop.0+0x86>
 800ab60:	7828      	ldrb	r0, [r5, #0]
 800ab62:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ab66:	2858      	cmp	r0, #88	@ 0x58
 800ab68:	d127      	bne.n	800abba <_strtoul_l.constprop.0+0x86>
 800ab6a:	786c      	ldrb	r4, [r5, #1]
 800ab6c:	2310      	movs	r3, #16
 800ab6e:	3502      	adds	r5, #2
 800ab70:	f04f 38ff 	mov.w	r8, #4294967295
 800ab74:	2600      	movs	r6, #0
 800ab76:	fbb8 f8f3 	udiv	r8, r8, r3
 800ab7a:	fb03 f908 	mul.w	r9, r3, r8
 800ab7e:	ea6f 0909 	mvn.w	r9, r9
 800ab82:	4630      	mov	r0, r6
 800ab84:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ab88:	f1bc 0f09 	cmp.w	ip, #9
 800ab8c:	d81c      	bhi.n	800abc8 <_strtoul_l.constprop.0+0x94>
 800ab8e:	4664      	mov	r4, ip
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	dd2a      	ble.n	800abea <_strtoul_l.constprop.0+0xb6>
 800ab94:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ab98:	d007      	beq.n	800abaa <_strtoul_l.constprop.0+0x76>
 800ab9a:	4580      	cmp	r8, r0
 800ab9c:	d322      	bcc.n	800abe4 <_strtoul_l.constprop.0+0xb0>
 800ab9e:	d101      	bne.n	800aba4 <_strtoul_l.constprop.0+0x70>
 800aba0:	45a1      	cmp	r9, r4
 800aba2:	db1f      	blt.n	800abe4 <_strtoul_l.constprop.0+0xb0>
 800aba4:	fb00 4003 	mla	r0, r0, r3, r4
 800aba8:	2601      	movs	r6, #1
 800abaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abae:	e7e9      	b.n	800ab84 <_strtoul_l.constprop.0+0x50>
 800abb0:	2c2b      	cmp	r4, #43	@ 0x2b
 800abb2:	bf04      	itt	eq
 800abb4:	782c      	ldrbeq	r4, [r5, #0]
 800abb6:	1c85      	addeq	r5, r0, #2
 800abb8:	e7cd      	b.n	800ab56 <_strtoul_l.constprop.0+0x22>
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1d8      	bne.n	800ab70 <_strtoul_l.constprop.0+0x3c>
 800abbe:	2c30      	cmp	r4, #48	@ 0x30
 800abc0:	bf0c      	ite	eq
 800abc2:	2308      	moveq	r3, #8
 800abc4:	230a      	movne	r3, #10
 800abc6:	e7d3      	b.n	800ab70 <_strtoul_l.constprop.0+0x3c>
 800abc8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800abcc:	f1bc 0f19 	cmp.w	ip, #25
 800abd0:	d801      	bhi.n	800abd6 <_strtoul_l.constprop.0+0xa2>
 800abd2:	3c37      	subs	r4, #55	@ 0x37
 800abd4:	e7dc      	b.n	800ab90 <_strtoul_l.constprop.0+0x5c>
 800abd6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800abda:	f1bc 0f19 	cmp.w	ip, #25
 800abde:	d804      	bhi.n	800abea <_strtoul_l.constprop.0+0xb6>
 800abe0:	3c57      	subs	r4, #87	@ 0x57
 800abe2:	e7d5      	b.n	800ab90 <_strtoul_l.constprop.0+0x5c>
 800abe4:	f04f 36ff 	mov.w	r6, #4294967295
 800abe8:	e7df      	b.n	800abaa <_strtoul_l.constprop.0+0x76>
 800abea:	1c73      	adds	r3, r6, #1
 800abec:	d106      	bne.n	800abfc <_strtoul_l.constprop.0+0xc8>
 800abee:	2322      	movs	r3, #34	@ 0x22
 800abf0:	f8ce 3000 	str.w	r3, [lr]
 800abf4:	4630      	mov	r0, r6
 800abf6:	b932      	cbnz	r2, 800ac06 <_strtoul_l.constprop.0+0xd2>
 800abf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfc:	b107      	cbz	r7, 800ac00 <_strtoul_l.constprop.0+0xcc>
 800abfe:	4240      	negs	r0, r0
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d0f9      	beq.n	800abf8 <_strtoul_l.constprop.0+0xc4>
 800ac04:	b106      	cbz	r6, 800ac08 <_strtoul_l.constprop.0+0xd4>
 800ac06:	1e69      	subs	r1, r5, #1
 800ac08:	6011      	str	r1, [r2, #0]
 800ac0a:	e7f5      	b.n	800abf8 <_strtoul_l.constprop.0+0xc4>
 800ac0c:	0800ee61 	.word	0x0800ee61

0800ac10 <strtoul>:
 800ac10:	4613      	mov	r3, r2
 800ac12:	460a      	mov	r2, r1
 800ac14:	4601      	mov	r1, r0
 800ac16:	4802      	ldr	r0, [pc, #8]	@ (800ac20 <strtoul+0x10>)
 800ac18:	6800      	ldr	r0, [r0, #0]
 800ac1a:	f7ff bf8b 	b.w	800ab34 <_strtoul_l.constprop.0>
 800ac1e:	bf00      	nop
 800ac20:	200001b4 	.word	0x200001b4

0800ac24 <__cvt>:
 800ac24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac28:	ec57 6b10 	vmov	r6, r7, d0
 800ac2c:	2f00      	cmp	r7, #0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	4619      	mov	r1, r3
 800ac32:	463b      	mov	r3, r7
 800ac34:	bfbb      	ittet	lt
 800ac36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ac3a:	461f      	movlt	r7, r3
 800ac3c:	2300      	movge	r3, #0
 800ac3e:	232d      	movlt	r3, #45	@ 0x2d
 800ac40:	700b      	strb	r3, [r1, #0]
 800ac42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ac48:	4691      	mov	r9, r2
 800ac4a:	f023 0820 	bic.w	r8, r3, #32
 800ac4e:	bfbc      	itt	lt
 800ac50:	4632      	movlt	r2, r6
 800ac52:	4616      	movlt	r6, r2
 800ac54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ac58:	d005      	beq.n	800ac66 <__cvt+0x42>
 800ac5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ac5e:	d100      	bne.n	800ac62 <__cvt+0x3e>
 800ac60:	3401      	adds	r4, #1
 800ac62:	2102      	movs	r1, #2
 800ac64:	e000      	b.n	800ac68 <__cvt+0x44>
 800ac66:	2103      	movs	r1, #3
 800ac68:	ab03      	add	r3, sp, #12
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	ab02      	add	r3, sp, #8
 800ac6e:	9300      	str	r3, [sp, #0]
 800ac70:	ec47 6b10 	vmov	d0, r6, r7
 800ac74:	4653      	mov	r3, sl
 800ac76:	4622      	mov	r2, r4
 800ac78:	f001 f9f6 	bl	800c068 <_dtoa_r>
 800ac7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ac80:	4605      	mov	r5, r0
 800ac82:	d119      	bne.n	800acb8 <__cvt+0x94>
 800ac84:	f019 0f01 	tst.w	r9, #1
 800ac88:	d00e      	beq.n	800aca8 <__cvt+0x84>
 800ac8a:	eb00 0904 	add.w	r9, r0, r4
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2300      	movs	r3, #0
 800ac92:	4630      	mov	r0, r6
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 ff27 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac9a:	b108      	cbz	r0, 800aca0 <__cvt+0x7c>
 800ac9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800aca0:	2230      	movs	r2, #48	@ 0x30
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	454b      	cmp	r3, r9
 800aca6:	d31e      	bcc.n	800ace6 <__cvt+0xc2>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acac:	1b5b      	subs	r3, r3, r5
 800acae:	4628      	mov	r0, r5
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	b004      	add	sp, #16
 800acb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800acbc:	eb00 0904 	add.w	r9, r0, r4
 800acc0:	d1e5      	bne.n	800ac8e <__cvt+0x6a>
 800acc2:	7803      	ldrb	r3, [r0, #0]
 800acc4:	2b30      	cmp	r3, #48	@ 0x30
 800acc6:	d10a      	bne.n	800acde <__cvt+0xba>
 800acc8:	2200      	movs	r2, #0
 800acca:	2300      	movs	r3, #0
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	f7f5 ff0a 	bl	8000ae8 <__aeabi_dcmpeq>
 800acd4:	b918      	cbnz	r0, 800acde <__cvt+0xba>
 800acd6:	f1c4 0401 	rsb	r4, r4, #1
 800acda:	f8ca 4000 	str.w	r4, [sl]
 800acde:	f8da 3000 	ldr.w	r3, [sl]
 800ace2:	4499      	add	r9, r3
 800ace4:	e7d3      	b.n	800ac8e <__cvt+0x6a>
 800ace6:	1c59      	adds	r1, r3, #1
 800ace8:	9103      	str	r1, [sp, #12]
 800acea:	701a      	strb	r2, [r3, #0]
 800acec:	e7d9      	b.n	800aca2 <__cvt+0x7e>

0800acee <__exponent>:
 800acee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acf0:	2900      	cmp	r1, #0
 800acf2:	bfba      	itte	lt
 800acf4:	4249      	neglt	r1, r1
 800acf6:	232d      	movlt	r3, #45	@ 0x2d
 800acf8:	232b      	movge	r3, #43	@ 0x2b
 800acfa:	2909      	cmp	r1, #9
 800acfc:	7002      	strb	r2, [r0, #0]
 800acfe:	7043      	strb	r3, [r0, #1]
 800ad00:	dd29      	ble.n	800ad56 <__exponent+0x68>
 800ad02:	f10d 0307 	add.w	r3, sp, #7
 800ad06:	461d      	mov	r5, r3
 800ad08:	270a      	movs	r7, #10
 800ad0a:	461a      	mov	r2, r3
 800ad0c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad10:	fb07 1416 	mls	r4, r7, r6, r1
 800ad14:	3430      	adds	r4, #48	@ 0x30
 800ad16:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad1a:	460c      	mov	r4, r1
 800ad1c:	2c63      	cmp	r4, #99	@ 0x63
 800ad1e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad22:	4631      	mov	r1, r6
 800ad24:	dcf1      	bgt.n	800ad0a <__exponent+0x1c>
 800ad26:	3130      	adds	r1, #48	@ 0x30
 800ad28:	1e94      	subs	r4, r2, #2
 800ad2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ad2e:	1c41      	adds	r1, r0, #1
 800ad30:	4623      	mov	r3, r4
 800ad32:	42ab      	cmp	r3, r5
 800ad34:	d30a      	bcc.n	800ad4c <__exponent+0x5e>
 800ad36:	f10d 0309 	add.w	r3, sp, #9
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	42ac      	cmp	r4, r5
 800ad3e:	bf88      	it	hi
 800ad40:	2300      	movhi	r3, #0
 800ad42:	3302      	adds	r3, #2
 800ad44:	4403      	add	r3, r0
 800ad46:	1a18      	subs	r0, r3, r0
 800ad48:	b003      	add	sp, #12
 800ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ad50:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ad54:	e7ed      	b.n	800ad32 <__exponent+0x44>
 800ad56:	2330      	movs	r3, #48	@ 0x30
 800ad58:	3130      	adds	r1, #48	@ 0x30
 800ad5a:	7083      	strb	r3, [r0, #2]
 800ad5c:	70c1      	strb	r1, [r0, #3]
 800ad5e:	1d03      	adds	r3, r0, #4
 800ad60:	e7f1      	b.n	800ad46 <__exponent+0x58>
	...

0800ad64 <_printf_float>:
 800ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad68:	b08d      	sub	sp, #52	@ 0x34
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ad70:	4616      	mov	r6, r2
 800ad72:	461f      	mov	r7, r3
 800ad74:	4605      	mov	r5, r0
 800ad76:	f001 f859 	bl	800be2c <_localeconv_r>
 800ad7a:	6803      	ldr	r3, [r0, #0]
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f5 fa86 	bl	8000290 <strlen>
 800ad84:	2300      	movs	r3, #0
 800ad86:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad88:	f8d8 3000 	ldr.w	r3, [r8]
 800ad8c:	9005      	str	r0, [sp, #20]
 800ad8e:	3307      	adds	r3, #7
 800ad90:	f023 0307 	bic.w	r3, r3, #7
 800ad94:	f103 0208 	add.w	r2, r3, #8
 800ad98:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ad9c:	f8d4 b000 	ldr.w	fp, [r4]
 800ada0:	f8c8 2000 	str.w	r2, [r8]
 800ada4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ada8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800adac:	9307      	str	r3, [sp, #28]
 800adae:	f8cd 8018 	str.w	r8, [sp, #24]
 800adb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800adb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adba:	4b9c      	ldr	r3, [pc, #624]	@ (800b02c <_printf_float+0x2c8>)
 800adbc:	f04f 32ff 	mov.w	r2, #4294967295
 800adc0:	f7f5 fec4 	bl	8000b4c <__aeabi_dcmpun>
 800adc4:	bb70      	cbnz	r0, 800ae24 <_printf_float+0xc0>
 800adc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800adca:	4b98      	ldr	r3, [pc, #608]	@ (800b02c <_printf_float+0x2c8>)
 800adcc:	f04f 32ff 	mov.w	r2, #4294967295
 800add0:	f7f5 fe9e 	bl	8000b10 <__aeabi_dcmple>
 800add4:	bb30      	cbnz	r0, 800ae24 <_printf_float+0xc0>
 800add6:	2200      	movs	r2, #0
 800add8:	2300      	movs	r3, #0
 800adda:	4640      	mov	r0, r8
 800addc:	4649      	mov	r1, r9
 800adde:	f7f5 fe8d 	bl	8000afc <__aeabi_dcmplt>
 800ade2:	b110      	cbz	r0, 800adea <_printf_float+0x86>
 800ade4:	232d      	movs	r3, #45	@ 0x2d
 800ade6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adea:	4a91      	ldr	r2, [pc, #580]	@ (800b030 <_printf_float+0x2cc>)
 800adec:	4b91      	ldr	r3, [pc, #580]	@ (800b034 <_printf_float+0x2d0>)
 800adee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800adf2:	bf94      	ite	ls
 800adf4:	4690      	movls	r8, r2
 800adf6:	4698      	movhi	r8, r3
 800adf8:	2303      	movs	r3, #3
 800adfa:	6123      	str	r3, [r4, #16]
 800adfc:	f02b 0304 	bic.w	r3, fp, #4
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	f04f 0900 	mov.w	r9, #0
 800ae06:	9700      	str	r7, [sp, #0]
 800ae08:	4633      	mov	r3, r6
 800ae0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 f9d2 	bl	800b1b8 <_printf_common>
 800ae14:	3001      	adds	r0, #1
 800ae16:	f040 808d 	bne.w	800af34 <_printf_float+0x1d0>
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	b00d      	add	sp, #52	@ 0x34
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	4642      	mov	r2, r8
 800ae26:	464b      	mov	r3, r9
 800ae28:	4640      	mov	r0, r8
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	f7f5 fe8e 	bl	8000b4c <__aeabi_dcmpun>
 800ae30:	b140      	cbz	r0, 800ae44 <_printf_float+0xe0>
 800ae32:	464b      	mov	r3, r9
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bfbc      	itt	lt
 800ae38:	232d      	movlt	r3, #45	@ 0x2d
 800ae3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ae3e:	4a7e      	ldr	r2, [pc, #504]	@ (800b038 <_printf_float+0x2d4>)
 800ae40:	4b7e      	ldr	r3, [pc, #504]	@ (800b03c <_printf_float+0x2d8>)
 800ae42:	e7d4      	b.n	800adee <_printf_float+0x8a>
 800ae44:	6863      	ldr	r3, [r4, #4]
 800ae46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ae4a:	9206      	str	r2, [sp, #24]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	d13b      	bne.n	800aec8 <_printf_float+0x164>
 800ae50:	2306      	movs	r3, #6
 800ae52:	6063      	str	r3, [r4, #4]
 800ae54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6022      	str	r2, [r4, #0]
 800ae5c:	9303      	str	r3, [sp, #12]
 800ae5e:	ab0a      	add	r3, sp, #40	@ 0x28
 800ae60:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ae64:	ab09      	add	r3, sp, #36	@ 0x24
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	6861      	ldr	r1, [r4, #4]
 800ae6a:	ec49 8b10 	vmov	d0, r8, r9
 800ae6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ae72:	4628      	mov	r0, r5
 800ae74:	f7ff fed6 	bl	800ac24 <__cvt>
 800ae78:	9b06      	ldr	r3, [sp, #24]
 800ae7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae7c:	2b47      	cmp	r3, #71	@ 0x47
 800ae7e:	4680      	mov	r8, r0
 800ae80:	d129      	bne.n	800aed6 <_printf_float+0x172>
 800ae82:	1cc8      	adds	r0, r1, #3
 800ae84:	db02      	blt.n	800ae8c <_printf_float+0x128>
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	4299      	cmp	r1, r3
 800ae8a:	dd41      	ble.n	800af10 <_printf_float+0x1ac>
 800ae8c:	f1aa 0a02 	sub.w	sl, sl, #2
 800ae90:	fa5f fa8a 	uxtb.w	sl, sl
 800ae94:	3901      	subs	r1, #1
 800ae96:	4652      	mov	r2, sl
 800ae98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ae9c:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae9e:	f7ff ff26 	bl	800acee <__exponent>
 800aea2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aea4:	1813      	adds	r3, r2, r0
 800aea6:	2a01      	cmp	r2, #1
 800aea8:	4681      	mov	r9, r0
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	dc02      	bgt.n	800aeb4 <_printf_float+0x150>
 800aeae:	6822      	ldr	r2, [r4, #0]
 800aeb0:	07d2      	lsls	r2, r2, #31
 800aeb2:	d501      	bpl.n	800aeb8 <_printf_float+0x154>
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	6123      	str	r3, [r4, #16]
 800aeb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0a2      	beq.n	800ae06 <_printf_float+0xa2>
 800aec0:	232d      	movs	r3, #45	@ 0x2d
 800aec2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec6:	e79e      	b.n	800ae06 <_printf_float+0xa2>
 800aec8:	9a06      	ldr	r2, [sp, #24]
 800aeca:	2a47      	cmp	r2, #71	@ 0x47
 800aecc:	d1c2      	bne.n	800ae54 <_printf_float+0xf0>
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1c0      	bne.n	800ae54 <_printf_float+0xf0>
 800aed2:	2301      	movs	r3, #1
 800aed4:	e7bd      	b.n	800ae52 <_printf_float+0xee>
 800aed6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aeda:	d9db      	bls.n	800ae94 <_printf_float+0x130>
 800aedc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800aee0:	d118      	bne.n	800af14 <_printf_float+0x1b0>
 800aee2:	2900      	cmp	r1, #0
 800aee4:	6863      	ldr	r3, [r4, #4]
 800aee6:	dd0b      	ble.n	800af00 <_printf_float+0x19c>
 800aee8:	6121      	str	r1, [r4, #16]
 800aeea:	b913      	cbnz	r3, 800aef2 <_printf_float+0x18e>
 800aeec:	6822      	ldr	r2, [r4, #0]
 800aeee:	07d0      	lsls	r0, r2, #31
 800aef0:	d502      	bpl.n	800aef8 <_printf_float+0x194>
 800aef2:	3301      	adds	r3, #1
 800aef4:	440b      	add	r3, r1
 800aef6:	6123      	str	r3, [r4, #16]
 800aef8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aefa:	f04f 0900 	mov.w	r9, #0
 800aefe:	e7db      	b.n	800aeb8 <_printf_float+0x154>
 800af00:	b913      	cbnz	r3, 800af08 <_printf_float+0x1a4>
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	07d2      	lsls	r2, r2, #31
 800af06:	d501      	bpl.n	800af0c <_printf_float+0x1a8>
 800af08:	3302      	adds	r3, #2
 800af0a:	e7f4      	b.n	800aef6 <_printf_float+0x192>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e7f2      	b.n	800aef6 <_printf_float+0x192>
 800af10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af16:	4299      	cmp	r1, r3
 800af18:	db05      	blt.n	800af26 <_printf_float+0x1c2>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	6121      	str	r1, [r4, #16]
 800af1e:	07d8      	lsls	r0, r3, #31
 800af20:	d5ea      	bpl.n	800aef8 <_printf_float+0x194>
 800af22:	1c4b      	adds	r3, r1, #1
 800af24:	e7e7      	b.n	800aef6 <_printf_float+0x192>
 800af26:	2900      	cmp	r1, #0
 800af28:	bfd4      	ite	le
 800af2a:	f1c1 0202 	rsble	r2, r1, #2
 800af2e:	2201      	movgt	r2, #1
 800af30:	4413      	add	r3, r2
 800af32:	e7e0      	b.n	800aef6 <_printf_float+0x192>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	055a      	lsls	r2, r3, #21
 800af38:	d407      	bmi.n	800af4a <_printf_float+0x1e6>
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	4642      	mov	r2, r8
 800af3e:	4631      	mov	r1, r6
 800af40:	4628      	mov	r0, r5
 800af42:	47b8      	blx	r7
 800af44:	3001      	adds	r0, #1
 800af46:	d12b      	bne.n	800afa0 <_printf_float+0x23c>
 800af48:	e767      	b.n	800ae1a <_printf_float+0xb6>
 800af4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af4e:	f240 80dd 	bls.w	800b10c <_printf_float+0x3a8>
 800af52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af56:	2200      	movs	r2, #0
 800af58:	2300      	movs	r3, #0
 800af5a:	f7f5 fdc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d033      	beq.n	800afca <_printf_float+0x266>
 800af62:	4a37      	ldr	r2, [pc, #220]	@ (800b040 <_printf_float+0x2dc>)
 800af64:	2301      	movs	r3, #1
 800af66:	4631      	mov	r1, r6
 800af68:	4628      	mov	r0, r5
 800af6a:	47b8      	blx	r7
 800af6c:	3001      	adds	r0, #1
 800af6e:	f43f af54 	beq.w	800ae1a <_printf_float+0xb6>
 800af72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800af76:	4543      	cmp	r3, r8
 800af78:	db02      	blt.n	800af80 <_printf_float+0x21c>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	07d8      	lsls	r0, r3, #31
 800af7e:	d50f      	bpl.n	800afa0 <_printf_float+0x23c>
 800af80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af84:	4631      	mov	r1, r6
 800af86:	4628      	mov	r0, r5
 800af88:	47b8      	blx	r7
 800af8a:	3001      	adds	r0, #1
 800af8c:	f43f af45 	beq.w	800ae1a <_printf_float+0xb6>
 800af90:	f04f 0900 	mov.w	r9, #0
 800af94:	f108 38ff 	add.w	r8, r8, #4294967295
 800af98:	f104 0a1a 	add.w	sl, r4, #26
 800af9c:	45c8      	cmp	r8, r9
 800af9e:	dc09      	bgt.n	800afb4 <_printf_float+0x250>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	079b      	lsls	r3, r3, #30
 800afa4:	f100 8103 	bmi.w	800b1ae <_printf_float+0x44a>
 800afa8:	68e0      	ldr	r0, [r4, #12]
 800afaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afac:	4298      	cmp	r0, r3
 800afae:	bfb8      	it	lt
 800afb0:	4618      	movlt	r0, r3
 800afb2:	e734      	b.n	800ae1e <_printf_float+0xba>
 800afb4:	2301      	movs	r3, #1
 800afb6:	4652      	mov	r2, sl
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	f43f af2b 	beq.w	800ae1a <_printf_float+0xb6>
 800afc4:	f109 0901 	add.w	r9, r9, #1
 800afc8:	e7e8      	b.n	800af9c <_printf_float+0x238>
 800afca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc39      	bgt.n	800b044 <_printf_float+0x2e0>
 800afd0:	4a1b      	ldr	r2, [pc, #108]	@ (800b040 <_printf_float+0x2dc>)
 800afd2:	2301      	movs	r3, #1
 800afd4:	4631      	mov	r1, r6
 800afd6:	4628      	mov	r0, r5
 800afd8:	47b8      	blx	r7
 800afda:	3001      	adds	r0, #1
 800afdc:	f43f af1d 	beq.w	800ae1a <_printf_float+0xb6>
 800afe0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800afe4:	ea59 0303 	orrs.w	r3, r9, r3
 800afe8:	d102      	bne.n	800aff0 <_printf_float+0x28c>
 800afea:	6823      	ldr	r3, [r4, #0]
 800afec:	07d9      	lsls	r1, r3, #31
 800afee:	d5d7      	bpl.n	800afa0 <_printf_float+0x23c>
 800aff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aff4:	4631      	mov	r1, r6
 800aff6:	4628      	mov	r0, r5
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	f43f af0d 	beq.w	800ae1a <_printf_float+0xb6>
 800b000:	f04f 0a00 	mov.w	sl, #0
 800b004:	f104 0b1a 	add.w	fp, r4, #26
 800b008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00a:	425b      	negs	r3, r3
 800b00c:	4553      	cmp	r3, sl
 800b00e:	dc01      	bgt.n	800b014 <_printf_float+0x2b0>
 800b010:	464b      	mov	r3, r9
 800b012:	e793      	b.n	800af3c <_printf_float+0x1d8>
 800b014:	2301      	movs	r3, #1
 800b016:	465a      	mov	r2, fp
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f aefb 	beq.w	800ae1a <_printf_float+0xb6>
 800b024:	f10a 0a01 	add.w	sl, sl, #1
 800b028:	e7ee      	b.n	800b008 <_printf_float+0x2a4>
 800b02a:	bf00      	nop
 800b02c:	7fefffff 	.word	0x7fefffff
 800b030:	0800ef61 	.word	0x0800ef61
 800b034:	0800ef65 	.word	0x0800ef65
 800b038:	0800ef69 	.word	0x0800ef69
 800b03c:	0800ef6d 	.word	0x0800ef6d
 800b040:	0800ef71 	.word	0x0800ef71
 800b044:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b046:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b04a:	4553      	cmp	r3, sl
 800b04c:	bfa8      	it	ge
 800b04e:	4653      	movge	r3, sl
 800b050:	2b00      	cmp	r3, #0
 800b052:	4699      	mov	r9, r3
 800b054:	dc36      	bgt.n	800b0c4 <_printf_float+0x360>
 800b056:	f04f 0b00 	mov.w	fp, #0
 800b05a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b05e:	f104 021a 	add.w	r2, r4, #26
 800b062:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b064:	9306      	str	r3, [sp, #24]
 800b066:	eba3 0309 	sub.w	r3, r3, r9
 800b06a:	455b      	cmp	r3, fp
 800b06c:	dc31      	bgt.n	800b0d2 <_printf_float+0x36e>
 800b06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b070:	459a      	cmp	sl, r3
 800b072:	dc3a      	bgt.n	800b0ea <_printf_float+0x386>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	07da      	lsls	r2, r3, #31
 800b078:	d437      	bmi.n	800b0ea <_printf_float+0x386>
 800b07a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07c:	ebaa 0903 	sub.w	r9, sl, r3
 800b080:	9b06      	ldr	r3, [sp, #24]
 800b082:	ebaa 0303 	sub.w	r3, sl, r3
 800b086:	4599      	cmp	r9, r3
 800b088:	bfa8      	it	ge
 800b08a:	4699      	movge	r9, r3
 800b08c:	f1b9 0f00 	cmp.w	r9, #0
 800b090:	dc33      	bgt.n	800b0fa <_printf_float+0x396>
 800b092:	f04f 0800 	mov.w	r8, #0
 800b096:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b09a:	f104 0b1a 	add.w	fp, r4, #26
 800b09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a0:	ebaa 0303 	sub.w	r3, sl, r3
 800b0a4:	eba3 0309 	sub.w	r3, r3, r9
 800b0a8:	4543      	cmp	r3, r8
 800b0aa:	f77f af79 	ble.w	800afa0 <_printf_float+0x23c>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	465a      	mov	r2, fp
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	47b8      	blx	r7
 800b0b8:	3001      	adds	r0, #1
 800b0ba:	f43f aeae 	beq.w	800ae1a <_printf_float+0xb6>
 800b0be:	f108 0801 	add.w	r8, r8, #1
 800b0c2:	e7ec      	b.n	800b09e <_printf_float+0x33a>
 800b0c4:	4642      	mov	r2, r8
 800b0c6:	4631      	mov	r1, r6
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b8      	blx	r7
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d1c2      	bne.n	800b056 <_printf_float+0x2f2>
 800b0d0:	e6a3      	b.n	800ae1a <_printf_float+0xb6>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	9206      	str	r2, [sp, #24]
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	f43f ae9c 	beq.w	800ae1a <_printf_float+0xb6>
 800b0e2:	9a06      	ldr	r2, [sp, #24]
 800b0e4:	f10b 0b01 	add.w	fp, fp, #1
 800b0e8:	e7bb      	b.n	800b062 <_printf_float+0x2fe>
 800b0ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	47b8      	blx	r7
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	d1c0      	bne.n	800b07a <_printf_float+0x316>
 800b0f8:	e68f      	b.n	800ae1a <_printf_float+0xb6>
 800b0fa:	9a06      	ldr	r2, [sp, #24]
 800b0fc:	464b      	mov	r3, r9
 800b0fe:	4442      	add	r2, r8
 800b100:	4631      	mov	r1, r6
 800b102:	4628      	mov	r0, r5
 800b104:	47b8      	blx	r7
 800b106:	3001      	adds	r0, #1
 800b108:	d1c3      	bne.n	800b092 <_printf_float+0x32e>
 800b10a:	e686      	b.n	800ae1a <_printf_float+0xb6>
 800b10c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b110:	f1ba 0f01 	cmp.w	sl, #1
 800b114:	dc01      	bgt.n	800b11a <_printf_float+0x3b6>
 800b116:	07db      	lsls	r3, r3, #31
 800b118:	d536      	bpl.n	800b188 <_printf_float+0x424>
 800b11a:	2301      	movs	r3, #1
 800b11c:	4642      	mov	r2, r8
 800b11e:	4631      	mov	r1, r6
 800b120:	4628      	mov	r0, r5
 800b122:	47b8      	blx	r7
 800b124:	3001      	adds	r0, #1
 800b126:	f43f ae78 	beq.w	800ae1a <_printf_float+0xb6>
 800b12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b12e:	4631      	mov	r1, r6
 800b130:	4628      	mov	r0, r5
 800b132:	47b8      	blx	r7
 800b134:	3001      	adds	r0, #1
 800b136:	f43f ae70 	beq.w	800ae1a <_printf_float+0xb6>
 800b13a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b13e:	2200      	movs	r2, #0
 800b140:	2300      	movs	r3, #0
 800b142:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b146:	f7f5 fccf 	bl	8000ae8 <__aeabi_dcmpeq>
 800b14a:	b9c0      	cbnz	r0, 800b17e <_printf_float+0x41a>
 800b14c:	4653      	mov	r3, sl
 800b14e:	f108 0201 	add.w	r2, r8, #1
 800b152:	4631      	mov	r1, r6
 800b154:	4628      	mov	r0, r5
 800b156:	47b8      	blx	r7
 800b158:	3001      	adds	r0, #1
 800b15a:	d10c      	bne.n	800b176 <_printf_float+0x412>
 800b15c:	e65d      	b.n	800ae1a <_printf_float+0xb6>
 800b15e:	2301      	movs	r3, #1
 800b160:	465a      	mov	r2, fp
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	f43f ae56 	beq.w	800ae1a <_printf_float+0xb6>
 800b16e:	f108 0801 	add.w	r8, r8, #1
 800b172:	45d0      	cmp	r8, sl
 800b174:	dbf3      	blt.n	800b15e <_printf_float+0x3fa>
 800b176:	464b      	mov	r3, r9
 800b178:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b17c:	e6df      	b.n	800af3e <_printf_float+0x1da>
 800b17e:	f04f 0800 	mov.w	r8, #0
 800b182:	f104 0b1a 	add.w	fp, r4, #26
 800b186:	e7f4      	b.n	800b172 <_printf_float+0x40e>
 800b188:	2301      	movs	r3, #1
 800b18a:	4642      	mov	r2, r8
 800b18c:	e7e1      	b.n	800b152 <_printf_float+0x3ee>
 800b18e:	2301      	movs	r3, #1
 800b190:	464a      	mov	r2, r9
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae3e 	beq.w	800ae1a <_printf_float+0xb6>
 800b19e:	f108 0801 	add.w	r8, r8, #1
 800b1a2:	68e3      	ldr	r3, [r4, #12]
 800b1a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b1a6:	1a5b      	subs	r3, r3, r1
 800b1a8:	4543      	cmp	r3, r8
 800b1aa:	dcf0      	bgt.n	800b18e <_printf_float+0x42a>
 800b1ac:	e6fc      	b.n	800afa8 <_printf_float+0x244>
 800b1ae:	f04f 0800 	mov.w	r8, #0
 800b1b2:	f104 0919 	add.w	r9, r4, #25
 800b1b6:	e7f4      	b.n	800b1a2 <_printf_float+0x43e>

0800b1b8 <_printf_common>:
 800b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1bc:	4616      	mov	r6, r2
 800b1be:	4698      	mov	r8, r3
 800b1c0:	688a      	ldr	r2, [r1, #8]
 800b1c2:	690b      	ldr	r3, [r1, #16]
 800b1c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	bfb8      	it	lt
 800b1cc:	4613      	movlt	r3, r2
 800b1ce:	6033      	str	r3, [r6, #0]
 800b1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1d4:	4607      	mov	r7, r0
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	b10a      	cbz	r2, 800b1de <_printf_common+0x26>
 800b1da:	3301      	adds	r3, #1
 800b1dc:	6033      	str	r3, [r6, #0]
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	0699      	lsls	r1, r3, #26
 800b1e2:	bf42      	ittt	mi
 800b1e4:	6833      	ldrmi	r3, [r6, #0]
 800b1e6:	3302      	addmi	r3, #2
 800b1e8:	6033      	strmi	r3, [r6, #0]
 800b1ea:	6825      	ldr	r5, [r4, #0]
 800b1ec:	f015 0506 	ands.w	r5, r5, #6
 800b1f0:	d106      	bne.n	800b200 <_printf_common+0x48>
 800b1f2:	f104 0a19 	add.w	sl, r4, #25
 800b1f6:	68e3      	ldr	r3, [r4, #12]
 800b1f8:	6832      	ldr	r2, [r6, #0]
 800b1fa:	1a9b      	subs	r3, r3, r2
 800b1fc:	42ab      	cmp	r3, r5
 800b1fe:	dc26      	bgt.n	800b24e <_printf_common+0x96>
 800b200:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b204:	6822      	ldr	r2, [r4, #0]
 800b206:	3b00      	subs	r3, #0
 800b208:	bf18      	it	ne
 800b20a:	2301      	movne	r3, #1
 800b20c:	0692      	lsls	r2, r2, #26
 800b20e:	d42b      	bmi.n	800b268 <_printf_common+0xb0>
 800b210:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b214:	4641      	mov	r1, r8
 800b216:	4638      	mov	r0, r7
 800b218:	47c8      	blx	r9
 800b21a:	3001      	adds	r0, #1
 800b21c:	d01e      	beq.n	800b25c <_printf_common+0xa4>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	6922      	ldr	r2, [r4, #16]
 800b222:	f003 0306 	and.w	r3, r3, #6
 800b226:	2b04      	cmp	r3, #4
 800b228:	bf02      	ittt	eq
 800b22a:	68e5      	ldreq	r5, [r4, #12]
 800b22c:	6833      	ldreq	r3, [r6, #0]
 800b22e:	1aed      	subeq	r5, r5, r3
 800b230:	68a3      	ldr	r3, [r4, #8]
 800b232:	bf0c      	ite	eq
 800b234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b238:	2500      	movne	r5, #0
 800b23a:	4293      	cmp	r3, r2
 800b23c:	bfc4      	itt	gt
 800b23e:	1a9b      	subgt	r3, r3, r2
 800b240:	18ed      	addgt	r5, r5, r3
 800b242:	2600      	movs	r6, #0
 800b244:	341a      	adds	r4, #26
 800b246:	42b5      	cmp	r5, r6
 800b248:	d11a      	bne.n	800b280 <_printf_common+0xc8>
 800b24a:	2000      	movs	r0, #0
 800b24c:	e008      	b.n	800b260 <_printf_common+0xa8>
 800b24e:	2301      	movs	r3, #1
 800b250:	4652      	mov	r2, sl
 800b252:	4641      	mov	r1, r8
 800b254:	4638      	mov	r0, r7
 800b256:	47c8      	blx	r9
 800b258:	3001      	adds	r0, #1
 800b25a:	d103      	bne.n	800b264 <_printf_common+0xac>
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b264:	3501      	adds	r5, #1
 800b266:	e7c6      	b.n	800b1f6 <_printf_common+0x3e>
 800b268:	18e1      	adds	r1, r4, r3
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	2030      	movs	r0, #48	@ 0x30
 800b26e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b272:	4422      	add	r2, r4
 800b274:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b278:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b27c:	3302      	adds	r3, #2
 800b27e:	e7c7      	b.n	800b210 <_printf_common+0x58>
 800b280:	2301      	movs	r3, #1
 800b282:	4622      	mov	r2, r4
 800b284:	4641      	mov	r1, r8
 800b286:	4638      	mov	r0, r7
 800b288:	47c8      	blx	r9
 800b28a:	3001      	adds	r0, #1
 800b28c:	d0e6      	beq.n	800b25c <_printf_common+0xa4>
 800b28e:	3601      	adds	r6, #1
 800b290:	e7d9      	b.n	800b246 <_printf_common+0x8e>
	...

0800b294 <_printf_i>:
 800b294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b298:	7e0f      	ldrb	r7, [r1, #24]
 800b29a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b29c:	2f78      	cmp	r7, #120	@ 0x78
 800b29e:	4691      	mov	r9, r2
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	460c      	mov	r4, r1
 800b2a4:	469a      	mov	sl, r3
 800b2a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2aa:	d807      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ac:	2f62      	cmp	r7, #98	@ 0x62
 800b2ae:	d80a      	bhi.n	800b2c6 <_printf_i+0x32>
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	f000 80d2 	beq.w	800b45a <_printf_i+0x1c6>
 800b2b6:	2f58      	cmp	r7, #88	@ 0x58
 800b2b8:	f000 80b9 	beq.w	800b42e <_printf_i+0x19a>
 800b2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2c4:	e03a      	b.n	800b33c <_printf_i+0xa8>
 800b2c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2ca:	2b15      	cmp	r3, #21
 800b2cc:	d8f6      	bhi.n	800b2bc <_printf_i+0x28>
 800b2ce:	a101      	add	r1, pc, #4	@ (adr r1, 800b2d4 <_printf_i+0x40>)
 800b2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2d4:	0800b32d 	.word	0x0800b32d
 800b2d8:	0800b341 	.word	0x0800b341
 800b2dc:	0800b2bd 	.word	0x0800b2bd
 800b2e0:	0800b2bd 	.word	0x0800b2bd
 800b2e4:	0800b2bd 	.word	0x0800b2bd
 800b2e8:	0800b2bd 	.word	0x0800b2bd
 800b2ec:	0800b341 	.word	0x0800b341
 800b2f0:	0800b2bd 	.word	0x0800b2bd
 800b2f4:	0800b2bd 	.word	0x0800b2bd
 800b2f8:	0800b2bd 	.word	0x0800b2bd
 800b2fc:	0800b2bd 	.word	0x0800b2bd
 800b300:	0800b441 	.word	0x0800b441
 800b304:	0800b36b 	.word	0x0800b36b
 800b308:	0800b3fb 	.word	0x0800b3fb
 800b30c:	0800b2bd 	.word	0x0800b2bd
 800b310:	0800b2bd 	.word	0x0800b2bd
 800b314:	0800b463 	.word	0x0800b463
 800b318:	0800b2bd 	.word	0x0800b2bd
 800b31c:	0800b36b 	.word	0x0800b36b
 800b320:	0800b2bd 	.word	0x0800b2bd
 800b324:	0800b2bd 	.word	0x0800b2bd
 800b328:	0800b403 	.word	0x0800b403
 800b32c:	6833      	ldr	r3, [r6, #0]
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	6032      	str	r2, [r6, #0]
 800b334:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b338:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b33c:	2301      	movs	r3, #1
 800b33e:	e09d      	b.n	800b47c <_printf_i+0x1e8>
 800b340:	6833      	ldr	r3, [r6, #0]
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	1d19      	adds	r1, r3, #4
 800b346:	6031      	str	r1, [r6, #0]
 800b348:	0606      	lsls	r6, r0, #24
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0xbc>
 800b34c:	681d      	ldr	r5, [r3, #0]
 800b34e:	e003      	b.n	800b358 <_printf_i+0xc4>
 800b350:	0645      	lsls	r5, r0, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0xb8>
 800b354:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b358:	2d00      	cmp	r5, #0
 800b35a:	da03      	bge.n	800b364 <_printf_i+0xd0>
 800b35c:	232d      	movs	r3, #45	@ 0x2d
 800b35e:	426d      	negs	r5, r5
 800b360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b364:	4859      	ldr	r0, [pc, #356]	@ (800b4cc <_printf_i+0x238>)
 800b366:	230a      	movs	r3, #10
 800b368:	e011      	b.n	800b38e <_printf_i+0xfa>
 800b36a:	6821      	ldr	r1, [r4, #0]
 800b36c:	6833      	ldr	r3, [r6, #0]
 800b36e:	0608      	lsls	r0, r1, #24
 800b370:	f853 5b04 	ldr.w	r5, [r3], #4
 800b374:	d402      	bmi.n	800b37c <_printf_i+0xe8>
 800b376:	0649      	lsls	r1, r1, #25
 800b378:	bf48      	it	mi
 800b37a:	b2ad      	uxthmi	r5, r5
 800b37c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b37e:	4853      	ldr	r0, [pc, #332]	@ (800b4cc <_printf_i+0x238>)
 800b380:	6033      	str	r3, [r6, #0]
 800b382:	bf14      	ite	ne
 800b384:	230a      	movne	r3, #10
 800b386:	2308      	moveq	r3, #8
 800b388:	2100      	movs	r1, #0
 800b38a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b38e:	6866      	ldr	r6, [r4, #4]
 800b390:	60a6      	str	r6, [r4, #8]
 800b392:	2e00      	cmp	r6, #0
 800b394:	bfa2      	ittt	ge
 800b396:	6821      	ldrge	r1, [r4, #0]
 800b398:	f021 0104 	bicge.w	r1, r1, #4
 800b39c:	6021      	strge	r1, [r4, #0]
 800b39e:	b90d      	cbnz	r5, 800b3a4 <_printf_i+0x110>
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	d04b      	beq.n	800b43c <_printf_i+0x1a8>
 800b3a4:	4616      	mov	r6, r2
 800b3a6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3aa:	fb03 5711 	mls	r7, r3, r1, r5
 800b3ae:	5dc7      	ldrb	r7, [r0, r7]
 800b3b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3b4:	462f      	mov	r7, r5
 800b3b6:	42bb      	cmp	r3, r7
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	d9f4      	bls.n	800b3a6 <_printf_i+0x112>
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	d10b      	bne.n	800b3d8 <_printf_i+0x144>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	07df      	lsls	r7, r3, #31
 800b3c4:	d508      	bpl.n	800b3d8 <_printf_i+0x144>
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	6861      	ldr	r1, [r4, #4]
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	bfde      	ittt	le
 800b3ce:	2330      	movle	r3, #48	@ 0x30
 800b3d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3d8:	1b92      	subs	r2, r2, r6
 800b3da:	6122      	str	r2, [r4, #16]
 800b3dc:	f8cd a000 	str.w	sl, [sp]
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	aa03      	add	r2, sp, #12
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	f7ff fee6 	bl	800b1b8 <_printf_common>
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d14a      	bne.n	800b486 <_printf_i+0x1f2>
 800b3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3f4:	b004      	add	sp, #16
 800b3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	f043 0320 	orr.w	r3, r3, #32
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	4833      	ldr	r0, [pc, #204]	@ (800b4d0 <_printf_i+0x23c>)
 800b404:	2778      	movs	r7, #120	@ 0x78
 800b406:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	6831      	ldr	r1, [r6, #0]
 800b40e:	061f      	lsls	r7, r3, #24
 800b410:	f851 5b04 	ldr.w	r5, [r1], #4
 800b414:	d402      	bmi.n	800b41c <_printf_i+0x188>
 800b416:	065f      	lsls	r7, r3, #25
 800b418:	bf48      	it	mi
 800b41a:	b2ad      	uxthmi	r5, r5
 800b41c:	6031      	str	r1, [r6, #0]
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	bf44      	itt	mi
 800b422:	f043 0320 	orrmi.w	r3, r3, #32
 800b426:	6023      	strmi	r3, [r4, #0]
 800b428:	b11d      	cbz	r5, 800b432 <_printf_i+0x19e>
 800b42a:	2310      	movs	r3, #16
 800b42c:	e7ac      	b.n	800b388 <_printf_i+0xf4>
 800b42e:	4827      	ldr	r0, [pc, #156]	@ (800b4cc <_printf_i+0x238>)
 800b430:	e7e9      	b.n	800b406 <_printf_i+0x172>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	f023 0320 	bic.w	r3, r3, #32
 800b438:	6023      	str	r3, [r4, #0]
 800b43a:	e7f6      	b.n	800b42a <_printf_i+0x196>
 800b43c:	4616      	mov	r6, r2
 800b43e:	e7bd      	b.n	800b3bc <_printf_i+0x128>
 800b440:	6833      	ldr	r3, [r6, #0]
 800b442:	6825      	ldr	r5, [r4, #0]
 800b444:	6961      	ldr	r1, [r4, #20]
 800b446:	1d18      	adds	r0, r3, #4
 800b448:	6030      	str	r0, [r6, #0]
 800b44a:	062e      	lsls	r6, r5, #24
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	d501      	bpl.n	800b454 <_printf_i+0x1c0>
 800b450:	6019      	str	r1, [r3, #0]
 800b452:	e002      	b.n	800b45a <_printf_i+0x1c6>
 800b454:	0668      	lsls	r0, r5, #25
 800b456:	d5fb      	bpl.n	800b450 <_printf_i+0x1bc>
 800b458:	8019      	strh	r1, [r3, #0]
 800b45a:	2300      	movs	r3, #0
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	4616      	mov	r6, r2
 800b460:	e7bc      	b.n	800b3dc <_printf_i+0x148>
 800b462:	6833      	ldr	r3, [r6, #0]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	6032      	str	r2, [r6, #0]
 800b468:	681e      	ldr	r6, [r3, #0]
 800b46a:	6862      	ldr	r2, [r4, #4]
 800b46c:	2100      	movs	r1, #0
 800b46e:	4630      	mov	r0, r6
 800b470:	f7f4 febe 	bl	80001f0 <memchr>
 800b474:	b108      	cbz	r0, 800b47a <_printf_i+0x1e6>
 800b476:	1b80      	subs	r0, r0, r6
 800b478:	6060      	str	r0, [r4, #4]
 800b47a:	6863      	ldr	r3, [r4, #4]
 800b47c:	6123      	str	r3, [r4, #16]
 800b47e:	2300      	movs	r3, #0
 800b480:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b484:	e7aa      	b.n	800b3dc <_printf_i+0x148>
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	4632      	mov	r2, r6
 800b48a:	4649      	mov	r1, r9
 800b48c:	4640      	mov	r0, r8
 800b48e:	47d0      	blx	sl
 800b490:	3001      	adds	r0, #1
 800b492:	d0ad      	beq.n	800b3f0 <_printf_i+0x15c>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	079b      	lsls	r3, r3, #30
 800b498:	d413      	bmi.n	800b4c2 <_printf_i+0x22e>
 800b49a:	68e0      	ldr	r0, [r4, #12]
 800b49c:	9b03      	ldr	r3, [sp, #12]
 800b49e:	4298      	cmp	r0, r3
 800b4a0:	bfb8      	it	lt
 800b4a2:	4618      	movlt	r0, r3
 800b4a4:	e7a6      	b.n	800b3f4 <_printf_i+0x160>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4632      	mov	r2, r6
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	4640      	mov	r0, r8
 800b4ae:	47d0      	blx	sl
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d09d      	beq.n	800b3f0 <_printf_i+0x15c>
 800b4b4:	3501      	adds	r5, #1
 800b4b6:	68e3      	ldr	r3, [r4, #12]
 800b4b8:	9903      	ldr	r1, [sp, #12]
 800b4ba:	1a5b      	subs	r3, r3, r1
 800b4bc:	42ab      	cmp	r3, r5
 800b4be:	dcf2      	bgt.n	800b4a6 <_printf_i+0x212>
 800b4c0:	e7eb      	b.n	800b49a <_printf_i+0x206>
 800b4c2:	2500      	movs	r5, #0
 800b4c4:	f104 0619 	add.w	r6, r4, #25
 800b4c8:	e7f5      	b.n	800b4b6 <_printf_i+0x222>
 800b4ca:	bf00      	nop
 800b4cc:	0800ef73 	.word	0x0800ef73
 800b4d0:	0800ef84 	.word	0x0800ef84

0800b4d4 <_scanf_float>:
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	b087      	sub	sp, #28
 800b4da:	4617      	mov	r7, r2
 800b4dc:	9303      	str	r3, [sp, #12]
 800b4de:	688b      	ldr	r3, [r1, #8]
 800b4e0:	1e5a      	subs	r2, r3, #1
 800b4e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b4e6:	bf81      	itttt	hi
 800b4e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b4ec:	eb03 0b05 	addhi.w	fp, r3, r5
 800b4f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b4f4:	608b      	strhi	r3, [r1, #8]
 800b4f6:	680b      	ldr	r3, [r1, #0]
 800b4f8:	460a      	mov	r2, r1
 800b4fa:	f04f 0500 	mov.w	r5, #0
 800b4fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b502:	f842 3b1c 	str.w	r3, [r2], #28
 800b506:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b50a:	4680      	mov	r8, r0
 800b50c:	460c      	mov	r4, r1
 800b50e:	bf98      	it	ls
 800b510:	f04f 0b00 	movls.w	fp, #0
 800b514:	9201      	str	r2, [sp, #4]
 800b516:	4616      	mov	r6, r2
 800b518:	46aa      	mov	sl, r5
 800b51a:	46a9      	mov	r9, r5
 800b51c:	9502      	str	r5, [sp, #8]
 800b51e:	68a2      	ldr	r2, [r4, #8]
 800b520:	b152      	cbz	r2, 800b538 <_scanf_float+0x64>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	2b4e      	cmp	r3, #78	@ 0x4e
 800b528:	d864      	bhi.n	800b5f4 <_scanf_float+0x120>
 800b52a:	2b40      	cmp	r3, #64	@ 0x40
 800b52c:	d83c      	bhi.n	800b5a8 <_scanf_float+0xd4>
 800b52e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b532:	b2c8      	uxtb	r0, r1
 800b534:	280e      	cmp	r0, #14
 800b536:	d93a      	bls.n	800b5ae <_scanf_float+0xda>
 800b538:	f1b9 0f00 	cmp.w	r9, #0
 800b53c:	d003      	beq.n	800b546 <_scanf_float+0x72>
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b54a:	f1ba 0f01 	cmp.w	sl, #1
 800b54e:	f200 8117 	bhi.w	800b780 <_scanf_float+0x2ac>
 800b552:	9b01      	ldr	r3, [sp, #4]
 800b554:	429e      	cmp	r6, r3
 800b556:	f200 8108 	bhi.w	800b76a <_scanf_float+0x296>
 800b55a:	2001      	movs	r0, #1
 800b55c:	b007      	add	sp, #28
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b562:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b566:	2a0d      	cmp	r2, #13
 800b568:	d8e6      	bhi.n	800b538 <_scanf_float+0x64>
 800b56a:	a101      	add	r1, pc, #4	@ (adr r1, 800b570 <_scanf_float+0x9c>)
 800b56c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b570:	0800b6b7 	.word	0x0800b6b7
 800b574:	0800b539 	.word	0x0800b539
 800b578:	0800b539 	.word	0x0800b539
 800b57c:	0800b539 	.word	0x0800b539
 800b580:	0800b717 	.word	0x0800b717
 800b584:	0800b6ef 	.word	0x0800b6ef
 800b588:	0800b539 	.word	0x0800b539
 800b58c:	0800b539 	.word	0x0800b539
 800b590:	0800b6c5 	.word	0x0800b6c5
 800b594:	0800b539 	.word	0x0800b539
 800b598:	0800b539 	.word	0x0800b539
 800b59c:	0800b539 	.word	0x0800b539
 800b5a0:	0800b539 	.word	0x0800b539
 800b5a4:	0800b67d 	.word	0x0800b67d
 800b5a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b5ac:	e7db      	b.n	800b566 <_scanf_float+0x92>
 800b5ae:	290e      	cmp	r1, #14
 800b5b0:	d8c2      	bhi.n	800b538 <_scanf_float+0x64>
 800b5b2:	a001      	add	r0, pc, #4	@ (adr r0, 800b5b8 <_scanf_float+0xe4>)
 800b5b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b5b8:	0800b66d 	.word	0x0800b66d
 800b5bc:	0800b539 	.word	0x0800b539
 800b5c0:	0800b66d 	.word	0x0800b66d
 800b5c4:	0800b703 	.word	0x0800b703
 800b5c8:	0800b539 	.word	0x0800b539
 800b5cc:	0800b615 	.word	0x0800b615
 800b5d0:	0800b653 	.word	0x0800b653
 800b5d4:	0800b653 	.word	0x0800b653
 800b5d8:	0800b653 	.word	0x0800b653
 800b5dc:	0800b653 	.word	0x0800b653
 800b5e0:	0800b653 	.word	0x0800b653
 800b5e4:	0800b653 	.word	0x0800b653
 800b5e8:	0800b653 	.word	0x0800b653
 800b5ec:	0800b653 	.word	0x0800b653
 800b5f0:	0800b653 	.word	0x0800b653
 800b5f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800b5f6:	d809      	bhi.n	800b60c <_scanf_float+0x138>
 800b5f8:	2b60      	cmp	r3, #96	@ 0x60
 800b5fa:	d8b2      	bhi.n	800b562 <_scanf_float+0x8e>
 800b5fc:	2b54      	cmp	r3, #84	@ 0x54
 800b5fe:	d07b      	beq.n	800b6f8 <_scanf_float+0x224>
 800b600:	2b59      	cmp	r3, #89	@ 0x59
 800b602:	d199      	bne.n	800b538 <_scanf_float+0x64>
 800b604:	2d07      	cmp	r5, #7
 800b606:	d197      	bne.n	800b538 <_scanf_float+0x64>
 800b608:	2508      	movs	r5, #8
 800b60a:	e02c      	b.n	800b666 <_scanf_float+0x192>
 800b60c:	2b74      	cmp	r3, #116	@ 0x74
 800b60e:	d073      	beq.n	800b6f8 <_scanf_float+0x224>
 800b610:	2b79      	cmp	r3, #121	@ 0x79
 800b612:	e7f6      	b.n	800b602 <_scanf_float+0x12e>
 800b614:	6821      	ldr	r1, [r4, #0]
 800b616:	05c8      	lsls	r0, r1, #23
 800b618:	d51b      	bpl.n	800b652 <_scanf_float+0x17e>
 800b61a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b61e:	6021      	str	r1, [r4, #0]
 800b620:	f109 0901 	add.w	r9, r9, #1
 800b624:	f1bb 0f00 	cmp.w	fp, #0
 800b628:	d003      	beq.n	800b632 <_scanf_float+0x15e>
 800b62a:	3201      	adds	r2, #1
 800b62c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b630:	60a2      	str	r2, [r4, #8]
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	3b01      	subs	r3, #1
 800b636:	60a3      	str	r3, [r4, #8]
 800b638:	6923      	ldr	r3, [r4, #16]
 800b63a:	3301      	adds	r3, #1
 800b63c:	6123      	str	r3, [r4, #16]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3b01      	subs	r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	607b      	str	r3, [r7, #4]
 800b646:	f340 8087 	ble.w	800b758 <_scanf_float+0x284>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	3301      	adds	r3, #1
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	e765      	b.n	800b51e <_scanf_float+0x4a>
 800b652:	eb1a 0105 	adds.w	r1, sl, r5
 800b656:	f47f af6f 	bne.w	800b538 <_scanf_float+0x64>
 800b65a:	6822      	ldr	r2, [r4, #0]
 800b65c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b660:	6022      	str	r2, [r4, #0]
 800b662:	460d      	mov	r5, r1
 800b664:	468a      	mov	sl, r1
 800b666:	f806 3b01 	strb.w	r3, [r6], #1
 800b66a:	e7e2      	b.n	800b632 <_scanf_float+0x15e>
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	0610      	lsls	r0, r2, #24
 800b670:	f57f af62 	bpl.w	800b538 <_scanf_float+0x64>
 800b674:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b678:	6022      	str	r2, [r4, #0]
 800b67a:	e7f4      	b.n	800b666 <_scanf_float+0x192>
 800b67c:	f1ba 0f00 	cmp.w	sl, #0
 800b680:	d10e      	bne.n	800b6a0 <_scanf_float+0x1cc>
 800b682:	f1b9 0f00 	cmp.w	r9, #0
 800b686:	d10e      	bne.n	800b6a6 <_scanf_float+0x1d2>
 800b688:	6822      	ldr	r2, [r4, #0]
 800b68a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b68e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b692:	d108      	bne.n	800b6a6 <_scanf_float+0x1d2>
 800b694:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b698:	6022      	str	r2, [r4, #0]
 800b69a:	f04f 0a01 	mov.w	sl, #1
 800b69e:	e7e2      	b.n	800b666 <_scanf_float+0x192>
 800b6a0:	f1ba 0f02 	cmp.w	sl, #2
 800b6a4:	d055      	beq.n	800b752 <_scanf_float+0x27e>
 800b6a6:	2d01      	cmp	r5, #1
 800b6a8:	d002      	beq.n	800b6b0 <_scanf_float+0x1dc>
 800b6aa:	2d04      	cmp	r5, #4
 800b6ac:	f47f af44 	bne.w	800b538 <_scanf_float+0x64>
 800b6b0:	3501      	adds	r5, #1
 800b6b2:	b2ed      	uxtb	r5, r5
 800b6b4:	e7d7      	b.n	800b666 <_scanf_float+0x192>
 800b6b6:	f1ba 0f01 	cmp.w	sl, #1
 800b6ba:	f47f af3d 	bne.w	800b538 <_scanf_float+0x64>
 800b6be:	f04f 0a02 	mov.w	sl, #2
 800b6c2:	e7d0      	b.n	800b666 <_scanf_float+0x192>
 800b6c4:	b97d      	cbnz	r5, 800b6e6 <_scanf_float+0x212>
 800b6c6:	f1b9 0f00 	cmp.w	r9, #0
 800b6ca:	f47f af38 	bne.w	800b53e <_scanf_float+0x6a>
 800b6ce:	6822      	ldr	r2, [r4, #0]
 800b6d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b6d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b6d8:	f040 8108 	bne.w	800b8ec <_scanf_float+0x418>
 800b6dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b6e0:	6022      	str	r2, [r4, #0]
 800b6e2:	2501      	movs	r5, #1
 800b6e4:	e7bf      	b.n	800b666 <_scanf_float+0x192>
 800b6e6:	2d03      	cmp	r5, #3
 800b6e8:	d0e2      	beq.n	800b6b0 <_scanf_float+0x1dc>
 800b6ea:	2d05      	cmp	r5, #5
 800b6ec:	e7de      	b.n	800b6ac <_scanf_float+0x1d8>
 800b6ee:	2d02      	cmp	r5, #2
 800b6f0:	f47f af22 	bne.w	800b538 <_scanf_float+0x64>
 800b6f4:	2503      	movs	r5, #3
 800b6f6:	e7b6      	b.n	800b666 <_scanf_float+0x192>
 800b6f8:	2d06      	cmp	r5, #6
 800b6fa:	f47f af1d 	bne.w	800b538 <_scanf_float+0x64>
 800b6fe:	2507      	movs	r5, #7
 800b700:	e7b1      	b.n	800b666 <_scanf_float+0x192>
 800b702:	6822      	ldr	r2, [r4, #0]
 800b704:	0591      	lsls	r1, r2, #22
 800b706:	f57f af17 	bpl.w	800b538 <_scanf_float+0x64>
 800b70a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b70e:	6022      	str	r2, [r4, #0]
 800b710:	f8cd 9008 	str.w	r9, [sp, #8]
 800b714:	e7a7      	b.n	800b666 <_scanf_float+0x192>
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b71c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b720:	d006      	beq.n	800b730 <_scanf_float+0x25c>
 800b722:	0550      	lsls	r0, r2, #21
 800b724:	f57f af08 	bpl.w	800b538 <_scanf_float+0x64>
 800b728:	f1b9 0f00 	cmp.w	r9, #0
 800b72c:	f000 80de 	beq.w	800b8ec <_scanf_float+0x418>
 800b730:	0591      	lsls	r1, r2, #22
 800b732:	bf58      	it	pl
 800b734:	9902      	ldrpl	r1, [sp, #8]
 800b736:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b73a:	bf58      	it	pl
 800b73c:	eba9 0101 	subpl.w	r1, r9, r1
 800b740:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b744:	bf58      	it	pl
 800b746:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b74a:	6022      	str	r2, [r4, #0]
 800b74c:	f04f 0900 	mov.w	r9, #0
 800b750:	e789      	b.n	800b666 <_scanf_float+0x192>
 800b752:	f04f 0a03 	mov.w	sl, #3
 800b756:	e786      	b.n	800b666 <_scanf_float+0x192>
 800b758:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b75c:	4639      	mov	r1, r7
 800b75e:	4640      	mov	r0, r8
 800b760:	4798      	blx	r3
 800b762:	2800      	cmp	r0, #0
 800b764:	f43f aedb 	beq.w	800b51e <_scanf_float+0x4a>
 800b768:	e6e6      	b.n	800b538 <_scanf_float+0x64>
 800b76a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b76e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b772:	463a      	mov	r2, r7
 800b774:	4640      	mov	r0, r8
 800b776:	4798      	blx	r3
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	e6e8      	b.n	800b552 <_scanf_float+0x7e>
 800b780:	1e6b      	subs	r3, r5, #1
 800b782:	2b06      	cmp	r3, #6
 800b784:	d824      	bhi.n	800b7d0 <_scanf_float+0x2fc>
 800b786:	2d02      	cmp	r5, #2
 800b788:	d836      	bhi.n	800b7f8 <_scanf_float+0x324>
 800b78a:	9b01      	ldr	r3, [sp, #4]
 800b78c:	429e      	cmp	r6, r3
 800b78e:	f67f aee4 	bls.w	800b55a <_scanf_float+0x86>
 800b792:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b796:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b79a:	463a      	mov	r2, r7
 800b79c:	4640      	mov	r0, r8
 800b79e:	4798      	blx	r3
 800b7a0:	6923      	ldr	r3, [r4, #16]
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	e7f0      	b.n	800b78a <_scanf_float+0x2b6>
 800b7a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b7b0:	463a      	mov	r2, r7
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4798      	blx	r3
 800b7b6:	6923      	ldr	r3, [r4, #16]
 800b7b8:	3b01      	subs	r3, #1
 800b7ba:	6123      	str	r3, [r4, #16]
 800b7bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b7c0:	fa5f fa8a 	uxtb.w	sl, sl
 800b7c4:	f1ba 0f02 	cmp.w	sl, #2
 800b7c8:	d1ee      	bne.n	800b7a8 <_scanf_float+0x2d4>
 800b7ca:	3d03      	subs	r5, #3
 800b7cc:	b2ed      	uxtb	r5, r5
 800b7ce:	1b76      	subs	r6, r6, r5
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	05da      	lsls	r2, r3, #23
 800b7d4:	d530      	bpl.n	800b838 <_scanf_float+0x364>
 800b7d6:	055b      	lsls	r3, r3, #21
 800b7d8:	d511      	bpl.n	800b7fe <_scanf_float+0x32a>
 800b7da:	9b01      	ldr	r3, [sp, #4]
 800b7dc:	429e      	cmp	r6, r3
 800b7de:	f67f aebc 	bls.w	800b55a <_scanf_float+0x86>
 800b7e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b7e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4798      	blx	r3
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	e7f0      	b.n	800b7da <_scanf_float+0x306>
 800b7f8:	46aa      	mov	sl, r5
 800b7fa:	46b3      	mov	fp, r6
 800b7fc:	e7de      	b.n	800b7bc <_scanf_float+0x2e8>
 800b7fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b802:	6923      	ldr	r3, [r4, #16]
 800b804:	2965      	cmp	r1, #101	@ 0x65
 800b806:	f103 33ff 	add.w	r3, r3, #4294967295
 800b80a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b80e:	6123      	str	r3, [r4, #16]
 800b810:	d00c      	beq.n	800b82c <_scanf_float+0x358>
 800b812:	2945      	cmp	r1, #69	@ 0x45
 800b814:	d00a      	beq.n	800b82c <_scanf_float+0x358>
 800b816:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b81a:	463a      	mov	r2, r7
 800b81c:	4640      	mov	r0, r8
 800b81e:	4798      	blx	r3
 800b820:	6923      	ldr	r3, [r4, #16]
 800b822:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b826:	3b01      	subs	r3, #1
 800b828:	1eb5      	subs	r5, r6, #2
 800b82a:	6123      	str	r3, [r4, #16]
 800b82c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b830:	463a      	mov	r2, r7
 800b832:	4640      	mov	r0, r8
 800b834:	4798      	blx	r3
 800b836:	462e      	mov	r6, r5
 800b838:	6822      	ldr	r2, [r4, #0]
 800b83a:	f012 0210 	ands.w	r2, r2, #16
 800b83e:	d001      	beq.n	800b844 <_scanf_float+0x370>
 800b840:	2000      	movs	r0, #0
 800b842:	e68b      	b.n	800b55c <_scanf_float+0x88>
 800b844:	7032      	strb	r2, [r6, #0]
 800b846:	6823      	ldr	r3, [r4, #0]
 800b848:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b84c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b850:	d11c      	bne.n	800b88c <_scanf_float+0x3b8>
 800b852:	9b02      	ldr	r3, [sp, #8]
 800b854:	454b      	cmp	r3, r9
 800b856:	eba3 0209 	sub.w	r2, r3, r9
 800b85a:	d123      	bne.n	800b8a4 <_scanf_float+0x3d0>
 800b85c:	9901      	ldr	r1, [sp, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	4640      	mov	r0, r8
 800b862:	f7ff f875 	bl	800a950 <_strtod_r>
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	6821      	ldr	r1, [r4, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f011 0f02 	tst.w	r1, #2
 800b870:	ec57 6b10 	vmov	r6, r7, d0
 800b874:	f103 0204 	add.w	r2, r3, #4
 800b878:	d01f      	beq.n	800b8ba <_scanf_float+0x3e6>
 800b87a:	9903      	ldr	r1, [sp, #12]
 800b87c:	600a      	str	r2, [r1, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	e9c3 6700 	strd	r6, r7, [r3]
 800b884:	68e3      	ldr	r3, [r4, #12]
 800b886:	3301      	adds	r3, #1
 800b888:	60e3      	str	r3, [r4, #12]
 800b88a:	e7d9      	b.n	800b840 <_scanf_float+0x36c>
 800b88c:	9b04      	ldr	r3, [sp, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0e4      	beq.n	800b85c <_scanf_float+0x388>
 800b892:	9905      	ldr	r1, [sp, #20]
 800b894:	230a      	movs	r3, #10
 800b896:	3101      	adds	r1, #1
 800b898:	4640      	mov	r0, r8
 800b89a:	f7ff f949 	bl	800ab30 <_strtol_r>
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	9e05      	ldr	r6, [sp, #20]
 800b8a2:	1ac2      	subs	r2, r0, r3
 800b8a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	bf28      	it	cs
 800b8ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b8b0:	4910      	ldr	r1, [pc, #64]	@ (800b8f4 <_scanf_float+0x420>)
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f000 f988 	bl	800bbc8 <siprintf>
 800b8b8:	e7d0      	b.n	800b85c <_scanf_float+0x388>
 800b8ba:	f011 0f04 	tst.w	r1, #4
 800b8be:	9903      	ldr	r1, [sp, #12]
 800b8c0:	600a      	str	r2, [r1, #0]
 800b8c2:	d1dc      	bne.n	800b87e <_scanf_float+0x3aa>
 800b8c4:	681d      	ldr	r5, [r3, #0]
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	f7f5 f93d 	bl	8000b4c <__aeabi_dcmpun>
 800b8d2:	b128      	cbz	r0, 800b8e0 <_scanf_float+0x40c>
 800b8d4:	4808      	ldr	r0, [pc, #32]	@ (800b8f8 <_scanf_float+0x424>)
 800b8d6:	f000 fb37 	bl	800bf48 <nanf>
 800b8da:	ed85 0a00 	vstr	s0, [r5]
 800b8de:	e7d1      	b.n	800b884 <_scanf_float+0x3b0>
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f5 f990 	bl	8000c08 <__aeabi_d2f>
 800b8e8:	6028      	str	r0, [r5, #0]
 800b8ea:	e7cb      	b.n	800b884 <_scanf_float+0x3b0>
 800b8ec:	f04f 0900 	mov.w	r9, #0
 800b8f0:	e629      	b.n	800b546 <_scanf_float+0x72>
 800b8f2:	bf00      	nop
 800b8f4:	0800ef95 	.word	0x0800ef95
 800b8f8:	0800f234 	.word	0x0800f234

0800b8fc <std>:
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	b510      	push	{r4, lr}
 800b900:	4604      	mov	r4, r0
 800b902:	e9c0 3300 	strd	r3, r3, [r0]
 800b906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b90a:	6083      	str	r3, [r0, #8]
 800b90c:	8181      	strh	r1, [r0, #12]
 800b90e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b910:	81c2      	strh	r2, [r0, #14]
 800b912:	6183      	str	r3, [r0, #24]
 800b914:	4619      	mov	r1, r3
 800b916:	2208      	movs	r2, #8
 800b918:	305c      	adds	r0, #92	@ 0x5c
 800b91a:	f000 fa4d 	bl	800bdb8 <memset>
 800b91e:	4b0d      	ldr	r3, [pc, #52]	@ (800b954 <std+0x58>)
 800b920:	6263      	str	r3, [r4, #36]	@ 0x24
 800b922:	4b0d      	ldr	r3, [pc, #52]	@ (800b958 <std+0x5c>)
 800b924:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b926:	4b0d      	ldr	r3, [pc, #52]	@ (800b95c <std+0x60>)
 800b928:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b92a:	4b0d      	ldr	r3, [pc, #52]	@ (800b960 <std+0x64>)
 800b92c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b92e:	4b0d      	ldr	r3, [pc, #52]	@ (800b964 <std+0x68>)
 800b930:	6224      	str	r4, [r4, #32]
 800b932:	429c      	cmp	r4, r3
 800b934:	d006      	beq.n	800b944 <std+0x48>
 800b936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b93a:	4294      	cmp	r4, r2
 800b93c:	d002      	beq.n	800b944 <std+0x48>
 800b93e:	33d0      	adds	r3, #208	@ 0xd0
 800b940:	429c      	cmp	r4, r3
 800b942:	d105      	bne.n	800b950 <std+0x54>
 800b944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b94c:	f000 bae2 	b.w	800bf14 <__retarget_lock_init_recursive>
 800b950:	bd10      	pop	{r4, pc}
 800b952:	bf00      	nop
 800b954:	0800bc09 	.word	0x0800bc09
 800b958:	0800bc2b 	.word	0x0800bc2b
 800b95c:	0800bc63 	.word	0x0800bc63
 800b960:	0800bc87 	.word	0x0800bc87
 800b964:	200010c0 	.word	0x200010c0

0800b968 <stdio_exit_handler>:
 800b968:	4a02      	ldr	r2, [pc, #8]	@ (800b974 <stdio_exit_handler+0xc>)
 800b96a:	4903      	ldr	r1, [pc, #12]	@ (800b978 <stdio_exit_handler+0x10>)
 800b96c:	4803      	ldr	r0, [pc, #12]	@ (800b97c <stdio_exit_handler+0x14>)
 800b96e:	f000 b869 	b.w	800ba44 <_fwalk_sglue>
 800b972:	bf00      	nop
 800b974:	2000003c 	.word	0x2000003c
 800b978:	0800e441 	.word	0x0800e441
 800b97c:	200001b8 	.word	0x200001b8

0800b980 <cleanup_stdio>:
 800b980:	6841      	ldr	r1, [r0, #4]
 800b982:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b4 <cleanup_stdio+0x34>)
 800b984:	4299      	cmp	r1, r3
 800b986:	b510      	push	{r4, lr}
 800b988:	4604      	mov	r4, r0
 800b98a:	d001      	beq.n	800b990 <cleanup_stdio+0x10>
 800b98c:	f002 fd58 	bl	800e440 <_fflush_r>
 800b990:	68a1      	ldr	r1, [r4, #8]
 800b992:	4b09      	ldr	r3, [pc, #36]	@ (800b9b8 <cleanup_stdio+0x38>)
 800b994:	4299      	cmp	r1, r3
 800b996:	d002      	beq.n	800b99e <cleanup_stdio+0x1e>
 800b998:	4620      	mov	r0, r4
 800b99a:	f002 fd51 	bl	800e440 <_fflush_r>
 800b99e:	68e1      	ldr	r1, [r4, #12]
 800b9a0:	4b06      	ldr	r3, [pc, #24]	@ (800b9bc <cleanup_stdio+0x3c>)
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	d004      	beq.n	800b9b0 <cleanup_stdio+0x30>
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ac:	f002 bd48 	b.w	800e440 <_fflush_r>
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200010c0 	.word	0x200010c0
 800b9b8:	20001128 	.word	0x20001128
 800b9bc:	20001190 	.word	0x20001190

0800b9c0 <global_stdio_init.part.0>:
 800b9c0:	b510      	push	{r4, lr}
 800b9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800b9f0 <global_stdio_init.part.0+0x30>)
 800b9c4:	4c0b      	ldr	r4, [pc, #44]	@ (800b9f4 <global_stdio_init.part.0+0x34>)
 800b9c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b9f8 <global_stdio_init.part.0+0x38>)
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2104      	movs	r1, #4
 800b9d0:	f7ff ff94 	bl	800b8fc <std>
 800b9d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b9d8:	2201      	movs	r2, #1
 800b9da:	2109      	movs	r1, #9
 800b9dc:	f7ff ff8e 	bl	800b8fc <std>
 800b9e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9ea:	2112      	movs	r1, #18
 800b9ec:	f7ff bf86 	b.w	800b8fc <std>
 800b9f0:	200011f8 	.word	0x200011f8
 800b9f4:	200010c0 	.word	0x200010c0
 800b9f8:	0800b969 	.word	0x0800b969

0800b9fc <__sfp_lock_acquire>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	@ (800ba04 <__sfp_lock_acquire+0x8>)
 800b9fe:	f000 ba8a 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800ba02:	bf00      	nop
 800ba04:	20001201 	.word	0x20001201

0800ba08 <__sfp_lock_release>:
 800ba08:	4801      	ldr	r0, [pc, #4]	@ (800ba10 <__sfp_lock_release+0x8>)
 800ba0a:	f000 ba85 	b.w	800bf18 <__retarget_lock_release_recursive>
 800ba0e:	bf00      	nop
 800ba10:	20001201 	.word	0x20001201

0800ba14 <__sinit>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	4604      	mov	r4, r0
 800ba18:	f7ff fff0 	bl	800b9fc <__sfp_lock_acquire>
 800ba1c:	6a23      	ldr	r3, [r4, #32]
 800ba1e:	b11b      	cbz	r3, 800ba28 <__sinit+0x14>
 800ba20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba24:	f7ff bff0 	b.w	800ba08 <__sfp_lock_release>
 800ba28:	4b04      	ldr	r3, [pc, #16]	@ (800ba3c <__sinit+0x28>)
 800ba2a:	6223      	str	r3, [r4, #32]
 800ba2c:	4b04      	ldr	r3, [pc, #16]	@ (800ba40 <__sinit+0x2c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1f5      	bne.n	800ba20 <__sinit+0xc>
 800ba34:	f7ff ffc4 	bl	800b9c0 <global_stdio_init.part.0>
 800ba38:	e7f2      	b.n	800ba20 <__sinit+0xc>
 800ba3a:	bf00      	nop
 800ba3c:	0800b981 	.word	0x0800b981
 800ba40:	200011f8 	.word	0x200011f8

0800ba44 <_fwalk_sglue>:
 800ba44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba48:	4607      	mov	r7, r0
 800ba4a:	4688      	mov	r8, r1
 800ba4c:	4614      	mov	r4, r2
 800ba4e:	2600      	movs	r6, #0
 800ba50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba54:	f1b9 0901 	subs.w	r9, r9, #1
 800ba58:	d505      	bpl.n	800ba66 <_fwalk_sglue+0x22>
 800ba5a:	6824      	ldr	r4, [r4, #0]
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	d1f7      	bne.n	800ba50 <_fwalk_sglue+0xc>
 800ba60:	4630      	mov	r0, r6
 800ba62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d907      	bls.n	800ba7c <_fwalk_sglue+0x38>
 800ba6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba70:	3301      	adds	r3, #1
 800ba72:	d003      	beq.n	800ba7c <_fwalk_sglue+0x38>
 800ba74:	4629      	mov	r1, r5
 800ba76:	4638      	mov	r0, r7
 800ba78:	47c0      	blx	r8
 800ba7a:	4306      	orrs	r6, r0
 800ba7c:	3568      	adds	r5, #104	@ 0x68
 800ba7e:	e7e9      	b.n	800ba54 <_fwalk_sglue+0x10>

0800ba80 <iprintf>:
 800ba80:	b40f      	push	{r0, r1, r2, r3}
 800ba82:	b507      	push	{r0, r1, r2, lr}
 800ba84:	4906      	ldr	r1, [pc, #24]	@ (800baa0 <iprintf+0x20>)
 800ba86:	ab04      	add	r3, sp, #16
 800ba88:	6808      	ldr	r0, [r1, #0]
 800ba8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba8e:	6881      	ldr	r1, [r0, #8]
 800ba90:	9301      	str	r3, [sp, #4]
 800ba92:	f002 fb39 	bl	800e108 <_vfiprintf_r>
 800ba96:	b003      	add	sp, #12
 800ba98:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba9c:	b004      	add	sp, #16
 800ba9e:	4770      	bx	lr
 800baa0:	200001b4 	.word	0x200001b4

0800baa4 <_puts_r>:
 800baa4:	6a03      	ldr	r3, [r0, #32]
 800baa6:	b570      	push	{r4, r5, r6, lr}
 800baa8:	6884      	ldr	r4, [r0, #8]
 800baaa:	4605      	mov	r5, r0
 800baac:	460e      	mov	r6, r1
 800baae:	b90b      	cbnz	r3, 800bab4 <_puts_r+0x10>
 800bab0:	f7ff ffb0 	bl	800ba14 <__sinit>
 800bab4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bab6:	07db      	lsls	r3, r3, #31
 800bab8:	d405      	bmi.n	800bac6 <_puts_r+0x22>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	0598      	lsls	r0, r3, #22
 800babe:	d402      	bmi.n	800bac6 <_puts_r+0x22>
 800bac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bac2:	f000 fa28 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	0719      	lsls	r1, r3, #28
 800baca:	d502      	bpl.n	800bad2 <_puts_r+0x2e>
 800bacc:	6923      	ldr	r3, [r4, #16]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d135      	bne.n	800bb3e <_puts_r+0x9a>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4628      	mov	r0, r5
 800bad6:	f000 f919 	bl	800bd0c <__swsetup_r>
 800bada:	b380      	cbz	r0, 800bb3e <_puts_r+0x9a>
 800badc:	f04f 35ff 	mov.w	r5, #4294967295
 800bae0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bae2:	07da      	lsls	r2, r3, #31
 800bae4:	d405      	bmi.n	800baf2 <_puts_r+0x4e>
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	059b      	lsls	r3, r3, #22
 800baea:	d402      	bmi.n	800baf2 <_puts_r+0x4e>
 800baec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baee:	f000 fa13 	bl	800bf18 <__retarget_lock_release_recursive>
 800baf2:	4628      	mov	r0, r5
 800baf4:	bd70      	pop	{r4, r5, r6, pc}
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da04      	bge.n	800bb04 <_puts_r+0x60>
 800bafa:	69a2      	ldr	r2, [r4, #24]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	dc17      	bgt.n	800bb30 <_puts_r+0x8c>
 800bb00:	290a      	cmp	r1, #10
 800bb02:	d015      	beq.n	800bb30 <_puts_r+0x8c>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	6022      	str	r2, [r4, #0]
 800bb0a:	7019      	strb	r1, [r3, #0]
 800bb0c:	68a3      	ldr	r3, [r4, #8]
 800bb0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb12:	3b01      	subs	r3, #1
 800bb14:	60a3      	str	r3, [r4, #8]
 800bb16:	2900      	cmp	r1, #0
 800bb18:	d1ed      	bne.n	800baf6 <_puts_r+0x52>
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	da11      	bge.n	800bb42 <_puts_r+0x9e>
 800bb1e:	4622      	mov	r2, r4
 800bb20:	210a      	movs	r1, #10
 800bb22:	4628      	mov	r0, r5
 800bb24:	f000 f8b3 	bl	800bc8e <__swbuf_r>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	d0d7      	beq.n	800badc <_puts_r+0x38>
 800bb2c:	250a      	movs	r5, #10
 800bb2e:	e7d7      	b.n	800bae0 <_puts_r+0x3c>
 800bb30:	4622      	mov	r2, r4
 800bb32:	4628      	mov	r0, r5
 800bb34:	f000 f8ab 	bl	800bc8e <__swbuf_r>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d1e7      	bne.n	800bb0c <_puts_r+0x68>
 800bb3c:	e7ce      	b.n	800badc <_puts_r+0x38>
 800bb3e:	3e01      	subs	r6, #1
 800bb40:	e7e4      	b.n	800bb0c <_puts_r+0x68>
 800bb42:	6823      	ldr	r3, [r4, #0]
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	220a      	movs	r2, #10
 800bb4a:	701a      	strb	r2, [r3, #0]
 800bb4c:	e7ee      	b.n	800bb2c <_puts_r+0x88>
	...

0800bb50 <puts>:
 800bb50:	4b02      	ldr	r3, [pc, #8]	@ (800bb5c <puts+0xc>)
 800bb52:	4601      	mov	r1, r0
 800bb54:	6818      	ldr	r0, [r3, #0]
 800bb56:	f7ff bfa5 	b.w	800baa4 <_puts_r>
 800bb5a:	bf00      	nop
 800bb5c:	200001b4 	.word	0x200001b4

0800bb60 <sniprintf>:
 800bb60:	b40c      	push	{r2, r3}
 800bb62:	b530      	push	{r4, r5, lr}
 800bb64:	4b17      	ldr	r3, [pc, #92]	@ (800bbc4 <sniprintf+0x64>)
 800bb66:	1e0c      	subs	r4, r1, #0
 800bb68:	681d      	ldr	r5, [r3, #0]
 800bb6a:	b09d      	sub	sp, #116	@ 0x74
 800bb6c:	da08      	bge.n	800bb80 <sniprintf+0x20>
 800bb6e:	238b      	movs	r3, #139	@ 0x8b
 800bb70:	602b      	str	r3, [r5, #0]
 800bb72:	f04f 30ff 	mov.w	r0, #4294967295
 800bb76:	b01d      	add	sp, #116	@ 0x74
 800bb78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb7c:	b002      	add	sp, #8
 800bb7e:	4770      	bx	lr
 800bb80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bb84:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bb88:	bf14      	ite	ne
 800bb8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bb8e:	4623      	moveq	r3, r4
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	9307      	str	r3, [sp, #28]
 800bb94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bb98:	9002      	str	r0, [sp, #8]
 800bb9a:	9006      	str	r0, [sp, #24]
 800bb9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bba0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bba2:	ab21      	add	r3, sp, #132	@ 0x84
 800bba4:	a902      	add	r1, sp, #8
 800bba6:	4628      	mov	r0, r5
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	f002 f987 	bl	800debc <_svfiprintf_r>
 800bbae:	1c43      	adds	r3, r0, #1
 800bbb0:	bfbc      	itt	lt
 800bbb2:	238b      	movlt	r3, #139	@ 0x8b
 800bbb4:	602b      	strlt	r3, [r5, #0]
 800bbb6:	2c00      	cmp	r4, #0
 800bbb8:	d0dd      	beq.n	800bb76 <sniprintf+0x16>
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	701a      	strb	r2, [r3, #0]
 800bbc0:	e7d9      	b.n	800bb76 <sniprintf+0x16>
 800bbc2:	bf00      	nop
 800bbc4:	200001b4 	.word	0x200001b4

0800bbc8 <siprintf>:
 800bbc8:	b40e      	push	{r1, r2, r3}
 800bbca:	b500      	push	{lr}
 800bbcc:	b09c      	sub	sp, #112	@ 0x70
 800bbce:	ab1d      	add	r3, sp, #116	@ 0x74
 800bbd0:	9002      	str	r0, [sp, #8]
 800bbd2:	9006      	str	r0, [sp, #24]
 800bbd4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bbd8:	4809      	ldr	r0, [pc, #36]	@ (800bc00 <siprintf+0x38>)
 800bbda:	9107      	str	r1, [sp, #28]
 800bbdc:	9104      	str	r1, [sp, #16]
 800bbde:	4909      	ldr	r1, [pc, #36]	@ (800bc04 <siprintf+0x3c>)
 800bbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	a902      	add	r1, sp, #8
 800bbec:	f002 f966 	bl	800debc <_svfiprintf_r>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	b01c      	add	sp, #112	@ 0x70
 800bbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbfc:	b003      	add	sp, #12
 800bbfe:	4770      	bx	lr
 800bc00:	200001b4 	.word	0x200001b4
 800bc04:	ffff0208 	.word	0xffff0208

0800bc08 <__sread>:
 800bc08:	b510      	push	{r4, lr}
 800bc0a:	460c      	mov	r4, r1
 800bc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc10:	f000 f932 	bl	800be78 <_read_r>
 800bc14:	2800      	cmp	r0, #0
 800bc16:	bfab      	itete	ge
 800bc18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc1a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc1c:	181b      	addge	r3, r3, r0
 800bc1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc22:	bfac      	ite	ge
 800bc24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc26:	81a3      	strhlt	r3, [r4, #12]
 800bc28:	bd10      	pop	{r4, pc}

0800bc2a <__swrite>:
 800bc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc2e:	461f      	mov	r7, r3
 800bc30:	898b      	ldrh	r3, [r1, #12]
 800bc32:	05db      	lsls	r3, r3, #23
 800bc34:	4605      	mov	r5, r0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4616      	mov	r6, r2
 800bc3a:	d505      	bpl.n	800bc48 <__swrite+0x1e>
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	2302      	movs	r3, #2
 800bc42:	2200      	movs	r2, #0
 800bc44:	f000 f906 	bl	800be54 <_lseek_r>
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc52:	81a3      	strh	r3, [r4, #12]
 800bc54:	4632      	mov	r2, r6
 800bc56:	463b      	mov	r3, r7
 800bc58:	4628      	mov	r0, r5
 800bc5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc5e:	f000 b91d 	b.w	800be9c <_write_r>

0800bc62 <__sseek>:
 800bc62:	b510      	push	{r4, lr}
 800bc64:	460c      	mov	r4, r1
 800bc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc6a:	f000 f8f3 	bl	800be54 <_lseek_r>
 800bc6e:	1c43      	adds	r3, r0, #1
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	bf15      	itete	ne
 800bc74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bc76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bc7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bc7e:	81a3      	strheq	r3, [r4, #12]
 800bc80:	bf18      	it	ne
 800bc82:	81a3      	strhne	r3, [r4, #12]
 800bc84:	bd10      	pop	{r4, pc}

0800bc86 <__sclose>:
 800bc86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc8a:	f000 b8d3 	b.w	800be34 <_close_r>

0800bc8e <__swbuf_r>:
 800bc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc90:	460e      	mov	r6, r1
 800bc92:	4614      	mov	r4, r2
 800bc94:	4605      	mov	r5, r0
 800bc96:	b118      	cbz	r0, 800bca0 <__swbuf_r+0x12>
 800bc98:	6a03      	ldr	r3, [r0, #32]
 800bc9a:	b90b      	cbnz	r3, 800bca0 <__swbuf_r+0x12>
 800bc9c:	f7ff feba 	bl	800ba14 <__sinit>
 800bca0:	69a3      	ldr	r3, [r4, #24]
 800bca2:	60a3      	str	r3, [r4, #8]
 800bca4:	89a3      	ldrh	r3, [r4, #12]
 800bca6:	071a      	lsls	r2, r3, #28
 800bca8:	d501      	bpl.n	800bcae <__swbuf_r+0x20>
 800bcaa:	6923      	ldr	r3, [r4, #16]
 800bcac:	b943      	cbnz	r3, 800bcc0 <__swbuf_r+0x32>
 800bcae:	4621      	mov	r1, r4
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f000 f82b 	bl	800bd0c <__swsetup_r>
 800bcb6:	b118      	cbz	r0, 800bcc0 <__swbuf_r+0x32>
 800bcb8:	f04f 37ff 	mov.w	r7, #4294967295
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	6922      	ldr	r2, [r4, #16]
 800bcc4:	1a98      	subs	r0, r3, r2
 800bcc6:	6963      	ldr	r3, [r4, #20]
 800bcc8:	b2f6      	uxtb	r6, r6
 800bcca:	4283      	cmp	r3, r0
 800bccc:	4637      	mov	r7, r6
 800bcce:	dc05      	bgt.n	800bcdc <__swbuf_r+0x4e>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	f002 fbb4 	bl	800e440 <_fflush_r>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d1ed      	bne.n	800bcb8 <__swbuf_r+0x2a>
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	6022      	str	r2, [r4, #0]
 800bce8:	701e      	strb	r6, [r3, #0]
 800bcea:	6962      	ldr	r2, [r4, #20]
 800bcec:	1c43      	adds	r3, r0, #1
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d004      	beq.n	800bcfc <__swbuf_r+0x6e>
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	07db      	lsls	r3, r3, #31
 800bcf6:	d5e1      	bpl.n	800bcbc <__swbuf_r+0x2e>
 800bcf8:	2e0a      	cmp	r6, #10
 800bcfa:	d1df      	bne.n	800bcbc <__swbuf_r+0x2e>
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f002 fb9e 	bl	800e440 <_fflush_r>
 800bd04:	2800      	cmp	r0, #0
 800bd06:	d0d9      	beq.n	800bcbc <__swbuf_r+0x2e>
 800bd08:	e7d6      	b.n	800bcb8 <__swbuf_r+0x2a>
	...

0800bd0c <__swsetup_r>:
 800bd0c:	b538      	push	{r3, r4, r5, lr}
 800bd0e:	4b29      	ldr	r3, [pc, #164]	@ (800bdb4 <__swsetup_r+0xa8>)
 800bd10:	4605      	mov	r5, r0
 800bd12:	6818      	ldr	r0, [r3, #0]
 800bd14:	460c      	mov	r4, r1
 800bd16:	b118      	cbz	r0, 800bd20 <__swsetup_r+0x14>
 800bd18:	6a03      	ldr	r3, [r0, #32]
 800bd1a:	b90b      	cbnz	r3, 800bd20 <__swsetup_r+0x14>
 800bd1c:	f7ff fe7a 	bl	800ba14 <__sinit>
 800bd20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd24:	0719      	lsls	r1, r3, #28
 800bd26:	d422      	bmi.n	800bd6e <__swsetup_r+0x62>
 800bd28:	06da      	lsls	r2, r3, #27
 800bd2a:	d407      	bmi.n	800bd3c <__swsetup_r+0x30>
 800bd2c:	2209      	movs	r2, #9
 800bd2e:	602a      	str	r2, [r5, #0]
 800bd30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	e033      	b.n	800bda4 <__swsetup_r+0x98>
 800bd3c:	0758      	lsls	r0, r3, #29
 800bd3e:	d512      	bpl.n	800bd66 <__swsetup_r+0x5a>
 800bd40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd42:	b141      	cbz	r1, 800bd56 <__swsetup_r+0x4a>
 800bd44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	d002      	beq.n	800bd52 <__swsetup_r+0x46>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	f000 ff4f 	bl	800cbf0 <_free_r>
 800bd52:	2300      	movs	r3, #0
 800bd54:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd56:	89a3      	ldrh	r3, [r4, #12]
 800bd58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd5c:	81a3      	strh	r3, [r4, #12]
 800bd5e:	2300      	movs	r3, #0
 800bd60:	6063      	str	r3, [r4, #4]
 800bd62:	6923      	ldr	r3, [r4, #16]
 800bd64:	6023      	str	r3, [r4, #0]
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	f043 0308 	orr.w	r3, r3, #8
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	6923      	ldr	r3, [r4, #16]
 800bd70:	b94b      	cbnz	r3, 800bd86 <__swsetup_r+0x7a>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd7c:	d003      	beq.n	800bd86 <__swsetup_r+0x7a>
 800bd7e:	4621      	mov	r1, r4
 800bd80:	4628      	mov	r0, r5
 800bd82:	f002 fbab 	bl	800e4dc <__smakebuf_r>
 800bd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd8a:	f013 0201 	ands.w	r2, r3, #1
 800bd8e:	d00a      	beq.n	800bda6 <__swsetup_r+0x9a>
 800bd90:	2200      	movs	r2, #0
 800bd92:	60a2      	str	r2, [r4, #8]
 800bd94:	6962      	ldr	r2, [r4, #20]
 800bd96:	4252      	negs	r2, r2
 800bd98:	61a2      	str	r2, [r4, #24]
 800bd9a:	6922      	ldr	r2, [r4, #16]
 800bd9c:	b942      	cbnz	r2, 800bdb0 <__swsetup_r+0xa4>
 800bd9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bda2:	d1c5      	bne.n	800bd30 <__swsetup_r+0x24>
 800bda4:	bd38      	pop	{r3, r4, r5, pc}
 800bda6:	0799      	lsls	r1, r3, #30
 800bda8:	bf58      	it	pl
 800bdaa:	6962      	ldrpl	r2, [r4, #20]
 800bdac:	60a2      	str	r2, [r4, #8]
 800bdae:	e7f4      	b.n	800bd9a <__swsetup_r+0x8e>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e7f7      	b.n	800bda4 <__swsetup_r+0x98>
 800bdb4:	200001b4 	.word	0x200001b4

0800bdb8 <memset>:
 800bdb8:	4402      	add	r2, r0
 800bdba:	4603      	mov	r3, r0
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d100      	bne.n	800bdc2 <memset+0xa>
 800bdc0:	4770      	bx	lr
 800bdc2:	f803 1b01 	strb.w	r1, [r3], #1
 800bdc6:	e7f9      	b.n	800bdbc <memset+0x4>

0800bdc8 <strchr>:
 800bdc8:	b2c9      	uxtb	r1, r1
 800bdca:	4603      	mov	r3, r0
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdd2:	b112      	cbz	r2, 800bdda <strchr+0x12>
 800bdd4:	428a      	cmp	r2, r1
 800bdd6:	d1f9      	bne.n	800bdcc <strchr+0x4>
 800bdd8:	4770      	bx	lr
 800bdda:	2900      	cmp	r1, #0
 800bddc:	bf18      	it	ne
 800bdde:	2000      	movne	r0, #0
 800bde0:	4770      	bx	lr

0800bde2 <strncmp>:
 800bde2:	b510      	push	{r4, lr}
 800bde4:	b16a      	cbz	r2, 800be02 <strncmp+0x20>
 800bde6:	3901      	subs	r1, #1
 800bde8:	1884      	adds	r4, r0, r2
 800bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d103      	bne.n	800bdfe <strncmp+0x1c>
 800bdf6:	42a0      	cmp	r0, r4
 800bdf8:	d001      	beq.n	800bdfe <strncmp+0x1c>
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	d1f5      	bne.n	800bdea <strncmp+0x8>
 800bdfe:	1ad0      	subs	r0, r2, r3
 800be00:	bd10      	pop	{r4, pc}
 800be02:	4610      	mov	r0, r2
 800be04:	e7fc      	b.n	800be00 <strncmp+0x1e>

0800be06 <strncpy>:
 800be06:	b510      	push	{r4, lr}
 800be08:	3901      	subs	r1, #1
 800be0a:	4603      	mov	r3, r0
 800be0c:	b132      	cbz	r2, 800be1c <strncpy+0x16>
 800be0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be12:	f803 4b01 	strb.w	r4, [r3], #1
 800be16:	3a01      	subs	r2, #1
 800be18:	2c00      	cmp	r4, #0
 800be1a:	d1f7      	bne.n	800be0c <strncpy+0x6>
 800be1c:	441a      	add	r2, r3
 800be1e:	2100      	movs	r1, #0
 800be20:	4293      	cmp	r3, r2
 800be22:	d100      	bne.n	800be26 <strncpy+0x20>
 800be24:	bd10      	pop	{r4, pc}
 800be26:	f803 1b01 	strb.w	r1, [r3], #1
 800be2a:	e7f9      	b.n	800be20 <strncpy+0x1a>

0800be2c <_localeconv_r>:
 800be2c:	4800      	ldr	r0, [pc, #0]	@ (800be30 <_localeconv_r+0x4>)
 800be2e:	4770      	bx	lr
 800be30:	20000138 	.word	0x20000138

0800be34 <_close_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d06      	ldr	r5, [pc, #24]	@ (800be50 <_close_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	602b      	str	r3, [r5, #0]
 800be40:	f7f7 ff19 	bl	8003c76 <_close>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_close_r+0x1a>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_close_r+0x1a>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	200011fc 	.word	0x200011fc

0800be54 <_lseek_r>:
 800be54:	b538      	push	{r3, r4, r5, lr}
 800be56:	4d07      	ldr	r5, [pc, #28]	@ (800be74 <_lseek_r+0x20>)
 800be58:	4604      	mov	r4, r0
 800be5a:	4608      	mov	r0, r1
 800be5c:	4611      	mov	r1, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	602a      	str	r2, [r5, #0]
 800be62:	461a      	mov	r2, r3
 800be64:	f7f7 ff2e 	bl	8003cc4 <_lseek>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_lseek_r+0x1e>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_lseek_r+0x1e>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	200011fc 	.word	0x200011fc

0800be78 <_read_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d07      	ldr	r5, [pc, #28]	@ (800be98 <_read_r+0x20>)
 800be7c:	4604      	mov	r4, r0
 800be7e:	4608      	mov	r0, r1
 800be80:	4611      	mov	r1, r2
 800be82:	2200      	movs	r2, #0
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f7 febc 	bl	8003c04 <_read>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_read_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_read_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	200011fc 	.word	0x200011fc

0800be9c <_write_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d07      	ldr	r5, [pc, #28]	@ (800bebc <_write_r+0x20>)
 800bea0:	4604      	mov	r4, r0
 800bea2:	4608      	mov	r0, r1
 800bea4:	4611      	mov	r1, r2
 800bea6:	2200      	movs	r2, #0
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	f7f7 fec7 	bl	8003c3e <_write>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d102      	bne.n	800beba <_write_r+0x1e>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	b103      	cbz	r3, 800beba <_write_r+0x1e>
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	bd38      	pop	{r3, r4, r5, pc}
 800bebc:	200011fc 	.word	0x200011fc

0800bec0 <__errno>:
 800bec0:	4b01      	ldr	r3, [pc, #4]	@ (800bec8 <__errno+0x8>)
 800bec2:	6818      	ldr	r0, [r3, #0]
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	200001b4 	.word	0x200001b4

0800becc <__libc_init_array>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	4d0d      	ldr	r5, [pc, #52]	@ (800bf04 <__libc_init_array+0x38>)
 800bed0:	4c0d      	ldr	r4, [pc, #52]	@ (800bf08 <__libc_init_array+0x3c>)
 800bed2:	1b64      	subs	r4, r4, r5
 800bed4:	10a4      	asrs	r4, r4, #2
 800bed6:	2600      	movs	r6, #0
 800bed8:	42a6      	cmp	r6, r4
 800beda:	d109      	bne.n	800bef0 <__libc_init_array+0x24>
 800bedc:	4d0b      	ldr	r5, [pc, #44]	@ (800bf0c <__libc_init_array+0x40>)
 800bede:	4c0c      	ldr	r4, [pc, #48]	@ (800bf10 <__libc_init_array+0x44>)
 800bee0:	f002 fc4a 	bl	800e778 <_init>
 800bee4:	1b64      	subs	r4, r4, r5
 800bee6:	10a4      	asrs	r4, r4, #2
 800bee8:	2600      	movs	r6, #0
 800beea:	42a6      	cmp	r6, r4
 800beec:	d105      	bne.n	800befa <__libc_init_array+0x2e>
 800beee:	bd70      	pop	{r4, r5, r6, pc}
 800bef0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef4:	4798      	blx	r3
 800bef6:	3601      	adds	r6, #1
 800bef8:	e7ee      	b.n	800bed8 <__libc_init_array+0xc>
 800befa:	f855 3b04 	ldr.w	r3, [r5], #4
 800befe:	4798      	blx	r3
 800bf00:	3601      	adds	r6, #1
 800bf02:	e7f2      	b.n	800beea <__libc_init_array+0x1e>
 800bf04:	0800f240 	.word	0x0800f240
 800bf08:	0800f240 	.word	0x0800f240
 800bf0c:	0800f240 	.word	0x0800f240
 800bf10:	0800f244 	.word	0x0800f244

0800bf14 <__retarget_lock_init_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <__retarget_lock_acquire_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__retarget_lock_release_recursive>:
 800bf18:	4770      	bx	lr

0800bf1a <memcpy>:
 800bf1a:	440a      	add	r2, r1
 800bf1c:	4291      	cmp	r1, r2
 800bf1e:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf22:	d100      	bne.n	800bf26 <memcpy+0xc>
 800bf24:	4770      	bx	lr
 800bf26:	b510      	push	{r4, lr}
 800bf28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf30:	4291      	cmp	r1, r2
 800bf32:	d1f9      	bne.n	800bf28 <memcpy+0xe>
 800bf34:	bd10      	pop	{r4, pc}
	...

0800bf38 <nan>:
 800bf38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf40 <nan+0x8>
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	00000000 	.word	0x00000000
 800bf44:	7ff80000 	.word	0x7ff80000

0800bf48 <nanf>:
 800bf48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bf50 <nanf+0x8>
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	7fc00000 	.word	0x7fc00000

0800bf54 <quorem>:
 800bf54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	6903      	ldr	r3, [r0, #16]
 800bf5a:	690c      	ldr	r4, [r1, #16]
 800bf5c:	42a3      	cmp	r3, r4
 800bf5e:	4607      	mov	r7, r0
 800bf60:	db7e      	blt.n	800c060 <quorem+0x10c>
 800bf62:	3c01      	subs	r4, #1
 800bf64:	f101 0814 	add.w	r8, r1, #20
 800bf68:	00a3      	lsls	r3, r4, #2
 800bf6a:	f100 0514 	add.w	r5, r0, #20
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf86:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf8a:	d32e      	bcc.n	800bfea <quorem+0x96>
 800bf8c:	f04f 0a00 	mov.w	sl, #0
 800bf90:	46c4      	mov	ip, r8
 800bf92:	46ae      	mov	lr, r5
 800bf94:	46d3      	mov	fp, sl
 800bf96:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf9a:	b298      	uxth	r0, r3
 800bf9c:	fb06 a000 	mla	r0, r6, r0, sl
 800bfa0:	0c02      	lsrs	r2, r0, #16
 800bfa2:	0c1b      	lsrs	r3, r3, #16
 800bfa4:	fb06 2303 	mla	r3, r6, r3, r2
 800bfa8:	f8de 2000 	ldr.w	r2, [lr]
 800bfac:	b280      	uxth	r0, r0
 800bfae:	b292      	uxth	r2, r2
 800bfb0:	1a12      	subs	r2, r2, r0
 800bfb2:	445a      	add	r2, fp
 800bfb4:	f8de 0000 	ldr.w	r0, [lr]
 800bfb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfc2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bfc6:	b292      	uxth	r2, r2
 800bfc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bfcc:	45e1      	cmp	r9, ip
 800bfce:	f84e 2b04 	str.w	r2, [lr], #4
 800bfd2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bfd6:	d2de      	bcs.n	800bf96 <quorem+0x42>
 800bfd8:	9b00      	ldr	r3, [sp, #0]
 800bfda:	58eb      	ldr	r3, [r5, r3]
 800bfdc:	b92b      	cbnz	r3, 800bfea <quorem+0x96>
 800bfde:	9b01      	ldr	r3, [sp, #4]
 800bfe0:	3b04      	subs	r3, #4
 800bfe2:	429d      	cmp	r5, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	d32f      	bcc.n	800c048 <quorem+0xf4>
 800bfe8:	613c      	str	r4, [r7, #16]
 800bfea:	4638      	mov	r0, r7
 800bfec:	f001 fd10 	bl	800da10 <__mcmp>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	db25      	blt.n	800c040 <quorem+0xec>
 800bff4:	4629      	mov	r1, r5
 800bff6:	2000      	movs	r0, #0
 800bff8:	f858 2b04 	ldr.w	r2, [r8], #4
 800bffc:	f8d1 c000 	ldr.w	ip, [r1]
 800c000:	fa1f fe82 	uxth.w	lr, r2
 800c004:	fa1f f38c 	uxth.w	r3, ip
 800c008:	eba3 030e 	sub.w	r3, r3, lr
 800c00c:	4403      	add	r3, r0
 800c00e:	0c12      	lsrs	r2, r2, #16
 800c010:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c014:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c018:	b29b      	uxth	r3, r3
 800c01a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c01e:	45c1      	cmp	r9, r8
 800c020:	f841 3b04 	str.w	r3, [r1], #4
 800c024:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c028:	d2e6      	bcs.n	800bff8 <quorem+0xa4>
 800c02a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c032:	b922      	cbnz	r2, 800c03e <quorem+0xea>
 800c034:	3b04      	subs	r3, #4
 800c036:	429d      	cmp	r5, r3
 800c038:	461a      	mov	r2, r3
 800c03a:	d30b      	bcc.n	800c054 <quorem+0x100>
 800c03c:	613c      	str	r4, [r7, #16]
 800c03e:	3601      	adds	r6, #1
 800c040:	4630      	mov	r0, r6
 800c042:	b003      	add	sp, #12
 800c044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	3b04      	subs	r3, #4
 800c04c:	2a00      	cmp	r2, #0
 800c04e:	d1cb      	bne.n	800bfe8 <quorem+0x94>
 800c050:	3c01      	subs	r4, #1
 800c052:	e7c6      	b.n	800bfe2 <quorem+0x8e>
 800c054:	6812      	ldr	r2, [r2, #0]
 800c056:	3b04      	subs	r3, #4
 800c058:	2a00      	cmp	r2, #0
 800c05a:	d1ef      	bne.n	800c03c <quorem+0xe8>
 800c05c:	3c01      	subs	r4, #1
 800c05e:	e7ea      	b.n	800c036 <quorem+0xe2>
 800c060:	2000      	movs	r0, #0
 800c062:	e7ee      	b.n	800c042 <quorem+0xee>
 800c064:	0000      	movs	r0, r0
	...

0800c068 <_dtoa_r>:
 800c068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c06c:	69c7      	ldr	r7, [r0, #28]
 800c06e:	b099      	sub	sp, #100	@ 0x64
 800c070:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c074:	ec55 4b10 	vmov	r4, r5, d0
 800c078:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c07a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c07c:	4683      	mov	fp, r0
 800c07e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c080:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c082:	b97f      	cbnz	r7, 800c0a4 <_dtoa_r+0x3c>
 800c084:	2010      	movs	r0, #16
 800c086:	f001 f937 	bl	800d2f8 <malloc>
 800c08a:	4602      	mov	r2, r0
 800c08c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c090:	b920      	cbnz	r0, 800c09c <_dtoa_r+0x34>
 800c092:	4ba7      	ldr	r3, [pc, #668]	@ (800c330 <_dtoa_r+0x2c8>)
 800c094:	21ef      	movs	r1, #239	@ 0xef
 800c096:	48a7      	ldr	r0, [pc, #668]	@ (800c334 <_dtoa_r+0x2cc>)
 800c098:	f002 faa8 	bl	800e5ec <__assert_func>
 800c09c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0a0:	6007      	str	r7, [r0, #0]
 800c0a2:	60c7      	str	r7, [r0, #12]
 800c0a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0a8:	6819      	ldr	r1, [r3, #0]
 800c0aa:	b159      	cbz	r1, 800c0c4 <_dtoa_r+0x5c>
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	604a      	str	r2, [r1, #4]
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	4093      	lsls	r3, r2
 800c0b4:	608b      	str	r3, [r1, #8]
 800c0b6:	4658      	mov	r0, fp
 800c0b8:	f001 fa26 	bl	800d508 <_Bfree>
 800c0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	1e2b      	subs	r3, r5, #0
 800c0c6:	bfb9      	ittee	lt
 800c0c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0cc:	9303      	strlt	r3, [sp, #12]
 800c0ce:	2300      	movge	r3, #0
 800c0d0:	6033      	strge	r3, [r6, #0]
 800c0d2:	9f03      	ldr	r7, [sp, #12]
 800c0d4:	4b98      	ldr	r3, [pc, #608]	@ (800c338 <_dtoa_r+0x2d0>)
 800c0d6:	bfbc      	itt	lt
 800c0d8:	2201      	movlt	r2, #1
 800c0da:	6032      	strlt	r2, [r6, #0]
 800c0dc:	43bb      	bics	r3, r7
 800c0de:	d112      	bne.n	800c106 <_dtoa_r+0x9e>
 800c0e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c0e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0ec:	4323      	orrs	r3, r4
 800c0ee:	f000 854d 	beq.w	800cb8c <_dtoa_r+0xb24>
 800c0f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c34c <_dtoa_r+0x2e4>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f000 854f 	beq.w	800cb9c <_dtoa_r+0xb34>
 800c0fe:	f10a 0303 	add.w	r3, sl, #3
 800c102:	f000 bd49 	b.w	800cb98 <_dtoa_r+0xb30>
 800c106:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c10a:	2200      	movs	r2, #0
 800c10c:	ec51 0b17 	vmov	r0, r1, d7
 800c110:	2300      	movs	r3, #0
 800c112:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c116:	f7f4 fce7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c11a:	4680      	mov	r8, r0
 800c11c:	b158      	cbz	r0, 800c136 <_dtoa_r+0xce>
 800c11e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c120:	2301      	movs	r3, #1
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c126:	b113      	cbz	r3, 800c12e <_dtoa_r+0xc6>
 800c128:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c12a:	4b84      	ldr	r3, [pc, #528]	@ (800c33c <_dtoa_r+0x2d4>)
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c350 <_dtoa_r+0x2e8>
 800c132:	f000 bd33 	b.w	800cb9c <_dtoa_r+0xb34>
 800c136:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c13a:	aa16      	add	r2, sp, #88	@ 0x58
 800c13c:	a917      	add	r1, sp, #92	@ 0x5c
 800c13e:	4658      	mov	r0, fp
 800c140:	f001 fd86 	bl	800dc50 <__d2b>
 800c144:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c148:	4681      	mov	r9, r0
 800c14a:	2e00      	cmp	r6, #0
 800c14c:	d077      	beq.n	800c23e <_dtoa_r+0x1d6>
 800c14e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c150:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c15c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c160:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c164:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c168:	4619      	mov	r1, r3
 800c16a:	2200      	movs	r2, #0
 800c16c:	4b74      	ldr	r3, [pc, #464]	@ (800c340 <_dtoa_r+0x2d8>)
 800c16e:	f7f4 f89b 	bl	80002a8 <__aeabi_dsub>
 800c172:	a369      	add	r3, pc, #420	@ (adr r3, 800c318 <_dtoa_r+0x2b0>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f4 fa4e 	bl	8000618 <__aeabi_dmul>
 800c17c:	a368      	add	r3, pc, #416	@ (adr r3, 800c320 <_dtoa_r+0x2b8>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 f893 	bl	80002ac <__adddf3>
 800c186:	4604      	mov	r4, r0
 800c188:	4630      	mov	r0, r6
 800c18a:	460d      	mov	r5, r1
 800c18c:	f7f4 f9da 	bl	8000544 <__aeabi_i2d>
 800c190:	a365      	add	r3, pc, #404	@ (adr r3, 800c328 <_dtoa_r+0x2c0>)
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	f7f4 fa3f 	bl	8000618 <__aeabi_dmul>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	f7f4 f883 	bl	80002ac <__adddf3>
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	460d      	mov	r5, r1
 800c1aa:	f7f4 fce5 	bl	8000b78 <__aeabi_d2iz>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f7f4 fca0 	bl	8000afc <__aeabi_dcmplt>
 800c1bc:	b140      	cbz	r0, 800c1d0 <_dtoa_r+0x168>
 800c1be:	4638      	mov	r0, r7
 800c1c0:	f7f4 f9c0 	bl	8000544 <__aeabi_i2d>
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	462b      	mov	r3, r5
 800c1c8:	f7f4 fc8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1cc:	b900      	cbnz	r0, 800c1d0 <_dtoa_r+0x168>
 800c1ce:	3f01      	subs	r7, #1
 800c1d0:	2f16      	cmp	r7, #22
 800c1d2:	d851      	bhi.n	800c278 <_dtoa_r+0x210>
 800c1d4:	4b5b      	ldr	r3, [pc, #364]	@ (800c344 <_dtoa_r+0x2dc>)
 800c1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c1e2:	f7f4 fc8b 	bl	8000afc <__aeabi_dcmplt>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d048      	beq.n	800c27c <_dtoa_r+0x214>
 800c1ea:	3f01      	subs	r7, #1
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800c1f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c1f2:	1b9b      	subs	r3, r3, r6
 800c1f4:	1e5a      	subs	r2, r3, #1
 800c1f6:	bf44      	itt	mi
 800c1f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800c1fc:	2300      	movmi	r3, #0
 800c1fe:	9208      	str	r2, [sp, #32]
 800c200:	bf54      	ite	pl
 800c202:	f04f 0800 	movpl.w	r8, #0
 800c206:	9308      	strmi	r3, [sp, #32]
 800c208:	2f00      	cmp	r7, #0
 800c20a:	db39      	blt.n	800c280 <_dtoa_r+0x218>
 800c20c:	9b08      	ldr	r3, [sp, #32]
 800c20e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c210:	443b      	add	r3, r7
 800c212:	9308      	str	r3, [sp, #32]
 800c214:	2300      	movs	r3, #0
 800c216:	930a      	str	r3, [sp, #40]	@ 0x28
 800c218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c21a:	2b09      	cmp	r3, #9
 800c21c:	d864      	bhi.n	800c2e8 <_dtoa_r+0x280>
 800c21e:	2b05      	cmp	r3, #5
 800c220:	bfc4      	itt	gt
 800c222:	3b04      	subgt	r3, #4
 800c224:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c228:	f1a3 0302 	sub.w	r3, r3, #2
 800c22c:	bfcc      	ite	gt
 800c22e:	2400      	movgt	r4, #0
 800c230:	2401      	movle	r4, #1
 800c232:	2b03      	cmp	r3, #3
 800c234:	d863      	bhi.n	800c2fe <_dtoa_r+0x296>
 800c236:	e8df f003 	tbb	[pc, r3]
 800c23a:	372a      	.short	0x372a
 800c23c:	5535      	.short	0x5535
 800c23e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c242:	441e      	add	r6, r3
 800c244:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c248:	2b20      	cmp	r3, #32
 800c24a:	bfc1      	itttt	gt
 800c24c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c250:	409f      	lslgt	r7, r3
 800c252:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c256:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c25a:	bfd6      	itet	le
 800c25c:	f1c3 0320 	rsble	r3, r3, #32
 800c260:	ea47 0003 	orrgt.w	r0, r7, r3
 800c264:	fa04 f003 	lslle.w	r0, r4, r3
 800c268:	f7f4 f95c 	bl	8000524 <__aeabi_ui2d>
 800c26c:	2201      	movs	r2, #1
 800c26e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c272:	3e01      	subs	r6, #1
 800c274:	9214      	str	r2, [sp, #80]	@ 0x50
 800c276:	e777      	b.n	800c168 <_dtoa_r+0x100>
 800c278:	2301      	movs	r3, #1
 800c27a:	e7b8      	b.n	800c1ee <_dtoa_r+0x186>
 800c27c:	9012      	str	r0, [sp, #72]	@ 0x48
 800c27e:	e7b7      	b.n	800c1f0 <_dtoa_r+0x188>
 800c280:	427b      	negs	r3, r7
 800c282:	930a      	str	r3, [sp, #40]	@ 0x28
 800c284:	2300      	movs	r3, #0
 800c286:	eba8 0807 	sub.w	r8, r8, r7
 800c28a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c28c:	e7c4      	b.n	800c218 <_dtoa_r+0x1b0>
 800c28e:	2300      	movs	r3, #0
 800c290:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c294:	2b00      	cmp	r3, #0
 800c296:	dc35      	bgt.n	800c304 <_dtoa_r+0x29c>
 800c298:	2301      	movs	r3, #1
 800c29a:	9300      	str	r3, [sp, #0]
 800c29c:	9307      	str	r3, [sp, #28]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2a2:	e00b      	b.n	800c2bc <_dtoa_r+0x254>
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	e7f3      	b.n	800c290 <_dtoa_r+0x228>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c2ae:	18fb      	adds	r3, r7, r3
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	9307      	str	r3, [sp, #28]
 800c2b8:	bfb8      	it	lt
 800c2ba:	2301      	movlt	r3, #1
 800c2bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	f102 0514 	add.w	r5, r2, #20
 800c2c8:	429d      	cmp	r5, r3
 800c2ca:	d91f      	bls.n	800c30c <_dtoa_r+0x2a4>
 800c2cc:	6041      	str	r1, [r0, #4]
 800c2ce:	4658      	mov	r0, fp
 800c2d0:	f001 f8da 	bl	800d488 <_Balloc>
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d13c      	bne.n	800c354 <_dtoa_r+0x2ec>
 800c2da:	4b1b      	ldr	r3, [pc, #108]	@ (800c348 <_dtoa_r+0x2e0>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f240 11af 	movw	r1, #431	@ 0x1af
 800c2e2:	e6d8      	b.n	800c096 <_dtoa_r+0x2e>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	e7e0      	b.n	800c2aa <_dtoa_r+0x242>
 800c2e8:	2401      	movs	r4, #1
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	9307      	str	r3, [sp, #28]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2312      	movs	r3, #18
 800c2fc:	e7d0      	b.n	800c2a0 <_dtoa_r+0x238>
 800c2fe:	2301      	movs	r3, #1
 800c300:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c302:	e7f5      	b.n	800c2f0 <_dtoa_r+0x288>
 800c304:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c306:	9300      	str	r3, [sp, #0]
 800c308:	9307      	str	r3, [sp, #28]
 800c30a:	e7d7      	b.n	800c2bc <_dtoa_r+0x254>
 800c30c:	3101      	adds	r1, #1
 800c30e:	0052      	lsls	r2, r2, #1
 800c310:	e7d8      	b.n	800c2c4 <_dtoa_r+0x25c>
 800c312:	bf00      	nop
 800c314:	f3af 8000 	nop.w
 800c318:	636f4361 	.word	0x636f4361
 800c31c:	3fd287a7 	.word	0x3fd287a7
 800c320:	8b60c8b3 	.word	0x8b60c8b3
 800c324:	3fc68a28 	.word	0x3fc68a28
 800c328:	509f79fb 	.word	0x509f79fb
 800c32c:	3fd34413 	.word	0x3fd34413
 800c330:	0800efaf 	.word	0x0800efaf
 800c334:	0800efc6 	.word	0x0800efc6
 800c338:	7ff00000 	.word	0x7ff00000
 800c33c:	0800ef72 	.word	0x0800ef72
 800c340:	3ff80000 	.word	0x3ff80000
 800c344:	0800f120 	.word	0x0800f120
 800c348:	0800f01e 	.word	0x0800f01e
 800c34c:	0800efab 	.word	0x0800efab
 800c350:	0800ef71 	.word	0x0800ef71
 800c354:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c358:	6018      	str	r0, [r3, #0]
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	2b0e      	cmp	r3, #14
 800c35e:	f200 80a4 	bhi.w	800c4aa <_dtoa_r+0x442>
 800c362:	2c00      	cmp	r4, #0
 800c364:	f000 80a1 	beq.w	800c4aa <_dtoa_r+0x442>
 800c368:	2f00      	cmp	r7, #0
 800c36a:	dd33      	ble.n	800c3d4 <_dtoa_r+0x36c>
 800c36c:	4bad      	ldr	r3, [pc, #692]	@ (800c624 <_dtoa_r+0x5bc>)
 800c36e:	f007 020f 	and.w	r2, r7, #15
 800c372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c376:	ed93 7b00 	vldr	d7, [r3]
 800c37a:	05f8      	lsls	r0, r7, #23
 800c37c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c380:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c384:	d516      	bpl.n	800c3b4 <_dtoa_r+0x34c>
 800c386:	4ba8      	ldr	r3, [pc, #672]	@ (800c628 <_dtoa_r+0x5c0>)
 800c388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c38c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c390:	f7f4 fa6c 	bl	800086c <__aeabi_ddiv>
 800c394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c398:	f004 040f 	and.w	r4, r4, #15
 800c39c:	2603      	movs	r6, #3
 800c39e:	4da2      	ldr	r5, [pc, #648]	@ (800c628 <_dtoa_r+0x5c0>)
 800c3a0:	b954      	cbnz	r4, 800c3b8 <_dtoa_r+0x350>
 800c3a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3aa:	f7f4 fa5f 	bl	800086c <__aeabi_ddiv>
 800c3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b2:	e028      	b.n	800c406 <_dtoa_r+0x39e>
 800c3b4:	2602      	movs	r6, #2
 800c3b6:	e7f2      	b.n	800c39e <_dtoa_r+0x336>
 800c3b8:	07e1      	lsls	r1, r4, #31
 800c3ba:	d508      	bpl.n	800c3ce <_dtoa_r+0x366>
 800c3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3c4:	f7f4 f928 	bl	8000618 <__aeabi_dmul>
 800c3c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3cc:	3601      	adds	r6, #1
 800c3ce:	1064      	asrs	r4, r4, #1
 800c3d0:	3508      	adds	r5, #8
 800c3d2:	e7e5      	b.n	800c3a0 <_dtoa_r+0x338>
 800c3d4:	f000 80d2 	beq.w	800c57c <_dtoa_r+0x514>
 800c3d8:	427c      	negs	r4, r7
 800c3da:	4b92      	ldr	r3, [pc, #584]	@ (800c624 <_dtoa_r+0x5bc>)
 800c3dc:	4d92      	ldr	r5, [pc, #584]	@ (800c628 <_dtoa_r+0x5c0>)
 800c3de:	f004 020f 	and.w	r2, r4, #15
 800c3e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3ee:	f7f4 f913 	bl	8000618 <__aeabi_dmul>
 800c3f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3f6:	1124      	asrs	r4, r4, #4
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	2602      	movs	r6, #2
 800c3fc:	2c00      	cmp	r4, #0
 800c3fe:	f040 80b2 	bne.w	800c566 <_dtoa_r+0x4fe>
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1d3      	bne.n	800c3ae <_dtoa_r+0x346>
 800c406:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c408:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80b7 	beq.w	800c580 <_dtoa_r+0x518>
 800c412:	4b86      	ldr	r3, [pc, #536]	@ (800c62c <_dtoa_r+0x5c4>)
 800c414:	2200      	movs	r2, #0
 800c416:	4620      	mov	r0, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	f7f4 fb6f 	bl	8000afc <__aeabi_dcmplt>
 800c41e:	2800      	cmp	r0, #0
 800c420:	f000 80ae 	beq.w	800c580 <_dtoa_r+0x518>
 800c424:	9b07      	ldr	r3, [sp, #28]
 800c426:	2b00      	cmp	r3, #0
 800c428:	f000 80aa 	beq.w	800c580 <_dtoa_r+0x518>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	dd37      	ble.n	800c4a2 <_dtoa_r+0x43a>
 800c432:	1e7b      	subs	r3, r7, #1
 800c434:	9304      	str	r3, [sp, #16]
 800c436:	4620      	mov	r0, r4
 800c438:	4b7d      	ldr	r3, [pc, #500]	@ (800c630 <_dtoa_r+0x5c8>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	4629      	mov	r1, r5
 800c43e:	f7f4 f8eb 	bl	8000618 <__aeabi_dmul>
 800c442:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c446:	9c00      	ldr	r4, [sp, #0]
 800c448:	3601      	adds	r6, #1
 800c44a:	4630      	mov	r0, r6
 800c44c:	f7f4 f87a 	bl	8000544 <__aeabi_i2d>
 800c450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c454:	f7f4 f8e0 	bl	8000618 <__aeabi_dmul>
 800c458:	4b76      	ldr	r3, [pc, #472]	@ (800c634 <_dtoa_r+0x5cc>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	f7f3 ff26 	bl	80002ac <__adddf3>
 800c460:	4605      	mov	r5, r0
 800c462:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c466:	2c00      	cmp	r4, #0
 800c468:	f040 808d 	bne.w	800c586 <_dtoa_r+0x51e>
 800c46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c470:	4b71      	ldr	r3, [pc, #452]	@ (800c638 <_dtoa_r+0x5d0>)
 800c472:	2200      	movs	r2, #0
 800c474:	f7f3 ff18 	bl	80002a8 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c480:	462a      	mov	r2, r5
 800c482:	4633      	mov	r3, r6
 800c484:	f7f4 fb58 	bl	8000b38 <__aeabi_dcmpgt>
 800c488:	2800      	cmp	r0, #0
 800c48a:	f040 828b 	bne.w	800c9a4 <_dtoa_r+0x93c>
 800c48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c492:	462a      	mov	r2, r5
 800c494:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c498:	f7f4 fb30 	bl	8000afc <__aeabi_dcmplt>
 800c49c:	2800      	cmp	r0, #0
 800c49e:	f040 8128 	bne.w	800c6f2 <_dtoa_r+0x68a>
 800c4a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f2c0 815a 	blt.w	800c766 <_dtoa_r+0x6fe>
 800c4b2:	2f0e      	cmp	r7, #14
 800c4b4:	f300 8157 	bgt.w	800c766 <_dtoa_r+0x6fe>
 800c4b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c624 <_dtoa_r+0x5bc>)
 800c4ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4be:	ed93 7b00 	vldr	d7, [r3]
 800c4c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	ed8d 7b00 	vstr	d7, [sp]
 800c4ca:	da03      	bge.n	800c4d4 <_dtoa_r+0x46c>
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f340 8101 	ble.w	800c6d6 <_dtoa_r+0x66e>
 800c4d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4d8:	4656      	mov	r6, sl
 800c4da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4de:	4620      	mov	r0, r4
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	f7f4 f9c3 	bl	800086c <__aeabi_ddiv>
 800c4e6:	f7f4 fb47 	bl	8000b78 <__aeabi_d2iz>
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	f7f4 f82a 	bl	8000544 <__aeabi_i2d>
 800c4f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4f4:	f7f4 f890 	bl	8000618 <__aeabi_dmul>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c504:	f7f3 fed0 	bl	80002a8 <__aeabi_dsub>
 800c508:	f806 4b01 	strb.w	r4, [r6], #1
 800c50c:	9d07      	ldr	r5, [sp, #28]
 800c50e:	eba6 040a 	sub.w	r4, r6, sl
 800c512:	42a5      	cmp	r5, r4
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	f040 8117 	bne.w	800c74a <_dtoa_r+0x6e2>
 800c51c:	f7f3 fec6 	bl	80002ac <__adddf3>
 800c520:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c524:	4604      	mov	r4, r0
 800c526:	460d      	mov	r5, r1
 800c528:	f7f4 fb06 	bl	8000b38 <__aeabi_dcmpgt>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f040 80f9 	bne.w	800c724 <_dtoa_r+0x6bc>
 800c532:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f4 fad5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c53e:	b118      	cbz	r0, 800c548 <_dtoa_r+0x4e0>
 800c540:	f018 0f01 	tst.w	r8, #1
 800c544:	f040 80ee 	bne.w	800c724 <_dtoa_r+0x6bc>
 800c548:	4649      	mov	r1, r9
 800c54a:	4658      	mov	r0, fp
 800c54c:	f000 ffdc 	bl	800d508 <_Bfree>
 800c550:	2300      	movs	r3, #0
 800c552:	7033      	strb	r3, [r6, #0]
 800c554:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c556:	3701      	adds	r7, #1
 800c558:	601f      	str	r7, [r3, #0]
 800c55a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 831d 	beq.w	800cb9c <_dtoa_r+0xb34>
 800c562:	601e      	str	r6, [r3, #0]
 800c564:	e31a      	b.n	800cb9c <_dtoa_r+0xb34>
 800c566:	07e2      	lsls	r2, r4, #31
 800c568:	d505      	bpl.n	800c576 <_dtoa_r+0x50e>
 800c56a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c56e:	f7f4 f853 	bl	8000618 <__aeabi_dmul>
 800c572:	3601      	adds	r6, #1
 800c574:	2301      	movs	r3, #1
 800c576:	1064      	asrs	r4, r4, #1
 800c578:	3508      	adds	r5, #8
 800c57a:	e73f      	b.n	800c3fc <_dtoa_r+0x394>
 800c57c:	2602      	movs	r6, #2
 800c57e:	e742      	b.n	800c406 <_dtoa_r+0x39e>
 800c580:	9c07      	ldr	r4, [sp, #28]
 800c582:	9704      	str	r7, [sp, #16]
 800c584:	e761      	b.n	800c44a <_dtoa_r+0x3e2>
 800c586:	4b27      	ldr	r3, [pc, #156]	@ (800c624 <_dtoa_r+0x5bc>)
 800c588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c58a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c58e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c592:	4454      	add	r4, sl
 800c594:	2900      	cmp	r1, #0
 800c596:	d053      	beq.n	800c640 <_dtoa_r+0x5d8>
 800c598:	4928      	ldr	r1, [pc, #160]	@ (800c63c <_dtoa_r+0x5d4>)
 800c59a:	2000      	movs	r0, #0
 800c59c:	f7f4 f966 	bl	800086c <__aeabi_ddiv>
 800c5a0:	4633      	mov	r3, r6
 800c5a2:	462a      	mov	r2, r5
 800c5a4:	f7f3 fe80 	bl	80002a8 <__aeabi_dsub>
 800c5a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5ac:	4656      	mov	r6, sl
 800c5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5b2:	f7f4 fae1 	bl	8000b78 <__aeabi_d2iz>
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	f7f3 ffc4 	bl	8000544 <__aeabi_i2d>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c4:	f7f3 fe70 	bl	80002a8 <__aeabi_dsub>
 800c5c8:	3530      	adds	r5, #48	@ 0x30
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5d2:	f806 5b01 	strb.w	r5, [r6], #1
 800c5d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5da:	f7f4 fa8f 	bl	8000afc <__aeabi_dcmplt>
 800c5de:	2800      	cmp	r0, #0
 800c5e0:	d171      	bne.n	800c6c6 <_dtoa_r+0x65e>
 800c5e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c5e6:	4911      	ldr	r1, [pc, #68]	@ (800c62c <_dtoa_r+0x5c4>)
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	f7f3 fe5d 	bl	80002a8 <__aeabi_dsub>
 800c5ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c5f2:	f7f4 fa83 	bl	8000afc <__aeabi_dcmplt>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f040 8095 	bne.w	800c726 <_dtoa_r+0x6be>
 800c5fc:	42a6      	cmp	r6, r4
 800c5fe:	f43f af50 	beq.w	800c4a2 <_dtoa_r+0x43a>
 800c602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c606:	4b0a      	ldr	r3, [pc, #40]	@ (800c630 <_dtoa_r+0x5c8>)
 800c608:	2200      	movs	r2, #0
 800c60a:	f7f4 f805 	bl	8000618 <__aeabi_dmul>
 800c60e:	4b08      	ldr	r3, [pc, #32]	@ (800c630 <_dtoa_r+0x5c8>)
 800c610:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c614:	2200      	movs	r2, #0
 800c616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c61a:	f7f3 fffd 	bl	8000618 <__aeabi_dmul>
 800c61e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c622:	e7c4      	b.n	800c5ae <_dtoa_r+0x546>
 800c624:	0800f120 	.word	0x0800f120
 800c628:	0800f0f8 	.word	0x0800f0f8
 800c62c:	3ff00000 	.word	0x3ff00000
 800c630:	40240000 	.word	0x40240000
 800c634:	401c0000 	.word	0x401c0000
 800c638:	40140000 	.word	0x40140000
 800c63c:	3fe00000 	.word	0x3fe00000
 800c640:	4631      	mov	r1, r6
 800c642:	4628      	mov	r0, r5
 800c644:	f7f3 ffe8 	bl	8000618 <__aeabi_dmul>
 800c648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c64c:	9415      	str	r4, [sp, #84]	@ 0x54
 800c64e:	4656      	mov	r6, sl
 800c650:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c654:	f7f4 fa90 	bl	8000b78 <__aeabi_d2iz>
 800c658:	4605      	mov	r5, r0
 800c65a:	f7f3 ff73 	bl	8000544 <__aeabi_i2d>
 800c65e:	4602      	mov	r2, r0
 800c660:	460b      	mov	r3, r1
 800c662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c666:	f7f3 fe1f 	bl	80002a8 <__aeabi_dsub>
 800c66a:	3530      	adds	r5, #48	@ 0x30
 800c66c:	f806 5b01 	strb.w	r5, [r6], #1
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	42a6      	cmp	r6, r4
 800c676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	d124      	bne.n	800c6ca <_dtoa_r+0x662>
 800c680:	4bac      	ldr	r3, [pc, #688]	@ (800c934 <_dtoa_r+0x8cc>)
 800c682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c686:	f7f3 fe11 	bl	80002ac <__adddf3>
 800c68a:	4602      	mov	r2, r0
 800c68c:	460b      	mov	r3, r1
 800c68e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c692:	f7f4 fa51 	bl	8000b38 <__aeabi_dcmpgt>
 800c696:	2800      	cmp	r0, #0
 800c698:	d145      	bne.n	800c726 <_dtoa_r+0x6be>
 800c69a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c69e:	49a5      	ldr	r1, [pc, #660]	@ (800c934 <_dtoa_r+0x8cc>)
 800c6a0:	2000      	movs	r0, #0
 800c6a2:	f7f3 fe01 	bl	80002a8 <__aeabi_dsub>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ae:	f7f4 fa25 	bl	8000afc <__aeabi_dcmplt>
 800c6b2:	2800      	cmp	r0, #0
 800c6b4:	f43f aef5 	beq.w	800c4a2 <_dtoa_r+0x43a>
 800c6b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c6ba:	1e73      	subs	r3, r6, #1
 800c6bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800c6be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6c2:	2b30      	cmp	r3, #48	@ 0x30
 800c6c4:	d0f8      	beq.n	800c6b8 <_dtoa_r+0x650>
 800c6c6:	9f04      	ldr	r7, [sp, #16]
 800c6c8:	e73e      	b.n	800c548 <_dtoa_r+0x4e0>
 800c6ca:	4b9b      	ldr	r3, [pc, #620]	@ (800c938 <_dtoa_r+0x8d0>)
 800c6cc:	f7f3 ffa4 	bl	8000618 <__aeabi_dmul>
 800c6d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6d4:	e7bc      	b.n	800c650 <_dtoa_r+0x5e8>
 800c6d6:	d10c      	bne.n	800c6f2 <_dtoa_r+0x68a>
 800c6d8:	4b98      	ldr	r3, [pc, #608]	@ (800c93c <_dtoa_r+0x8d4>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6e0:	f7f3 ff9a 	bl	8000618 <__aeabi_dmul>
 800c6e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6e8:	f7f4 fa1c 	bl	8000b24 <__aeabi_dcmpge>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f000 8157 	beq.w	800c9a0 <_dtoa_r+0x938>
 800c6f2:	2400      	movs	r4, #0
 800c6f4:	4625      	mov	r5, r4
 800c6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6f8:	43db      	mvns	r3, r3
 800c6fa:	9304      	str	r3, [sp, #16]
 800c6fc:	4656      	mov	r6, sl
 800c6fe:	2700      	movs	r7, #0
 800c700:	4621      	mov	r1, r4
 800c702:	4658      	mov	r0, fp
 800c704:	f000 ff00 	bl	800d508 <_Bfree>
 800c708:	2d00      	cmp	r5, #0
 800c70a:	d0dc      	beq.n	800c6c6 <_dtoa_r+0x65e>
 800c70c:	b12f      	cbz	r7, 800c71a <_dtoa_r+0x6b2>
 800c70e:	42af      	cmp	r7, r5
 800c710:	d003      	beq.n	800c71a <_dtoa_r+0x6b2>
 800c712:	4639      	mov	r1, r7
 800c714:	4658      	mov	r0, fp
 800c716:	f000 fef7 	bl	800d508 <_Bfree>
 800c71a:	4629      	mov	r1, r5
 800c71c:	4658      	mov	r0, fp
 800c71e:	f000 fef3 	bl	800d508 <_Bfree>
 800c722:	e7d0      	b.n	800c6c6 <_dtoa_r+0x65e>
 800c724:	9704      	str	r7, [sp, #16]
 800c726:	4633      	mov	r3, r6
 800c728:	461e      	mov	r6, r3
 800c72a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c72e:	2a39      	cmp	r2, #57	@ 0x39
 800c730:	d107      	bne.n	800c742 <_dtoa_r+0x6da>
 800c732:	459a      	cmp	sl, r3
 800c734:	d1f8      	bne.n	800c728 <_dtoa_r+0x6c0>
 800c736:	9a04      	ldr	r2, [sp, #16]
 800c738:	3201      	adds	r2, #1
 800c73a:	9204      	str	r2, [sp, #16]
 800c73c:	2230      	movs	r2, #48	@ 0x30
 800c73e:	f88a 2000 	strb.w	r2, [sl]
 800c742:	781a      	ldrb	r2, [r3, #0]
 800c744:	3201      	adds	r2, #1
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	e7bd      	b.n	800c6c6 <_dtoa_r+0x65e>
 800c74a:	4b7b      	ldr	r3, [pc, #492]	@ (800c938 <_dtoa_r+0x8d0>)
 800c74c:	2200      	movs	r2, #0
 800c74e:	f7f3 ff63 	bl	8000618 <__aeabi_dmul>
 800c752:	2200      	movs	r2, #0
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	460d      	mov	r5, r1
 800c75a:	f7f4 f9c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800c75e:	2800      	cmp	r0, #0
 800c760:	f43f aebb 	beq.w	800c4da <_dtoa_r+0x472>
 800c764:	e6f0      	b.n	800c548 <_dtoa_r+0x4e0>
 800c766:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c768:	2a00      	cmp	r2, #0
 800c76a:	f000 80db 	beq.w	800c924 <_dtoa_r+0x8bc>
 800c76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c770:	2a01      	cmp	r2, #1
 800c772:	f300 80bf 	bgt.w	800c8f4 <_dtoa_r+0x88c>
 800c776:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c778:	2a00      	cmp	r2, #0
 800c77a:	f000 80b7 	beq.w	800c8ec <_dtoa_r+0x884>
 800c77e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c782:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c784:	4646      	mov	r6, r8
 800c786:	9a08      	ldr	r2, [sp, #32]
 800c788:	2101      	movs	r1, #1
 800c78a:	441a      	add	r2, r3
 800c78c:	4658      	mov	r0, fp
 800c78e:	4498      	add	r8, r3
 800c790:	9208      	str	r2, [sp, #32]
 800c792:	f000 ffb7 	bl	800d704 <__i2b>
 800c796:	4605      	mov	r5, r0
 800c798:	b15e      	cbz	r6, 800c7b2 <_dtoa_r+0x74a>
 800c79a:	9b08      	ldr	r3, [sp, #32]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	dd08      	ble.n	800c7b2 <_dtoa_r+0x74a>
 800c7a0:	42b3      	cmp	r3, r6
 800c7a2:	9a08      	ldr	r2, [sp, #32]
 800c7a4:	bfa8      	it	ge
 800c7a6:	4633      	movge	r3, r6
 800c7a8:	eba8 0803 	sub.w	r8, r8, r3
 800c7ac:	1af6      	subs	r6, r6, r3
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	9308      	str	r3, [sp, #32]
 800c7b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7b4:	b1f3      	cbz	r3, 800c7f4 <_dtoa_r+0x78c>
 800c7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f000 80b7 	beq.w	800c92c <_dtoa_r+0x8c4>
 800c7be:	b18c      	cbz	r4, 800c7e4 <_dtoa_r+0x77c>
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	4658      	mov	r0, fp
 800c7c6:	f001 f85d 	bl	800d884 <__pow5mult>
 800c7ca:	464a      	mov	r2, r9
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	4605      	mov	r5, r0
 800c7d0:	4658      	mov	r0, fp
 800c7d2:	f000 ffad 	bl	800d730 <__multiply>
 800c7d6:	4649      	mov	r1, r9
 800c7d8:	9004      	str	r0, [sp, #16]
 800c7da:	4658      	mov	r0, fp
 800c7dc:	f000 fe94 	bl	800d508 <_Bfree>
 800c7e0:	9b04      	ldr	r3, [sp, #16]
 800c7e2:	4699      	mov	r9, r3
 800c7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7e6:	1b1a      	subs	r2, r3, r4
 800c7e8:	d004      	beq.n	800c7f4 <_dtoa_r+0x78c>
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	4658      	mov	r0, fp
 800c7ee:	f001 f849 	bl	800d884 <__pow5mult>
 800c7f2:	4681      	mov	r9, r0
 800c7f4:	2101      	movs	r1, #1
 800c7f6:	4658      	mov	r0, fp
 800c7f8:	f000 ff84 	bl	800d704 <__i2b>
 800c7fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7fe:	4604      	mov	r4, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	f000 81cf 	beq.w	800cba4 <_dtoa_r+0xb3c>
 800c806:	461a      	mov	r2, r3
 800c808:	4601      	mov	r1, r0
 800c80a:	4658      	mov	r0, fp
 800c80c:	f001 f83a 	bl	800d884 <__pow5mult>
 800c810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c812:	2b01      	cmp	r3, #1
 800c814:	4604      	mov	r4, r0
 800c816:	f300 8095 	bgt.w	800c944 <_dtoa_r+0x8dc>
 800c81a:	9b02      	ldr	r3, [sp, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f040 8087 	bne.w	800c930 <_dtoa_r+0x8c8>
 800c822:	9b03      	ldr	r3, [sp, #12]
 800c824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f040 8089 	bne.w	800c940 <_dtoa_r+0x8d8>
 800c82e:	9b03      	ldr	r3, [sp, #12]
 800c830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c834:	0d1b      	lsrs	r3, r3, #20
 800c836:	051b      	lsls	r3, r3, #20
 800c838:	b12b      	cbz	r3, 800c846 <_dtoa_r+0x7de>
 800c83a:	9b08      	ldr	r3, [sp, #32]
 800c83c:	3301      	adds	r3, #1
 800c83e:	9308      	str	r3, [sp, #32]
 800c840:	f108 0801 	add.w	r8, r8, #1
 800c844:	2301      	movs	r3, #1
 800c846:	930a      	str	r3, [sp, #40]	@ 0x28
 800c848:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 81b0 	beq.w	800cbb0 <_dtoa_r+0xb48>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c856:	6918      	ldr	r0, [r3, #16]
 800c858:	f000 ff08 	bl	800d66c <__hi0bits>
 800c85c:	f1c0 0020 	rsb	r0, r0, #32
 800c860:	9b08      	ldr	r3, [sp, #32]
 800c862:	4418      	add	r0, r3
 800c864:	f010 001f 	ands.w	r0, r0, #31
 800c868:	d077      	beq.n	800c95a <_dtoa_r+0x8f2>
 800c86a:	f1c0 0320 	rsb	r3, r0, #32
 800c86e:	2b04      	cmp	r3, #4
 800c870:	dd6b      	ble.n	800c94a <_dtoa_r+0x8e2>
 800c872:	9b08      	ldr	r3, [sp, #32]
 800c874:	f1c0 001c 	rsb	r0, r0, #28
 800c878:	4403      	add	r3, r0
 800c87a:	4480      	add	r8, r0
 800c87c:	4406      	add	r6, r0
 800c87e:	9308      	str	r3, [sp, #32]
 800c880:	f1b8 0f00 	cmp.w	r8, #0
 800c884:	dd05      	ble.n	800c892 <_dtoa_r+0x82a>
 800c886:	4649      	mov	r1, r9
 800c888:	4642      	mov	r2, r8
 800c88a:	4658      	mov	r0, fp
 800c88c:	f001 f854 	bl	800d938 <__lshift>
 800c890:	4681      	mov	r9, r0
 800c892:	9b08      	ldr	r3, [sp, #32]
 800c894:	2b00      	cmp	r3, #0
 800c896:	dd05      	ble.n	800c8a4 <_dtoa_r+0x83c>
 800c898:	4621      	mov	r1, r4
 800c89a:	461a      	mov	r2, r3
 800c89c:	4658      	mov	r0, fp
 800c89e:	f001 f84b 	bl	800d938 <__lshift>
 800c8a2:	4604      	mov	r4, r0
 800c8a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d059      	beq.n	800c95e <_dtoa_r+0x8f6>
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	4648      	mov	r0, r9
 800c8ae:	f001 f8af 	bl	800da10 <__mcmp>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	da53      	bge.n	800c95e <_dtoa_r+0x8f6>
 800c8b6:	1e7b      	subs	r3, r7, #1
 800c8b8:	9304      	str	r3, [sp, #16]
 800c8ba:	4649      	mov	r1, r9
 800c8bc:	2300      	movs	r3, #0
 800c8be:	220a      	movs	r2, #10
 800c8c0:	4658      	mov	r0, fp
 800c8c2:	f000 fe43 	bl	800d54c <__multadd>
 800c8c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 8172 	beq.w	800cbb4 <_dtoa_r+0xb4c>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f000 fe38 	bl	800d54c <__multadd>
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	dc67      	bgt.n	800c9b4 <_dtoa_r+0x94c>
 800c8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	dc41      	bgt.n	800c96e <_dtoa_r+0x906>
 800c8ea:	e063      	b.n	800c9b4 <_dtoa_r+0x94c>
 800c8ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c8ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c8f2:	e746      	b.n	800c782 <_dtoa_r+0x71a>
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	1e5c      	subs	r4, r3, #1
 800c8f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fa:	42a3      	cmp	r3, r4
 800c8fc:	bfbf      	itttt	lt
 800c8fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c900:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c902:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c904:	1ae3      	sublt	r3, r4, r3
 800c906:	bfb4      	ite	lt
 800c908:	18d2      	addlt	r2, r2, r3
 800c90a:	1b1c      	subge	r4, r3, r4
 800c90c:	9b07      	ldr	r3, [sp, #28]
 800c90e:	bfbc      	itt	lt
 800c910:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c912:	2400      	movlt	r4, #0
 800c914:	2b00      	cmp	r3, #0
 800c916:	bfb5      	itete	lt
 800c918:	eba8 0603 	sublt.w	r6, r8, r3
 800c91c:	9b07      	ldrge	r3, [sp, #28]
 800c91e:	2300      	movlt	r3, #0
 800c920:	4646      	movge	r6, r8
 800c922:	e730      	b.n	800c786 <_dtoa_r+0x71e>
 800c924:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c926:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c928:	4646      	mov	r6, r8
 800c92a:	e735      	b.n	800c798 <_dtoa_r+0x730>
 800c92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c92e:	e75c      	b.n	800c7ea <_dtoa_r+0x782>
 800c930:	2300      	movs	r3, #0
 800c932:	e788      	b.n	800c846 <_dtoa_r+0x7de>
 800c934:	3fe00000 	.word	0x3fe00000
 800c938:	40240000 	.word	0x40240000
 800c93c:	40140000 	.word	0x40140000
 800c940:	9b02      	ldr	r3, [sp, #8]
 800c942:	e780      	b.n	800c846 <_dtoa_r+0x7de>
 800c944:	2300      	movs	r3, #0
 800c946:	930a      	str	r3, [sp, #40]	@ 0x28
 800c948:	e782      	b.n	800c850 <_dtoa_r+0x7e8>
 800c94a:	d099      	beq.n	800c880 <_dtoa_r+0x818>
 800c94c:	9a08      	ldr	r2, [sp, #32]
 800c94e:	331c      	adds	r3, #28
 800c950:	441a      	add	r2, r3
 800c952:	4498      	add	r8, r3
 800c954:	441e      	add	r6, r3
 800c956:	9208      	str	r2, [sp, #32]
 800c958:	e792      	b.n	800c880 <_dtoa_r+0x818>
 800c95a:	4603      	mov	r3, r0
 800c95c:	e7f6      	b.n	800c94c <_dtoa_r+0x8e4>
 800c95e:	9b07      	ldr	r3, [sp, #28]
 800c960:	9704      	str	r7, [sp, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dc20      	bgt.n	800c9a8 <_dtoa_r+0x940>
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	dd1e      	ble.n	800c9ac <_dtoa_r+0x944>
 800c96e:	9b00      	ldr	r3, [sp, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f aec0 	bne.w	800c6f6 <_dtoa_r+0x68e>
 800c976:	4621      	mov	r1, r4
 800c978:	2205      	movs	r2, #5
 800c97a:	4658      	mov	r0, fp
 800c97c:	f000 fde6 	bl	800d54c <__multadd>
 800c980:	4601      	mov	r1, r0
 800c982:	4604      	mov	r4, r0
 800c984:	4648      	mov	r0, r9
 800c986:	f001 f843 	bl	800da10 <__mcmp>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	f77f aeb3 	ble.w	800c6f6 <_dtoa_r+0x68e>
 800c990:	4656      	mov	r6, sl
 800c992:	2331      	movs	r3, #49	@ 0x31
 800c994:	f806 3b01 	strb.w	r3, [r6], #1
 800c998:	9b04      	ldr	r3, [sp, #16]
 800c99a:	3301      	adds	r3, #1
 800c99c:	9304      	str	r3, [sp, #16]
 800c99e:	e6ae      	b.n	800c6fe <_dtoa_r+0x696>
 800c9a0:	9c07      	ldr	r4, [sp, #28]
 800c9a2:	9704      	str	r7, [sp, #16]
 800c9a4:	4625      	mov	r5, r4
 800c9a6:	e7f3      	b.n	800c990 <_dtoa_r+0x928>
 800c9a8:	9b07      	ldr	r3, [sp, #28]
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	f000 8104 	beq.w	800cbbc <_dtoa_r+0xb54>
 800c9b4:	2e00      	cmp	r6, #0
 800c9b6:	dd05      	ble.n	800c9c4 <_dtoa_r+0x95c>
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	4658      	mov	r0, fp
 800c9be:	f000 ffbb 	bl	800d938 <__lshift>
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d05a      	beq.n	800ca80 <_dtoa_r+0xa18>
 800c9ca:	6869      	ldr	r1, [r5, #4]
 800c9cc:	4658      	mov	r0, fp
 800c9ce:	f000 fd5b 	bl	800d488 <_Balloc>
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	b928      	cbnz	r0, 800c9e2 <_dtoa_r+0x97a>
 800c9d6:	4b84      	ldr	r3, [pc, #528]	@ (800cbe8 <_dtoa_r+0xb80>)
 800c9d8:	4602      	mov	r2, r0
 800c9da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c9de:	f7ff bb5a 	b.w	800c096 <_dtoa_r+0x2e>
 800c9e2:	692a      	ldr	r2, [r5, #16]
 800c9e4:	3202      	adds	r2, #2
 800c9e6:	0092      	lsls	r2, r2, #2
 800c9e8:	f105 010c 	add.w	r1, r5, #12
 800c9ec:	300c      	adds	r0, #12
 800c9ee:	f7ff fa94 	bl	800bf1a <memcpy>
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	4631      	mov	r1, r6
 800c9f6:	4658      	mov	r0, fp
 800c9f8:	f000 ff9e 	bl	800d938 <__lshift>
 800c9fc:	f10a 0301 	add.w	r3, sl, #1
 800ca00:	9307      	str	r3, [sp, #28]
 800ca02:	9b00      	ldr	r3, [sp, #0]
 800ca04:	4453      	add	r3, sl
 800ca06:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca08:	9b02      	ldr	r3, [sp, #8]
 800ca0a:	f003 0301 	and.w	r3, r3, #1
 800ca0e:	462f      	mov	r7, r5
 800ca10:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca12:	4605      	mov	r5, r0
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	4621      	mov	r1, r4
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	4648      	mov	r0, r9
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	f7ff fa99 	bl	800bf54 <quorem>
 800ca22:	4639      	mov	r1, r7
 800ca24:	9002      	str	r0, [sp, #8]
 800ca26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	f000 fff0 	bl	800da10 <__mcmp>
 800ca30:	462a      	mov	r2, r5
 800ca32:	9008      	str	r0, [sp, #32]
 800ca34:	4621      	mov	r1, r4
 800ca36:	4658      	mov	r0, fp
 800ca38:	f001 f806 	bl	800da48 <__mdiff>
 800ca3c:	68c2      	ldr	r2, [r0, #12]
 800ca3e:	4606      	mov	r6, r0
 800ca40:	bb02      	cbnz	r2, 800ca84 <_dtoa_r+0xa1c>
 800ca42:	4601      	mov	r1, r0
 800ca44:	4648      	mov	r0, r9
 800ca46:	f000 ffe3 	bl	800da10 <__mcmp>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4658      	mov	r0, fp
 800ca50:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca52:	f000 fd59 	bl	800d508 <_Bfree>
 800ca56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca5a:	9e07      	ldr	r6, [sp, #28]
 800ca5c:	ea43 0102 	orr.w	r1, r3, r2
 800ca60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca62:	4319      	orrs	r1, r3
 800ca64:	d110      	bne.n	800ca88 <_dtoa_r+0xa20>
 800ca66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca6a:	d029      	beq.n	800cac0 <_dtoa_r+0xa58>
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd02      	ble.n	800ca78 <_dtoa_r+0xa10>
 800ca72:	9b02      	ldr	r3, [sp, #8]
 800ca74:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ca78:	9b00      	ldr	r3, [sp, #0]
 800ca7a:	f883 8000 	strb.w	r8, [r3]
 800ca7e:	e63f      	b.n	800c700 <_dtoa_r+0x698>
 800ca80:	4628      	mov	r0, r5
 800ca82:	e7bb      	b.n	800c9fc <_dtoa_r+0x994>
 800ca84:	2201      	movs	r2, #1
 800ca86:	e7e1      	b.n	800ca4c <_dtoa_r+0x9e4>
 800ca88:	9b08      	ldr	r3, [sp, #32]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	db04      	blt.n	800ca98 <_dtoa_r+0xa30>
 800ca8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca90:	430b      	orrs	r3, r1
 800ca92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca94:	430b      	orrs	r3, r1
 800ca96:	d120      	bne.n	800cada <_dtoa_r+0xa72>
 800ca98:	2a00      	cmp	r2, #0
 800ca9a:	dded      	ble.n	800ca78 <_dtoa_r+0xa10>
 800ca9c:	4649      	mov	r1, r9
 800ca9e:	2201      	movs	r2, #1
 800caa0:	4658      	mov	r0, fp
 800caa2:	f000 ff49 	bl	800d938 <__lshift>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4681      	mov	r9, r0
 800caaa:	f000 ffb1 	bl	800da10 <__mcmp>
 800caae:	2800      	cmp	r0, #0
 800cab0:	dc03      	bgt.n	800caba <_dtoa_r+0xa52>
 800cab2:	d1e1      	bne.n	800ca78 <_dtoa_r+0xa10>
 800cab4:	f018 0f01 	tst.w	r8, #1
 800cab8:	d0de      	beq.n	800ca78 <_dtoa_r+0xa10>
 800caba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cabe:	d1d8      	bne.n	800ca72 <_dtoa_r+0xa0a>
 800cac0:	9a00      	ldr	r2, [sp, #0]
 800cac2:	2339      	movs	r3, #57	@ 0x39
 800cac4:	7013      	strb	r3, [r2, #0]
 800cac6:	4633      	mov	r3, r6
 800cac8:	461e      	mov	r6, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cad0:	2a39      	cmp	r2, #57	@ 0x39
 800cad2:	d052      	beq.n	800cb7a <_dtoa_r+0xb12>
 800cad4:	3201      	adds	r2, #1
 800cad6:	701a      	strb	r2, [r3, #0]
 800cad8:	e612      	b.n	800c700 <_dtoa_r+0x698>
 800cada:	2a00      	cmp	r2, #0
 800cadc:	dd07      	ble.n	800caee <_dtoa_r+0xa86>
 800cade:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cae2:	d0ed      	beq.n	800cac0 <_dtoa_r+0xa58>
 800cae4:	9a00      	ldr	r2, [sp, #0]
 800cae6:	f108 0301 	add.w	r3, r8, #1
 800caea:	7013      	strb	r3, [r2, #0]
 800caec:	e608      	b.n	800c700 <_dtoa_r+0x698>
 800caee:	9b07      	ldr	r3, [sp, #28]
 800caf0:	9a07      	ldr	r2, [sp, #28]
 800caf2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800caf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d028      	beq.n	800cb4e <_dtoa_r+0xae6>
 800cafc:	4649      	mov	r1, r9
 800cafe:	2300      	movs	r3, #0
 800cb00:	220a      	movs	r2, #10
 800cb02:	4658      	mov	r0, fp
 800cb04:	f000 fd22 	bl	800d54c <__multadd>
 800cb08:	42af      	cmp	r7, r5
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	f04f 0300 	mov.w	r3, #0
 800cb10:	f04f 020a 	mov.w	r2, #10
 800cb14:	4639      	mov	r1, r7
 800cb16:	4658      	mov	r0, fp
 800cb18:	d107      	bne.n	800cb2a <_dtoa_r+0xac2>
 800cb1a:	f000 fd17 	bl	800d54c <__multadd>
 800cb1e:	4607      	mov	r7, r0
 800cb20:	4605      	mov	r5, r0
 800cb22:	9b07      	ldr	r3, [sp, #28]
 800cb24:	3301      	adds	r3, #1
 800cb26:	9307      	str	r3, [sp, #28]
 800cb28:	e774      	b.n	800ca14 <_dtoa_r+0x9ac>
 800cb2a:	f000 fd0f 	bl	800d54c <__multadd>
 800cb2e:	4629      	mov	r1, r5
 800cb30:	4607      	mov	r7, r0
 800cb32:	2300      	movs	r3, #0
 800cb34:	220a      	movs	r2, #10
 800cb36:	4658      	mov	r0, fp
 800cb38:	f000 fd08 	bl	800d54c <__multadd>
 800cb3c:	4605      	mov	r5, r0
 800cb3e:	e7f0      	b.n	800cb22 <_dtoa_r+0xaba>
 800cb40:	9b00      	ldr	r3, [sp, #0]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	bfcc      	ite	gt
 800cb46:	461e      	movgt	r6, r3
 800cb48:	2601      	movle	r6, #1
 800cb4a:	4456      	add	r6, sl
 800cb4c:	2700      	movs	r7, #0
 800cb4e:	4649      	mov	r1, r9
 800cb50:	2201      	movs	r2, #1
 800cb52:	4658      	mov	r0, fp
 800cb54:	f000 fef0 	bl	800d938 <__lshift>
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4681      	mov	r9, r0
 800cb5c:	f000 ff58 	bl	800da10 <__mcmp>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	dcb0      	bgt.n	800cac6 <_dtoa_r+0xa5e>
 800cb64:	d102      	bne.n	800cb6c <_dtoa_r+0xb04>
 800cb66:	f018 0f01 	tst.w	r8, #1
 800cb6a:	d1ac      	bne.n	800cac6 <_dtoa_r+0xa5e>
 800cb6c:	4633      	mov	r3, r6
 800cb6e:	461e      	mov	r6, r3
 800cb70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb74:	2a30      	cmp	r2, #48	@ 0x30
 800cb76:	d0fa      	beq.n	800cb6e <_dtoa_r+0xb06>
 800cb78:	e5c2      	b.n	800c700 <_dtoa_r+0x698>
 800cb7a:	459a      	cmp	sl, r3
 800cb7c:	d1a4      	bne.n	800cac8 <_dtoa_r+0xa60>
 800cb7e:	9b04      	ldr	r3, [sp, #16]
 800cb80:	3301      	adds	r3, #1
 800cb82:	9304      	str	r3, [sp, #16]
 800cb84:	2331      	movs	r3, #49	@ 0x31
 800cb86:	f88a 3000 	strb.w	r3, [sl]
 800cb8a:	e5b9      	b.n	800c700 <_dtoa_r+0x698>
 800cb8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cbec <_dtoa_r+0xb84>
 800cb92:	b11b      	cbz	r3, 800cb9c <_dtoa_r+0xb34>
 800cb94:	f10a 0308 	add.w	r3, sl, #8
 800cb98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	4650      	mov	r0, sl
 800cb9e:	b019      	add	sp, #100	@ 0x64
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	f77f ae37 	ble.w	800c81a <_dtoa_r+0x7b2>
 800cbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbae:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbb0:	2001      	movs	r0, #1
 800cbb2:	e655      	b.n	800c860 <_dtoa_r+0x7f8>
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f77f aed6 	ble.w	800c968 <_dtoa_r+0x900>
 800cbbc:	4656      	mov	r6, sl
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	4648      	mov	r0, r9
 800cbc2:	f7ff f9c7 	bl	800bf54 <quorem>
 800cbc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbca:	f806 8b01 	strb.w	r8, [r6], #1
 800cbce:	9b00      	ldr	r3, [sp, #0]
 800cbd0:	eba6 020a 	sub.w	r2, r6, sl
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	ddb3      	ble.n	800cb40 <_dtoa_r+0xad8>
 800cbd8:	4649      	mov	r1, r9
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4658      	mov	r0, fp
 800cbe0:	f000 fcb4 	bl	800d54c <__multadd>
 800cbe4:	4681      	mov	r9, r0
 800cbe6:	e7ea      	b.n	800cbbe <_dtoa_r+0xb56>
 800cbe8:	0800f01e 	.word	0x0800f01e
 800cbec:	0800efa2 	.word	0x0800efa2

0800cbf0 <_free_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4605      	mov	r5, r0
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	d041      	beq.n	800cc7c <_free_r+0x8c>
 800cbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfc:	1f0c      	subs	r4, r1, #4
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfb8      	it	lt
 800cc02:	18e4      	addlt	r4, r4, r3
 800cc04:	f000 fc34 	bl	800d470 <__malloc_lock>
 800cc08:	4a1d      	ldr	r2, [pc, #116]	@ (800cc80 <_free_r+0x90>)
 800cc0a:	6813      	ldr	r3, [r2, #0]
 800cc0c:	b933      	cbnz	r3, 800cc1c <_free_r+0x2c>
 800cc0e:	6063      	str	r3, [r4, #4]
 800cc10:	6014      	str	r4, [r2, #0]
 800cc12:	4628      	mov	r0, r5
 800cc14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc18:	f000 bc30 	b.w	800d47c <__malloc_unlock>
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	d908      	bls.n	800cc32 <_free_r+0x42>
 800cc20:	6820      	ldr	r0, [r4, #0]
 800cc22:	1821      	adds	r1, r4, r0
 800cc24:	428b      	cmp	r3, r1
 800cc26:	bf01      	itttt	eq
 800cc28:	6819      	ldreq	r1, [r3, #0]
 800cc2a:	685b      	ldreq	r3, [r3, #4]
 800cc2c:	1809      	addeq	r1, r1, r0
 800cc2e:	6021      	streq	r1, [r4, #0]
 800cc30:	e7ed      	b.n	800cc0e <_free_r+0x1e>
 800cc32:	461a      	mov	r2, r3
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	b10b      	cbz	r3, 800cc3c <_free_r+0x4c>
 800cc38:	42a3      	cmp	r3, r4
 800cc3a:	d9fa      	bls.n	800cc32 <_free_r+0x42>
 800cc3c:	6811      	ldr	r1, [r2, #0]
 800cc3e:	1850      	adds	r0, r2, r1
 800cc40:	42a0      	cmp	r0, r4
 800cc42:	d10b      	bne.n	800cc5c <_free_r+0x6c>
 800cc44:	6820      	ldr	r0, [r4, #0]
 800cc46:	4401      	add	r1, r0
 800cc48:	1850      	adds	r0, r2, r1
 800cc4a:	4283      	cmp	r3, r0
 800cc4c:	6011      	str	r1, [r2, #0]
 800cc4e:	d1e0      	bne.n	800cc12 <_free_r+0x22>
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	6053      	str	r3, [r2, #4]
 800cc56:	4408      	add	r0, r1
 800cc58:	6010      	str	r0, [r2, #0]
 800cc5a:	e7da      	b.n	800cc12 <_free_r+0x22>
 800cc5c:	d902      	bls.n	800cc64 <_free_r+0x74>
 800cc5e:	230c      	movs	r3, #12
 800cc60:	602b      	str	r3, [r5, #0]
 800cc62:	e7d6      	b.n	800cc12 <_free_r+0x22>
 800cc64:	6820      	ldr	r0, [r4, #0]
 800cc66:	1821      	adds	r1, r4, r0
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf04      	itt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	6063      	str	r3, [r4, #4]
 800cc72:	bf04      	itt	eq
 800cc74:	1809      	addeq	r1, r1, r0
 800cc76:	6021      	streq	r1, [r4, #0]
 800cc78:	6054      	str	r4, [r2, #4]
 800cc7a:	e7ca      	b.n	800cc12 <_free_r+0x22>
 800cc7c:	bd38      	pop	{r3, r4, r5, pc}
 800cc7e:	bf00      	nop
 800cc80:	20001208 	.word	0x20001208

0800cc84 <rshift>:
 800cc84:	6903      	ldr	r3, [r0, #16]
 800cc86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc92:	f100 0414 	add.w	r4, r0, #20
 800cc96:	dd45      	ble.n	800cd24 <rshift+0xa0>
 800cc98:	f011 011f 	ands.w	r1, r1, #31
 800cc9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cca0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cca4:	d10c      	bne.n	800ccc0 <rshift+0x3c>
 800cca6:	f100 0710 	add.w	r7, r0, #16
 800ccaa:	4629      	mov	r1, r5
 800ccac:	42b1      	cmp	r1, r6
 800ccae:	d334      	bcc.n	800cd1a <rshift+0x96>
 800ccb0:	1a9b      	subs	r3, r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	1eea      	subs	r2, r5, #3
 800ccb6:	4296      	cmp	r6, r2
 800ccb8:	bf38      	it	cc
 800ccba:	2300      	movcc	r3, #0
 800ccbc:	4423      	add	r3, r4
 800ccbe:	e015      	b.n	800ccec <rshift+0x68>
 800ccc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccc4:	f1c1 0820 	rsb	r8, r1, #32
 800ccc8:	40cf      	lsrs	r7, r1
 800ccca:	f105 0e04 	add.w	lr, r5, #4
 800ccce:	46a1      	mov	r9, r4
 800ccd0:	4576      	cmp	r6, lr
 800ccd2:	46f4      	mov	ip, lr
 800ccd4:	d815      	bhi.n	800cd02 <rshift+0x7e>
 800ccd6:	1a9a      	subs	r2, r3, r2
 800ccd8:	0092      	lsls	r2, r2, #2
 800ccda:	3a04      	subs	r2, #4
 800ccdc:	3501      	adds	r5, #1
 800ccde:	42ae      	cmp	r6, r5
 800cce0:	bf38      	it	cc
 800cce2:	2200      	movcc	r2, #0
 800cce4:	18a3      	adds	r3, r4, r2
 800cce6:	50a7      	str	r7, [r4, r2]
 800cce8:	b107      	cbz	r7, 800ccec <rshift+0x68>
 800ccea:	3304      	adds	r3, #4
 800ccec:	1b1a      	subs	r2, r3, r4
 800ccee:	42a3      	cmp	r3, r4
 800ccf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ccf4:	bf08      	it	eq
 800ccf6:	2300      	moveq	r3, #0
 800ccf8:	6102      	str	r2, [r0, #16]
 800ccfa:	bf08      	it	eq
 800ccfc:	6143      	streq	r3, [r0, #20]
 800ccfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd02:	f8dc c000 	ldr.w	ip, [ip]
 800cd06:	fa0c fc08 	lsl.w	ip, ip, r8
 800cd0a:	ea4c 0707 	orr.w	r7, ip, r7
 800cd0e:	f849 7b04 	str.w	r7, [r9], #4
 800cd12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd16:	40cf      	lsrs	r7, r1
 800cd18:	e7da      	b.n	800ccd0 <rshift+0x4c>
 800cd1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd22:	e7c3      	b.n	800ccac <rshift+0x28>
 800cd24:	4623      	mov	r3, r4
 800cd26:	e7e1      	b.n	800ccec <rshift+0x68>

0800cd28 <__hexdig_fun>:
 800cd28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cd2c:	2b09      	cmp	r3, #9
 800cd2e:	d802      	bhi.n	800cd36 <__hexdig_fun+0xe>
 800cd30:	3820      	subs	r0, #32
 800cd32:	b2c0      	uxtb	r0, r0
 800cd34:	4770      	bx	lr
 800cd36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cd3a:	2b05      	cmp	r3, #5
 800cd3c:	d801      	bhi.n	800cd42 <__hexdig_fun+0x1a>
 800cd3e:	3847      	subs	r0, #71	@ 0x47
 800cd40:	e7f7      	b.n	800cd32 <__hexdig_fun+0xa>
 800cd42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	d801      	bhi.n	800cd4e <__hexdig_fun+0x26>
 800cd4a:	3827      	subs	r0, #39	@ 0x27
 800cd4c:	e7f1      	b.n	800cd32 <__hexdig_fun+0xa>
 800cd4e:	2000      	movs	r0, #0
 800cd50:	4770      	bx	lr
	...

0800cd54 <__gethex>:
 800cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd58:	b085      	sub	sp, #20
 800cd5a:	468a      	mov	sl, r1
 800cd5c:	9302      	str	r3, [sp, #8]
 800cd5e:	680b      	ldr	r3, [r1, #0]
 800cd60:	9001      	str	r0, [sp, #4]
 800cd62:	4690      	mov	r8, r2
 800cd64:	1c9c      	adds	r4, r3, #2
 800cd66:	46a1      	mov	r9, r4
 800cd68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cd6c:	2830      	cmp	r0, #48	@ 0x30
 800cd6e:	d0fa      	beq.n	800cd66 <__gethex+0x12>
 800cd70:	eba9 0303 	sub.w	r3, r9, r3
 800cd74:	f1a3 0b02 	sub.w	fp, r3, #2
 800cd78:	f7ff ffd6 	bl	800cd28 <__hexdig_fun>
 800cd7c:	4605      	mov	r5, r0
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d168      	bne.n	800ce54 <__gethex+0x100>
 800cd82:	49a0      	ldr	r1, [pc, #640]	@ (800d004 <__gethex+0x2b0>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	4648      	mov	r0, r9
 800cd88:	f7ff f82b 	bl	800bde2 <strncmp>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	2800      	cmp	r0, #0
 800cd90:	d167      	bne.n	800ce62 <__gethex+0x10e>
 800cd92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cd96:	4626      	mov	r6, r4
 800cd98:	f7ff ffc6 	bl	800cd28 <__hexdig_fun>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d062      	beq.n	800ce66 <__gethex+0x112>
 800cda0:	4623      	mov	r3, r4
 800cda2:	7818      	ldrb	r0, [r3, #0]
 800cda4:	2830      	cmp	r0, #48	@ 0x30
 800cda6:	4699      	mov	r9, r3
 800cda8:	f103 0301 	add.w	r3, r3, #1
 800cdac:	d0f9      	beq.n	800cda2 <__gethex+0x4e>
 800cdae:	f7ff ffbb 	bl	800cd28 <__hexdig_fun>
 800cdb2:	fab0 f580 	clz	r5, r0
 800cdb6:	096d      	lsrs	r5, r5, #5
 800cdb8:	f04f 0b01 	mov.w	fp, #1
 800cdbc:	464a      	mov	r2, r9
 800cdbe:	4616      	mov	r6, r2
 800cdc0:	3201      	adds	r2, #1
 800cdc2:	7830      	ldrb	r0, [r6, #0]
 800cdc4:	f7ff ffb0 	bl	800cd28 <__hexdig_fun>
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	d1f8      	bne.n	800cdbe <__gethex+0x6a>
 800cdcc:	498d      	ldr	r1, [pc, #564]	@ (800d004 <__gethex+0x2b0>)
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff f806 	bl	800bde2 <strncmp>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d13f      	bne.n	800ce5a <__gethex+0x106>
 800cdda:	b944      	cbnz	r4, 800cdee <__gethex+0x9a>
 800cddc:	1c74      	adds	r4, r6, #1
 800cdde:	4622      	mov	r2, r4
 800cde0:	4616      	mov	r6, r2
 800cde2:	3201      	adds	r2, #1
 800cde4:	7830      	ldrb	r0, [r6, #0]
 800cde6:	f7ff ff9f 	bl	800cd28 <__hexdig_fun>
 800cdea:	2800      	cmp	r0, #0
 800cdec:	d1f8      	bne.n	800cde0 <__gethex+0x8c>
 800cdee:	1ba4      	subs	r4, r4, r6
 800cdf0:	00a7      	lsls	r7, r4, #2
 800cdf2:	7833      	ldrb	r3, [r6, #0]
 800cdf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cdf8:	2b50      	cmp	r3, #80	@ 0x50
 800cdfa:	d13e      	bne.n	800ce7a <__gethex+0x126>
 800cdfc:	7873      	ldrb	r3, [r6, #1]
 800cdfe:	2b2b      	cmp	r3, #43	@ 0x2b
 800ce00:	d033      	beq.n	800ce6a <__gethex+0x116>
 800ce02:	2b2d      	cmp	r3, #45	@ 0x2d
 800ce04:	d034      	beq.n	800ce70 <__gethex+0x11c>
 800ce06:	1c71      	adds	r1, r6, #1
 800ce08:	2400      	movs	r4, #0
 800ce0a:	7808      	ldrb	r0, [r1, #0]
 800ce0c:	f7ff ff8c 	bl	800cd28 <__hexdig_fun>
 800ce10:	1e43      	subs	r3, r0, #1
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b18      	cmp	r3, #24
 800ce16:	d830      	bhi.n	800ce7a <__gethex+0x126>
 800ce18:	f1a0 0210 	sub.w	r2, r0, #16
 800ce1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce20:	f7ff ff82 	bl	800cd28 <__hexdig_fun>
 800ce24:	f100 3cff 	add.w	ip, r0, #4294967295
 800ce28:	fa5f fc8c 	uxtb.w	ip, ip
 800ce2c:	f1bc 0f18 	cmp.w	ip, #24
 800ce30:	f04f 030a 	mov.w	r3, #10
 800ce34:	d91e      	bls.n	800ce74 <__gethex+0x120>
 800ce36:	b104      	cbz	r4, 800ce3a <__gethex+0xe6>
 800ce38:	4252      	negs	r2, r2
 800ce3a:	4417      	add	r7, r2
 800ce3c:	f8ca 1000 	str.w	r1, [sl]
 800ce40:	b1ed      	cbz	r5, 800ce7e <__gethex+0x12a>
 800ce42:	f1bb 0f00 	cmp.w	fp, #0
 800ce46:	bf0c      	ite	eq
 800ce48:	2506      	moveq	r5, #6
 800ce4a:	2500      	movne	r5, #0
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	b005      	add	sp, #20
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce54:	2500      	movs	r5, #0
 800ce56:	462c      	mov	r4, r5
 800ce58:	e7b0      	b.n	800cdbc <__gethex+0x68>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	d1c7      	bne.n	800cdee <__gethex+0x9a>
 800ce5e:	4627      	mov	r7, r4
 800ce60:	e7c7      	b.n	800cdf2 <__gethex+0x9e>
 800ce62:	464e      	mov	r6, r9
 800ce64:	462f      	mov	r7, r5
 800ce66:	2501      	movs	r5, #1
 800ce68:	e7c3      	b.n	800cdf2 <__gethex+0x9e>
 800ce6a:	2400      	movs	r4, #0
 800ce6c:	1cb1      	adds	r1, r6, #2
 800ce6e:	e7cc      	b.n	800ce0a <__gethex+0xb6>
 800ce70:	2401      	movs	r4, #1
 800ce72:	e7fb      	b.n	800ce6c <__gethex+0x118>
 800ce74:	fb03 0002 	mla	r0, r3, r2, r0
 800ce78:	e7ce      	b.n	800ce18 <__gethex+0xc4>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	e7de      	b.n	800ce3c <__gethex+0xe8>
 800ce7e:	eba6 0309 	sub.w	r3, r6, r9
 800ce82:	3b01      	subs	r3, #1
 800ce84:	4629      	mov	r1, r5
 800ce86:	2b07      	cmp	r3, #7
 800ce88:	dc0a      	bgt.n	800cea0 <__gethex+0x14c>
 800ce8a:	9801      	ldr	r0, [sp, #4]
 800ce8c:	f000 fafc 	bl	800d488 <_Balloc>
 800ce90:	4604      	mov	r4, r0
 800ce92:	b940      	cbnz	r0, 800cea6 <__gethex+0x152>
 800ce94:	4b5c      	ldr	r3, [pc, #368]	@ (800d008 <__gethex+0x2b4>)
 800ce96:	4602      	mov	r2, r0
 800ce98:	21e4      	movs	r1, #228	@ 0xe4
 800ce9a:	485c      	ldr	r0, [pc, #368]	@ (800d00c <__gethex+0x2b8>)
 800ce9c:	f001 fba6 	bl	800e5ec <__assert_func>
 800cea0:	3101      	adds	r1, #1
 800cea2:	105b      	asrs	r3, r3, #1
 800cea4:	e7ef      	b.n	800ce86 <__gethex+0x132>
 800cea6:	f100 0a14 	add.w	sl, r0, #20
 800ceaa:	2300      	movs	r3, #0
 800ceac:	4655      	mov	r5, sl
 800ceae:	469b      	mov	fp, r3
 800ceb0:	45b1      	cmp	r9, r6
 800ceb2:	d337      	bcc.n	800cf24 <__gethex+0x1d0>
 800ceb4:	f845 bb04 	str.w	fp, [r5], #4
 800ceb8:	eba5 050a 	sub.w	r5, r5, sl
 800cebc:	10ad      	asrs	r5, r5, #2
 800cebe:	6125      	str	r5, [r4, #16]
 800cec0:	4658      	mov	r0, fp
 800cec2:	f000 fbd3 	bl	800d66c <__hi0bits>
 800cec6:	016d      	lsls	r5, r5, #5
 800cec8:	f8d8 6000 	ldr.w	r6, [r8]
 800cecc:	1a2d      	subs	r5, r5, r0
 800cece:	42b5      	cmp	r5, r6
 800ced0:	dd54      	ble.n	800cf7c <__gethex+0x228>
 800ced2:	1bad      	subs	r5, r5, r6
 800ced4:	4629      	mov	r1, r5
 800ced6:	4620      	mov	r0, r4
 800ced8:	f000 ff67 	bl	800ddaa <__any_on>
 800cedc:	4681      	mov	r9, r0
 800cede:	b178      	cbz	r0, 800cf00 <__gethex+0x1ac>
 800cee0:	1e6b      	subs	r3, r5, #1
 800cee2:	1159      	asrs	r1, r3, #5
 800cee4:	f003 021f 	and.w	r2, r3, #31
 800cee8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ceec:	f04f 0901 	mov.w	r9, #1
 800cef0:	fa09 f202 	lsl.w	r2, r9, r2
 800cef4:	420a      	tst	r2, r1
 800cef6:	d003      	beq.n	800cf00 <__gethex+0x1ac>
 800cef8:	454b      	cmp	r3, r9
 800cefa:	dc36      	bgt.n	800cf6a <__gethex+0x216>
 800cefc:	f04f 0902 	mov.w	r9, #2
 800cf00:	4629      	mov	r1, r5
 800cf02:	4620      	mov	r0, r4
 800cf04:	f7ff febe 	bl	800cc84 <rshift>
 800cf08:	442f      	add	r7, r5
 800cf0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf0e:	42bb      	cmp	r3, r7
 800cf10:	da42      	bge.n	800cf98 <__gethex+0x244>
 800cf12:	9801      	ldr	r0, [sp, #4]
 800cf14:	4621      	mov	r1, r4
 800cf16:	f000 faf7 	bl	800d508 <_Bfree>
 800cf1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	25a3      	movs	r5, #163	@ 0xa3
 800cf22:	e793      	b.n	800ce4c <__gethex+0xf8>
 800cf24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800cf28:	2a2e      	cmp	r2, #46	@ 0x2e
 800cf2a:	d012      	beq.n	800cf52 <__gethex+0x1fe>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d104      	bne.n	800cf3a <__gethex+0x1e6>
 800cf30:	f845 bb04 	str.w	fp, [r5], #4
 800cf34:	f04f 0b00 	mov.w	fp, #0
 800cf38:	465b      	mov	r3, fp
 800cf3a:	7830      	ldrb	r0, [r6, #0]
 800cf3c:	9303      	str	r3, [sp, #12]
 800cf3e:	f7ff fef3 	bl	800cd28 <__hexdig_fun>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	f000 000f 	and.w	r0, r0, #15
 800cf48:	4098      	lsls	r0, r3
 800cf4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800cf4e:	3304      	adds	r3, #4
 800cf50:	e7ae      	b.n	800ceb0 <__gethex+0x15c>
 800cf52:	45b1      	cmp	r9, r6
 800cf54:	d8ea      	bhi.n	800cf2c <__gethex+0x1d8>
 800cf56:	492b      	ldr	r1, [pc, #172]	@ (800d004 <__gethex+0x2b0>)
 800cf58:	9303      	str	r3, [sp, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f7fe ff40 	bl	800bde2 <strncmp>
 800cf62:	9b03      	ldr	r3, [sp, #12]
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d1e1      	bne.n	800cf2c <__gethex+0x1d8>
 800cf68:	e7a2      	b.n	800ceb0 <__gethex+0x15c>
 800cf6a:	1ea9      	subs	r1, r5, #2
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f000 ff1c 	bl	800ddaa <__any_on>
 800cf72:	2800      	cmp	r0, #0
 800cf74:	d0c2      	beq.n	800cefc <__gethex+0x1a8>
 800cf76:	f04f 0903 	mov.w	r9, #3
 800cf7a:	e7c1      	b.n	800cf00 <__gethex+0x1ac>
 800cf7c:	da09      	bge.n	800cf92 <__gethex+0x23e>
 800cf7e:	1b75      	subs	r5, r6, r5
 800cf80:	4621      	mov	r1, r4
 800cf82:	9801      	ldr	r0, [sp, #4]
 800cf84:	462a      	mov	r2, r5
 800cf86:	f000 fcd7 	bl	800d938 <__lshift>
 800cf8a:	1b7f      	subs	r7, r7, r5
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	f100 0a14 	add.w	sl, r0, #20
 800cf92:	f04f 0900 	mov.w	r9, #0
 800cf96:	e7b8      	b.n	800cf0a <__gethex+0x1b6>
 800cf98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cf9c:	42bd      	cmp	r5, r7
 800cf9e:	dd6f      	ble.n	800d080 <__gethex+0x32c>
 800cfa0:	1bed      	subs	r5, r5, r7
 800cfa2:	42ae      	cmp	r6, r5
 800cfa4:	dc34      	bgt.n	800d010 <__gethex+0x2bc>
 800cfa6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d022      	beq.n	800cff4 <__gethex+0x2a0>
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d024      	beq.n	800cffc <__gethex+0x2a8>
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d115      	bne.n	800cfe2 <__gethex+0x28e>
 800cfb6:	42ae      	cmp	r6, r5
 800cfb8:	d113      	bne.n	800cfe2 <__gethex+0x28e>
 800cfba:	2e01      	cmp	r6, #1
 800cfbc:	d10b      	bne.n	800cfd6 <__gethex+0x282>
 800cfbe:	9a02      	ldr	r2, [sp, #8]
 800cfc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	6123      	str	r3, [r4, #16]
 800cfca:	f8ca 3000 	str.w	r3, [sl]
 800cfce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfd0:	2562      	movs	r5, #98	@ 0x62
 800cfd2:	601c      	str	r4, [r3, #0]
 800cfd4:	e73a      	b.n	800ce4c <__gethex+0xf8>
 800cfd6:	1e71      	subs	r1, r6, #1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fee6 	bl	800ddaa <__any_on>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d1ed      	bne.n	800cfbe <__gethex+0x26a>
 800cfe2:	9801      	ldr	r0, [sp, #4]
 800cfe4:	4621      	mov	r1, r4
 800cfe6:	f000 fa8f 	bl	800d508 <_Bfree>
 800cfea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfec:	2300      	movs	r3, #0
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	2550      	movs	r5, #80	@ 0x50
 800cff2:	e72b      	b.n	800ce4c <__gethex+0xf8>
 800cff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1f3      	bne.n	800cfe2 <__gethex+0x28e>
 800cffa:	e7e0      	b.n	800cfbe <__gethex+0x26a>
 800cffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1dd      	bne.n	800cfbe <__gethex+0x26a>
 800d002:	e7ee      	b.n	800cfe2 <__gethex+0x28e>
 800d004:	0800ee08 	.word	0x0800ee08
 800d008:	0800f01e 	.word	0x0800f01e
 800d00c:	0800f02f 	.word	0x0800f02f
 800d010:	1e6f      	subs	r7, r5, #1
 800d012:	f1b9 0f00 	cmp.w	r9, #0
 800d016:	d130      	bne.n	800d07a <__gethex+0x326>
 800d018:	b127      	cbz	r7, 800d024 <__gethex+0x2d0>
 800d01a:	4639      	mov	r1, r7
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fec4 	bl	800ddaa <__any_on>
 800d022:	4681      	mov	r9, r0
 800d024:	117a      	asrs	r2, r7, #5
 800d026:	2301      	movs	r3, #1
 800d028:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d02c:	f007 071f 	and.w	r7, r7, #31
 800d030:	40bb      	lsls	r3, r7
 800d032:	4213      	tst	r3, r2
 800d034:	4629      	mov	r1, r5
 800d036:	4620      	mov	r0, r4
 800d038:	bf18      	it	ne
 800d03a:	f049 0902 	orrne.w	r9, r9, #2
 800d03e:	f7ff fe21 	bl	800cc84 <rshift>
 800d042:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d046:	1b76      	subs	r6, r6, r5
 800d048:	2502      	movs	r5, #2
 800d04a:	f1b9 0f00 	cmp.w	r9, #0
 800d04e:	d047      	beq.n	800d0e0 <__gethex+0x38c>
 800d050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d054:	2b02      	cmp	r3, #2
 800d056:	d015      	beq.n	800d084 <__gethex+0x330>
 800d058:	2b03      	cmp	r3, #3
 800d05a:	d017      	beq.n	800d08c <__gethex+0x338>
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d109      	bne.n	800d074 <__gethex+0x320>
 800d060:	f019 0f02 	tst.w	r9, #2
 800d064:	d006      	beq.n	800d074 <__gethex+0x320>
 800d066:	f8da 3000 	ldr.w	r3, [sl]
 800d06a:	ea49 0903 	orr.w	r9, r9, r3
 800d06e:	f019 0f01 	tst.w	r9, #1
 800d072:	d10e      	bne.n	800d092 <__gethex+0x33e>
 800d074:	f045 0510 	orr.w	r5, r5, #16
 800d078:	e032      	b.n	800d0e0 <__gethex+0x38c>
 800d07a:	f04f 0901 	mov.w	r9, #1
 800d07e:	e7d1      	b.n	800d024 <__gethex+0x2d0>
 800d080:	2501      	movs	r5, #1
 800d082:	e7e2      	b.n	800d04a <__gethex+0x2f6>
 800d084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d086:	f1c3 0301 	rsb	r3, r3, #1
 800d08a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d08c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0f0      	beq.n	800d074 <__gethex+0x320>
 800d092:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d096:	f104 0314 	add.w	r3, r4, #20
 800d09a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d09e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0a2:	f04f 0c00 	mov.w	ip, #0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0b0:	d01b      	beq.n	800d0ea <__gethex+0x396>
 800d0b2:	3201      	adds	r2, #1
 800d0b4:	6002      	str	r2, [r0, #0]
 800d0b6:	2d02      	cmp	r5, #2
 800d0b8:	f104 0314 	add.w	r3, r4, #20
 800d0bc:	d13c      	bne.n	800d138 <__gethex+0x3e4>
 800d0be:	f8d8 2000 	ldr.w	r2, [r8]
 800d0c2:	3a01      	subs	r2, #1
 800d0c4:	42b2      	cmp	r2, r6
 800d0c6:	d109      	bne.n	800d0dc <__gethex+0x388>
 800d0c8:	1171      	asrs	r1, r6, #5
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0d0:	f006 061f 	and.w	r6, r6, #31
 800d0d4:	fa02 f606 	lsl.w	r6, r2, r6
 800d0d8:	421e      	tst	r6, r3
 800d0da:	d13a      	bne.n	800d152 <__gethex+0x3fe>
 800d0dc:	f045 0520 	orr.w	r5, r5, #32
 800d0e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0e2:	601c      	str	r4, [r3, #0]
 800d0e4:	9b02      	ldr	r3, [sp, #8]
 800d0e6:	601f      	str	r7, [r3, #0]
 800d0e8:	e6b0      	b.n	800ce4c <__gethex+0xf8>
 800d0ea:	4299      	cmp	r1, r3
 800d0ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800d0f0:	d8d9      	bhi.n	800d0a6 <__gethex+0x352>
 800d0f2:	68a3      	ldr	r3, [r4, #8]
 800d0f4:	459b      	cmp	fp, r3
 800d0f6:	db17      	blt.n	800d128 <__gethex+0x3d4>
 800d0f8:	6861      	ldr	r1, [r4, #4]
 800d0fa:	9801      	ldr	r0, [sp, #4]
 800d0fc:	3101      	adds	r1, #1
 800d0fe:	f000 f9c3 	bl	800d488 <_Balloc>
 800d102:	4681      	mov	r9, r0
 800d104:	b918      	cbnz	r0, 800d10e <__gethex+0x3ba>
 800d106:	4b1a      	ldr	r3, [pc, #104]	@ (800d170 <__gethex+0x41c>)
 800d108:	4602      	mov	r2, r0
 800d10a:	2184      	movs	r1, #132	@ 0x84
 800d10c:	e6c5      	b.n	800ce9a <__gethex+0x146>
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	3202      	adds	r2, #2
 800d112:	f104 010c 	add.w	r1, r4, #12
 800d116:	0092      	lsls	r2, r2, #2
 800d118:	300c      	adds	r0, #12
 800d11a:	f7fe fefe 	bl	800bf1a <memcpy>
 800d11e:	4621      	mov	r1, r4
 800d120:	9801      	ldr	r0, [sp, #4]
 800d122:	f000 f9f1 	bl	800d508 <_Bfree>
 800d126:	464c      	mov	r4, r9
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d130:	6122      	str	r2, [r4, #16]
 800d132:	2201      	movs	r2, #1
 800d134:	615a      	str	r2, [r3, #20]
 800d136:	e7be      	b.n	800d0b6 <__gethex+0x362>
 800d138:	6922      	ldr	r2, [r4, #16]
 800d13a:	455a      	cmp	r2, fp
 800d13c:	dd0b      	ble.n	800d156 <__gethex+0x402>
 800d13e:	2101      	movs	r1, #1
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fd9f 	bl	800cc84 <rshift>
 800d146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d14a:	3701      	adds	r7, #1
 800d14c:	42bb      	cmp	r3, r7
 800d14e:	f6ff aee0 	blt.w	800cf12 <__gethex+0x1be>
 800d152:	2501      	movs	r5, #1
 800d154:	e7c2      	b.n	800d0dc <__gethex+0x388>
 800d156:	f016 061f 	ands.w	r6, r6, #31
 800d15a:	d0fa      	beq.n	800d152 <__gethex+0x3fe>
 800d15c:	4453      	add	r3, sl
 800d15e:	f1c6 0620 	rsb	r6, r6, #32
 800d162:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d166:	f000 fa81 	bl	800d66c <__hi0bits>
 800d16a:	42b0      	cmp	r0, r6
 800d16c:	dbe7      	blt.n	800d13e <__gethex+0x3ea>
 800d16e:	e7f0      	b.n	800d152 <__gethex+0x3fe>
 800d170:	0800f01e 	.word	0x0800f01e

0800d174 <L_shift>:
 800d174:	f1c2 0208 	rsb	r2, r2, #8
 800d178:	0092      	lsls	r2, r2, #2
 800d17a:	b570      	push	{r4, r5, r6, lr}
 800d17c:	f1c2 0620 	rsb	r6, r2, #32
 800d180:	6843      	ldr	r3, [r0, #4]
 800d182:	6804      	ldr	r4, [r0, #0]
 800d184:	fa03 f506 	lsl.w	r5, r3, r6
 800d188:	432c      	orrs	r4, r5
 800d18a:	40d3      	lsrs	r3, r2
 800d18c:	6004      	str	r4, [r0, #0]
 800d18e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d192:	4288      	cmp	r0, r1
 800d194:	d3f4      	bcc.n	800d180 <L_shift+0xc>
 800d196:	bd70      	pop	{r4, r5, r6, pc}

0800d198 <__match>:
 800d198:	b530      	push	{r4, r5, lr}
 800d19a:	6803      	ldr	r3, [r0, #0]
 800d19c:	3301      	adds	r3, #1
 800d19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1a2:	b914      	cbnz	r4, 800d1aa <__match+0x12>
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	bd30      	pop	{r4, r5, pc}
 800d1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d1b2:	2d19      	cmp	r5, #25
 800d1b4:	bf98      	it	ls
 800d1b6:	3220      	addls	r2, #32
 800d1b8:	42a2      	cmp	r2, r4
 800d1ba:	d0f0      	beq.n	800d19e <__match+0x6>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e7f3      	b.n	800d1a8 <__match+0x10>

0800d1c0 <__hexnan>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	6801      	ldr	r1, [r0, #0]
 800d1c8:	115e      	asrs	r6, r3, #5
 800d1ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1ce:	f013 031f 	ands.w	r3, r3, #31
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	bf18      	it	ne
 800d1d6:	3604      	addne	r6, #4
 800d1d8:	2500      	movs	r5, #0
 800d1da:	1f37      	subs	r7, r6, #4
 800d1dc:	4682      	mov	sl, r0
 800d1de:	4690      	mov	r8, r2
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1e6:	46b9      	mov	r9, r7
 800d1e8:	463c      	mov	r4, r7
 800d1ea:	9502      	str	r5, [sp, #8]
 800d1ec:	46ab      	mov	fp, r5
 800d1ee:	784a      	ldrb	r2, [r1, #1]
 800d1f0:	1c4b      	adds	r3, r1, #1
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	b342      	cbz	r2, 800d248 <__hexnan+0x88>
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	9105      	str	r1, [sp, #20]
 800d1fa:	9204      	str	r2, [sp, #16]
 800d1fc:	f7ff fd94 	bl	800cd28 <__hexdig_fun>
 800d200:	2800      	cmp	r0, #0
 800d202:	d151      	bne.n	800d2a8 <__hexnan+0xe8>
 800d204:	9a04      	ldr	r2, [sp, #16]
 800d206:	9905      	ldr	r1, [sp, #20]
 800d208:	2a20      	cmp	r2, #32
 800d20a:	d818      	bhi.n	800d23e <__hexnan+0x7e>
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	459b      	cmp	fp, r3
 800d210:	dd13      	ble.n	800d23a <__hexnan+0x7a>
 800d212:	454c      	cmp	r4, r9
 800d214:	d206      	bcs.n	800d224 <__hexnan+0x64>
 800d216:	2d07      	cmp	r5, #7
 800d218:	dc04      	bgt.n	800d224 <__hexnan+0x64>
 800d21a:	462a      	mov	r2, r5
 800d21c:	4649      	mov	r1, r9
 800d21e:	4620      	mov	r0, r4
 800d220:	f7ff ffa8 	bl	800d174 <L_shift>
 800d224:	4544      	cmp	r4, r8
 800d226:	d952      	bls.n	800d2ce <__hexnan+0x10e>
 800d228:	2300      	movs	r3, #0
 800d22a:	f1a4 0904 	sub.w	r9, r4, #4
 800d22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d232:	f8cd b008 	str.w	fp, [sp, #8]
 800d236:	464c      	mov	r4, r9
 800d238:	461d      	mov	r5, r3
 800d23a:	9903      	ldr	r1, [sp, #12]
 800d23c:	e7d7      	b.n	800d1ee <__hexnan+0x2e>
 800d23e:	2a29      	cmp	r2, #41	@ 0x29
 800d240:	d157      	bne.n	800d2f2 <__hexnan+0x132>
 800d242:	3102      	adds	r1, #2
 800d244:	f8ca 1000 	str.w	r1, [sl]
 800d248:	f1bb 0f00 	cmp.w	fp, #0
 800d24c:	d051      	beq.n	800d2f2 <__hexnan+0x132>
 800d24e:	454c      	cmp	r4, r9
 800d250:	d206      	bcs.n	800d260 <__hexnan+0xa0>
 800d252:	2d07      	cmp	r5, #7
 800d254:	dc04      	bgt.n	800d260 <__hexnan+0xa0>
 800d256:	462a      	mov	r2, r5
 800d258:	4649      	mov	r1, r9
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7ff ff8a 	bl	800d174 <L_shift>
 800d260:	4544      	cmp	r4, r8
 800d262:	d936      	bls.n	800d2d2 <__hexnan+0x112>
 800d264:	f1a8 0204 	sub.w	r2, r8, #4
 800d268:	4623      	mov	r3, r4
 800d26a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d26e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d272:	429f      	cmp	r7, r3
 800d274:	d2f9      	bcs.n	800d26a <__hexnan+0xaa>
 800d276:	1b3b      	subs	r3, r7, r4
 800d278:	f023 0303 	bic.w	r3, r3, #3
 800d27c:	3304      	adds	r3, #4
 800d27e:	3401      	adds	r4, #1
 800d280:	3e03      	subs	r6, #3
 800d282:	42b4      	cmp	r4, r6
 800d284:	bf88      	it	hi
 800d286:	2304      	movhi	r3, #4
 800d288:	4443      	add	r3, r8
 800d28a:	2200      	movs	r2, #0
 800d28c:	f843 2b04 	str.w	r2, [r3], #4
 800d290:	429f      	cmp	r7, r3
 800d292:	d2fb      	bcs.n	800d28c <__hexnan+0xcc>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	b91b      	cbnz	r3, 800d2a0 <__hexnan+0xe0>
 800d298:	4547      	cmp	r7, r8
 800d29a:	d128      	bne.n	800d2ee <__hexnan+0x12e>
 800d29c:	2301      	movs	r3, #1
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	2005      	movs	r0, #5
 800d2a2:	b007      	add	sp, #28
 800d2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a8:	3501      	adds	r5, #1
 800d2aa:	2d08      	cmp	r5, #8
 800d2ac:	f10b 0b01 	add.w	fp, fp, #1
 800d2b0:	dd06      	ble.n	800d2c0 <__hexnan+0x100>
 800d2b2:	4544      	cmp	r4, r8
 800d2b4:	d9c1      	bls.n	800d23a <__hexnan+0x7a>
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2bc:	2501      	movs	r5, #1
 800d2be:	3c04      	subs	r4, #4
 800d2c0:	6822      	ldr	r2, [r4, #0]
 800d2c2:	f000 000f 	and.w	r0, r0, #15
 800d2c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d2ca:	6020      	str	r0, [r4, #0]
 800d2cc:	e7b5      	b.n	800d23a <__hexnan+0x7a>
 800d2ce:	2508      	movs	r5, #8
 800d2d0:	e7b3      	b.n	800d23a <__hexnan+0x7a>
 800d2d2:	9b01      	ldr	r3, [sp, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d0dd      	beq.n	800d294 <__hexnan+0xd4>
 800d2d8:	f1c3 0320 	rsb	r3, r3, #32
 800d2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e0:	40da      	lsrs	r2, r3
 800d2e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d2ec:	e7d2      	b.n	800d294 <__hexnan+0xd4>
 800d2ee:	3f04      	subs	r7, #4
 800d2f0:	e7d0      	b.n	800d294 <__hexnan+0xd4>
 800d2f2:	2004      	movs	r0, #4
 800d2f4:	e7d5      	b.n	800d2a2 <__hexnan+0xe2>
	...

0800d2f8 <malloc>:
 800d2f8:	4b02      	ldr	r3, [pc, #8]	@ (800d304 <malloc+0xc>)
 800d2fa:	4601      	mov	r1, r0
 800d2fc:	6818      	ldr	r0, [r3, #0]
 800d2fe:	f000 b825 	b.w	800d34c <_malloc_r>
 800d302:	bf00      	nop
 800d304:	200001b4 	.word	0x200001b4

0800d308 <sbrk_aligned>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	4e0f      	ldr	r6, [pc, #60]	@ (800d348 <sbrk_aligned+0x40>)
 800d30c:	460c      	mov	r4, r1
 800d30e:	6831      	ldr	r1, [r6, #0]
 800d310:	4605      	mov	r5, r0
 800d312:	b911      	cbnz	r1, 800d31a <sbrk_aligned+0x12>
 800d314:	f001 f95a 	bl	800e5cc <_sbrk_r>
 800d318:	6030      	str	r0, [r6, #0]
 800d31a:	4621      	mov	r1, r4
 800d31c:	4628      	mov	r0, r5
 800d31e:	f001 f955 	bl	800e5cc <_sbrk_r>
 800d322:	1c43      	adds	r3, r0, #1
 800d324:	d103      	bne.n	800d32e <sbrk_aligned+0x26>
 800d326:	f04f 34ff 	mov.w	r4, #4294967295
 800d32a:	4620      	mov	r0, r4
 800d32c:	bd70      	pop	{r4, r5, r6, pc}
 800d32e:	1cc4      	adds	r4, r0, #3
 800d330:	f024 0403 	bic.w	r4, r4, #3
 800d334:	42a0      	cmp	r0, r4
 800d336:	d0f8      	beq.n	800d32a <sbrk_aligned+0x22>
 800d338:	1a21      	subs	r1, r4, r0
 800d33a:	4628      	mov	r0, r5
 800d33c:	f001 f946 	bl	800e5cc <_sbrk_r>
 800d340:	3001      	adds	r0, #1
 800d342:	d1f2      	bne.n	800d32a <sbrk_aligned+0x22>
 800d344:	e7ef      	b.n	800d326 <sbrk_aligned+0x1e>
 800d346:	bf00      	nop
 800d348:	20001204 	.word	0x20001204

0800d34c <_malloc_r>:
 800d34c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d350:	1ccd      	adds	r5, r1, #3
 800d352:	f025 0503 	bic.w	r5, r5, #3
 800d356:	3508      	adds	r5, #8
 800d358:	2d0c      	cmp	r5, #12
 800d35a:	bf38      	it	cc
 800d35c:	250c      	movcc	r5, #12
 800d35e:	2d00      	cmp	r5, #0
 800d360:	4606      	mov	r6, r0
 800d362:	db01      	blt.n	800d368 <_malloc_r+0x1c>
 800d364:	42a9      	cmp	r1, r5
 800d366:	d904      	bls.n	800d372 <_malloc_r+0x26>
 800d368:	230c      	movs	r3, #12
 800d36a:	6033      	str	r3, [r6, #0]
 800d36c:	2000      	movs	r0, #0
 800d36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d372:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d448 <_malloc_r+0xfc>
 800d376:	f000 f87b 	bl	800d470 <__malloc_lock>
 800d37a:	f8d8 3000 	ldr.w	r3, [r8]
 800d37e:	461c      	mov	r4, r3
 800d380:	bb44      	cbnz	r4, 800d3d4 <_malloc_r+0x88>
 800d382:	4629      	mov	r1, r5
 800d384:	4630      	mov	r0, r6
 800d386:	f7ff ffbf 	bl	800d308 <sbrk_aligned>
 800d38a:	1c43      	adds	r3, r0, #1
 800d38c:	4604      	mov	r4, r0
 800d38e:	d158      	bne.n	800d442 <_malloc_r+0xf6>
 800d390:	f8d8 4000 	ldr.w	r4, [r8]
 800d394:	4627      	mov	r7, r4
 800d396:	2f00      	cmp	r7, #0
 800d398:	d143      	bne.n	800d422 <_malloc_r+0xd6>
 800d39a:	2c00      	cmp	r4, #0
 800d39c:	d04b      	beq.n	800d436 <_malloc_r+0xea>
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	4639      	mov	r1, r7
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	eb04 0903 	add.w	r9, r4, r3
 800d3a8:	f001 f910 	bl	800e5cc <_sbrk_r>
 800d3ac:	4581      	cmp	r9, r0
 800d3ae:	d142      	bne.n	800d436 <_malloc_r+0xea>
 800d3b0:	6821      	ldr	r1, [r4, #0]
 800d3b2:	1a6d      	subs	r5, r5, r1
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7ff ffa6 	bl	800d308 <sbrk_aligned>
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d03a      	beq.n	800d436 <_malloc_r+0xea>
 800d3c0:	6823      	ldr	r3, [r4, #0]
 800d3c2:	442b      	add	r3, r5
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	bb62      	cbnz	r2, 800d428 <_malloc_r+0xdc>
 800d3ce:	f8c8 7000 	str.w	r7, [r8]
 800d3d2:	e00f      	b.n	800d3f4 <_malloc_r+0xa8>
 800d3d4:	6822      	ldr	r2, [r4, #0]
 800d3d6:	1b52      	subs	r2, r2, r5
 800d3d8:	d420      	bmi.n	800d41c <_malloc_r+0xd0>
 800d3da:	2a0b      	cmp	r2, #11
 800d3dc:	d917      	bls.n	800d40e <_malloc_r+0xc2>
 800d3de:	1961      	adds	r1, r4, r5
 800d3e0:	42a3      	cmp	r3, r4
 800d3e2:	6025      	str	r5, [r4, #0]
 800d3e4:	bf18      	it	ne
 800d3e6:	6059      	strne	r1, [r3, #4]
 800d3e8:	6863      	ldr	r3, [r4, #4]
 800d3ea:	bf08      	it	eq
 800d3ec:	f8c8 1000 	streq.w	r1, [r8]
 800d3f0:	5162      	str	r2, [r4, r5]
 800d3f2:	604b      	str	r3, [r1, #4]
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f000 f841 	bl	800d47c <__malloc_unlock>
 800d3fa:	f104 000b 	add.w	r0, r4, #11
 800d3fe:	1d23      	adds	r3, r4, #4
 800d400:	f020 0007 	bic.w	r0, r0, #7
 800d404:	1ac2      	subs	r2, r0, r3
 800d406:	bf1c      	itt	ne
 800d408:	1a1b      	subne	r3, r3, r0
 800d40a:	50a3      	strne	r3, [r4, r2]
 800d40c:	e7af      	b.n	800d36e <_malloc_r+0x22>
 800d40e:	6862      	ldr	r2, [r4, #4]
 800d410:	42a3      	cmp	r3, r4
 800d412:	bf0c      	ite	eq
 800d414:	f8c8 2000 	streq.w	r2, [r8]
 800d418:	605a      	strne	r2, [r3, #4]
 800d41a:	e7eb      	b.n	800d3f4 <_malloc_r+0xa8>
 800d41c:	4623      	mov	r3, r4
 800d41e:	6864      	ldr	r4, [r4, #4]
 800d420:	e7ae      	b.n	800d380 <_malloc_r+0x34>
 800d422:	463c      	mov	r4, r7
 800d424:	687f      	ldr	r7, [r7, #4]
 800d426:	e7b6      	b.n	800d396 <_malloc_r+0x4a>
 800d428:	461a      	mov	r2, r3
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	42a3      	cmp	r3, r4
 800d42e:	d1fb      	bne.n	800d428 <_malloc_r+0xdc>
 800d430:	2300      	movs	r3, #0
 800d432:	6053      	str	r3, [r2, #4]
 800d434:	e7de      	b.n	800d3f4 <_malloc_r+0xa8>
 800d436:	230c      	movs	r3, #12
 800d438:	6033      	str	r3, [r6, #0]
 800d43a:	4630      	mov	r0, r6
 800d43c:	f000 f81e 	bl	800d47c <__malloc_unlock>
 800d440:	e794      	b.n	800d36c <_malloc_r+0x20>
 800d442:	6005      	str	r5, [r0, #0]
 800d444:	e7d6      	b.n	800d3f4 <_malloc_r+0xa8>
 800d446:	bf00      	nop
 800d448:	20001208 	.word	0x20001208

0800d44c <__ascii_mbtowc>:
 800d44c:	b082      	sub	sp, #8
 800d44e:	b901      	cbnz	r1, 800d452 <__ascii_mbtowc+0x6>
 800d450:	a901      	add	r1, sp, #4
 800d452:	b142      	cbz	r2, 800d466 <__ascii_mbtowc+0x1a>
 800d454:	b14b      	cbz	r3, 800d46a <__ascii_mbtowc+0x1e>
 800d456:	7813      	ldrb	r3, [r2, #0]
 800d458:	600b      	str	r3, [r1, #0]
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	1e10      	subs	r0, r2, #0
 800d45e:	bf18      	it	ne
 800d460:	2001      	movne	r0, #1
 800d462:	b002      	add	sp, #8
 800d464:	4770      	bx	lr
 800d466:	4610      	mov	r0, r2
 800d468:	e7fb      	b.n	800d462 <__ascii_mbtowc+0x16>
 800d46a:	f06f 0001 	mvn.w	r0, #1
 800d46e:	e7f8      	b.n	800d462 <__ascii_mbtowc+0x16>

0800d470 <__malloc_lock>:
 800d470:	4801      	ldr	r0, [pc, #4]	@ (800d478 <__malloc_lock+0x8>)
 800d472:	f7fe bd50 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800d476:	bf00      	nop
 800d478:	20001200 	.word	0x20001200

0800d47c <__malloc_unlock>:
 800d47c:	4801      	ldr	r0, [pc, #4]	@ (800d484 <__malloc_unlock+0x8>)
 800d47e:	f7fe bd4b 	b.w	800bf18 <__retarget_lock_release_recursive>
 800d482:	bf00      	nop
 800d484:	20001200 	.word	0x20001200

0800d488 <_Balloc>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	69c6      	ldr	r6, [r0, #28]
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	b976      	cbnz	r6, 800d4b0 <_Balloc+0x28>
 800d492:	2010      	movs	r0, #16
 800d494:	f7ff ff30 	bl	800d2f8 <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	61e0      	str	r0, [r4, #28]
 800d49c:	b920      	cbnz	r0, 800d4a8 <_Balloc+0x20>
 800d49e:	4b18      	ldr	r3, [pc, #96]	@ (800d500 <_Balloc+0x78>)
 800d4a0:	4818      	ldr	r0, [pc, #96]	@ (800d504 <_Balloc+0x7c>)
 800d4a2:	216b      	movs	r1, #107	@ 0x6b
 800d4a4:	f001 f8a2 	bl	800e5ec <__assert_func>
 800d4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ac:	6006      	str	r6, [r0, #0]
 800d4ae:	60c6      	str	r6, [r0, #12]
 800d4b0:	69e6      	ldr	r6, [r4, #28]
 800d4b2:	68f3      	ldr	r3, [r6, #12]
 800d4b4:	b183      	cbz	r3, 800d4d8 <_Balloc+0x50>
 800d4b6:	69e3      	ldr	r3, [r4, #28]
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4be:	b9b8      	cbnz	r0, 800d4f0 <_Balloc+0x68>
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4c6:	1d72      	adds	r2, r6, #5
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f001 f8ac 	bl	800e628 <_calloc_r>
 800d4d0:	b160      	cbz	r0, 800d4ec <_Balloc+0x64>
 800d4d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4d6:	e00e      	b.n	800d4f6 <_Balloc+0x6e>
 800d4d8:	2221      	movs	r2, #33	@ 0x21
 800d4da:	2104      	movs	r1, #4
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f001 f8a3 	bl	800e628 <_calloc_r>
 800d4e2:	69e3      	ldr	r3, [r4, #28]
 800d4e4:	60f0      	str	r0, [r6, #12]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e4      	bne.n	800d4b6 <_Balloc+0x2e>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4fc:	e7f7      	b.n	800d4ee <_Balloc+0x66>
 800d4fe:	bf00      	nop
 800d500:	0800efaf 	.word	0x0800efaf
 800d504:	0800f08f 	.word	0x0800f08f

0800d508 <_Bfree>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	69c6      	ldr	r6, [r0, #28]
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	b976      	cbnz	r6, 800d530 <_Bfree+0x28>
 800d512:	2010      	movs	r0, #16
 800d514:	f7ff fef0 	bl	800d2f8 <malloc>
 800d518:	4602      	mov	r2, r0
 800d51a:	61e8      	str	r0, [r5, #28]
 800d51c:	b920      	cbnz	r0, 800d528 <_Bfree+0x20>
 800d51e:	4b09      	ldr	r3, [pc, #36]	@ (800d544 <_Bfree+0x3c>)
 800d520:	4809      	ldr	r0, [pc, #36]	@ (800d548 <_Bfree+0x40>)
 800d522:	218f      	movs	r1, #143	@ 0x8f
 800d524:	f001 f862 	bl	800e5ec <__assert_func>
 800d528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d52c:	6006      	str	r6, [r0, #0]
 800d52e:	60c6      	str	r6, [r0, #12]
 800d530:	b13c      	cbz	r4, 800d542 <_Bfree+0x3a>
 800d532:	69eb      	ldr	r3, [r5, #28]
 800d534:	6862      	ldr	r2, [r4, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d53c:	6021      	str	r1, [r4, #0]
 800d53e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	0800efaf 	.word	0x0800efaf
 800d548:	0800f08f 	.word	0x0800f08f

0800d54c <__multadd>:
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	690d      	ldr	r5, [r1, #16]
 800d552:	4607      	mov	r7, r0
 800d554:	460c      	mov	r4, r1
 800d556:	461e      	mov	r6, r3
 800d558:	f101 0c14 	add.w	ip, r1, #20
 800d55c:	2000      	movs	r0, #0
 800d55e:	f8dc 3000 	ldr.w	r3, [ip]
 800d562:	b299      	uxth	r1, r3
 800d564:	fb02 6101 	mla	r1, r2, r1, r6
 800d568:	0c1e      	lsrs	r6, r3, #16
 800d56a:	0c0b      	lsrs	r3, r1, #16
 800d56c:	fb02 3306 	mla	r3, r2, r6, r3
 800d570:	b289      	uxth	r1, r1
 800d572:	3001      	adds	r0, #1
 800d574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d578:	4285      	cmp	r5, r0
 800d57a:	f84c 1b04 	str.w	r1, [ip], #4
 800d57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d582:	dcec      	bgt.n	800d55e <__multadd+0x12>
 800d584:	b30e      	cbz	r6, 800d5ca <__multadd+0x7e>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dc19      	bgt.n	800d5c0 <__multadd+0x74>
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4638      	mov	r0, r7
 800d590:	3101      	adds	r1, #1
 800d592:	f7ff ff79 	bl	800d488 <_Balloc>
 800d596:	4680      	mov	r8, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <__multadd+0x5a>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b0c      	ldr	r3, [pc, #48]	@ (800d5d0 <__multadd+0x84>)
 800d59e:	480d      	ldr	r0, [pc, #52]	@ (800d5d4 <__multadd+0x88>)
 800d5a0:	21ba      	movs	r1, #186	@ 0xba
 800d5a2:	f001 f823 	bl	800e5ec <__assert_func>
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	f104 010c 	add.w	r1, r4, #12
 800d5ae:	0092      	lsls	r2, r2, #2
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f7fe fcb2 	bl	800bf1a <memcpy>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ffa5 	bl	800d508 <_Bfree>
 800d5be:	4644      	mov	r4, r8
 800d5c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	615e      	str	r6, [r3, #20]
 800d5c8:	6125      	str	r5, [r4, #16]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	0800f01e 	.word	0x0800f01e
 800d5d4:	0800f08f 	.word	0x0800f08f

0800d5d8 <__s2b>:
 800d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	4615      	mov	r5, r2
 800d5e0:	461f      	mov	r7, r3
 800d5e2:	2209      	movs	r2, #9
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	db09      	blt.n	800d608 <__s2b+0x30>
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff ff47 	bl	800d488 <_Balloc>
 800d5fa:	b940      	cbnz	r0, 800d60e <__s2b+0x36>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	4b19      	ldr	r3, [pc, #100]	@ (800d664 <__s2b+0x8c>)
 800d600:	4819      	ldr	r0, [pc, #100]	@ (800d668 <__s2b+0x90>)
 800d602:	21d3      	movs	r1, #211	@ 0xd3
 800d604:	f000 fff2 	bl	800e5ec <__assert_func>
 800d608:	0052      	lsls	r2, r2, #1
 800d60a:	3101      	adds	r1, #1
 800d60c:	e7f0      	b.n	800d5f0 <__s2b+0x18>
 800d60e:	9b08      	ldr	r3, [sp, #32]
 800d610:	6143      	str	r3, [r0, #20]
 800d612:	2d09      	cmp	r5, #9
 800d614:	f04f 0301 	mov.w	r3, #1
 800d618:	6103      	str	r3, [r0, #16]
 800d61a:	dd16      	ble.n	800d64a <__s2b+0x72>
 800d61c:	f104 0909 	add.w	r9, r4, #9
 800d620:	46c8      	mov	r8, r9
 800d622:	442c      	add	r4, r5
 800d624:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d628:	4601      	mov	r1, r0
 800d62a:	3b30      	subs	r3, #48	@ 0x30
 800d62c:	220a      	movs	r2, #10
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ff8c 	bl	800d54c <__multadd>
 800d634:	45a0      	cmp	r8, r4
 800d636:	d1f5      	bne.n	800d624 <__s2b+0x4c>
 800d638:	f1a5 0408 	sub.w	r4, r5, #8
 800d63c:	444c      	add	r4, r9
 800d63e:	1b2d      	subs	r5, r5, r4
 800d640:	1963      	adds	r3, r4, r5
 800d642:	42bb      	cmp	r3, r7
 800d644:	db04      	blt.n	800d650 <__s2b+0x78>
 800d646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64a:	340a      	adds	r4, #10
 800d64c:	2509      	movs	r5, #9
 800d64e:	e7f6      	b.n	800d63e <__s2b+0x66>
 800d650:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d654:	4601      	mov	r1, r0
 800d656:	3b30      	subs	r3, #48	@ 0x30
 800d658:	220a      	movs	r2, #10
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7ff ff76 	bl	800d54c <__multadd>
 800d660:	e7ee      	b.n	800d640 <__s2b+0x68>
 800d662:	bf00      	nop
 800d664:	0800f01e 	.word	0x0800f01e
 800d668:	0800f08f 	.word	0x0800f08f

0800d66c <__hi0bits>:
 800d66c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d670:	4603      	mov	r3, r0
 800d672:	bf36      	itet	cc
 800d674:	0403      	lslcc	r3, r0, #16
 800d676:	2000      	movcs	r0, #0
 800d678:	2010      	movcc	r0, #16
 800d67a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d67e:	bf3c      	itt	cc
 800d680:	021b      	lslcc	r3, r3, #8
 800d682:	3008      	addcc	r0, #8
 800d684:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d688:	bf3c      	itt	cc
 800d68a:	011b      	lslcc	r3, r3, #4
 800d68c:	3004      	addcc	r0, #4
 800d68e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d692:	bf3c      	itt	cc
 800d694:	009b      	lslcc	r3, r3, #2
 800d696:	3002      	addcc	r0, #2
 800d698:	2b00      	cmp	r3, #0
 800d69a:	db05      	blt.n	800d6a8 <__hi0bits+0x3c>
 800d69c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d6a0:	f100 0001 	add.w	r0, r0, #1
 800d6a4:	bf08      	it	eq
 800d6a6:	2020      	moveq	r0, #32
 800d6a8:	4770      	bx	lr

0800d6aa <__lo0bits>:
 800d6aa:	6803      	ldr	r3, [r0, #0]
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	f013 0007 	ands.w	r0, r3, #7
 800d6b2:	d00b      	beq.n	800d6cc <__lo0bits+0x22>
 800d6b4:	07d9      	lsls	r1, r3, #31
 800d6b6:	d421      	bmi.n	800d6fc <__lo0bits+0x52>
 800d6b8:	0798      	lsls	r0, r3, #30
 800d6ba:	bf49      	itett	mi
 800d6bc:	085b      	lsrmi	r3, r3, #1
 800d6be:	089b      	lsrpl	r3, r3, #2
 800d6c0:	2001      	movmi	r0, #1
 800d6c2:	6013      	strmi	r3, [r2, #0]
 800d6c4:	bf5c      	itt	pl
 800d6c6:	6013      	strpl	r3, [r2, #0]
 800d6c8:	2002      	movpl	r0, #2
 800d6ca:	4770      	bx	lr
 800d6cc:	b299      	uxth	r1, r3
 800d6ce:	b909      	cbnz	r1, 800d6d4 <__lo0bits+0x2a>
 800d6d0:	0c1b      	lsrs	r3, r3, #16
 800d6d2:	2010      	movs	r0, #16
 800d6d4:	b2d9      	uxtb	r1, r3
 800d6d6:	b909      	cbnz	r1, 800d6dc <__lo0bits+0x32>
 800d6d8:	3008      	adds	r0, #8
 800d6da:	0a1b      	lsrs	r3, r3, #8
 800d6dc:	0719      	lsls	r1, r3, #28
 800d6de:	bf04      	itt	eq
 800d6e0:	091b      	lsreq	r3, r3, #4
 800d6e2:	3004      	addeq	r0, #4
 800d6e4:	0799      	lsls	r1, r3, #30
 800d6e6:	bf04      	itt	eq
 800d6e8:	089b      	lsreq	r3, r3, #2
 800d6ea:	3002      	addeq	r0, #2
 800d6ec:	07d9      	lsls	r1, r3, #31
 800d6ee:	d403      	bmi.n	800d6f8 <__lo0bits+0x4e>
 800d6f0:	085b      	lsrs	r3, r3, #1
 800d6f2:	f100 0001 	add.w	r0, r0, #1
 800d6f6:	d003      	beq.n	800d700 <__lo0bits+0x56>
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	4770      	bx	lr
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	4770      	bx	lr
 800d700:	2020      	movs	r0, #32
 800d702:	4770      	bx	lr

0800d704 <__i2b>:
 800d704:	b510      	push	{r4, lr}
 800d706:	460c      	mov	r4, r1
 800d708:	2101      	movs	r1, #1
 800d70a:	f7ff febd 	bl	800d488 <_Balloc>
 800d70e:	4602      	mov	r2, r0
 800d710:	b928      	cbnz	r0, 800d71e <__i2b+0x1a>
 800d712:	4b05      	ldr	r3, [pc, #20]	@ (800d728 <__i2b+0x24>)
 800d714:	4805      	ldr	r0, [pc, #20]	@ (800d72c <__i2b+0x28>)
 800d716:	f240 1145 	movw	r1, #325	@ 0x145
 800d71a:	f000 ff67 	bl	800e5ec <__assert_func>
 800d71e:	2301      	movs	r3, #1
 800d720:	6144      	str	r4, [r0, #20]
 800d722:	6103      	str	r3, [r0, #16]
 800d724:	bd10      	pop	{r4, pc}
 800d726:	bf00      	nop
 800d728:	0800f01e 	.word	0x0800f01e
 800d72c:	0800f08f 	.word	0x0800f08f

0800d730 <__multiply>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	4614      	mov	r4, r2
 800d736:	690a      	ldr	r2, [r1, #16]
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	bfa8      	it	ge
 800d73e:	4623      	movge	r3, r4
 800d740:	460f      	mov	r7, r1
 800d742:	bfa4      	itt	ge
 800d744:	460c      	movge	r4, r1
 800d746:	461f      	movge	r7, r3
 800d748:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d74c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d750:	68a3      	ldr	r3, [r4, #8]
 800d752:	6861      	ldr	r1, [r4, #4]
 800d754:	eb0a 0609 	add.w	r6, sl, r9
 800d758:	42b3      	cmp	r3, r6
 800d75a:	b085      	sub	sp, #20
 800d75c:	bfb8      	it	lt
 800d75e:	3101      	addlt	r1, #1
 800d760:	f7ff fe92 	bl	800d488 <_Balloc>
 800d764:	b930      	cbnz	r0, 800d774 <__multiply+0x44>
 800d766:	4602      	mov	r2, r0
 800d768:	4b44      	ldr	r3, [pc, #272]	@ (800d87c <__multiply+0x14c>)
 800d76a:	4845      	ldr	r0, [pc, #276]	@ (800d880 <__multiply+0x150>)
 800d76c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d770:	f000 ff3c 	bl	800e5ec <__assert_func>
 800d774:	f100 0514 	add.w	r5, r0, #20
 800d778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d77c:	462b      	mov	r3, r5
 800d77e:	2200      	movs	r2, #0
 800d780:	4543      	cmp	r3, r8
 800d782:	d321      	bcc.n	800d7c8 <__multiply+0x98>
 800d784:	f107 0114 	add.w	r1, r7, #20
 800d788:	f104 0214 	add.w	r2, r4, #20
 800d78c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d790:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d794:	9302      	str	r3, [sp, #8]
 800d796:	1b13      	subs	r3, r2, r4
 800d798:	3b15      	subs	r3, #21
 800d79a:	f023 0303 	bic.w	r3, r3, #3
 800d79e:	3304      	adds	r3, #4
 800d7a0:	f104 0715 	add.w	r7, r4, #21
 800d7a4:	42ba      	cmp	r2, r7
 800d7a6:	bf38      	it	cc
 800d7a8:	2304      	movcc	r3, #4
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	9b02      	ldr	r3, [sp, #8]
 800d7ae:	9103      	str	r1, [sp, #12]
 800d7b0:	428b      	cmp	r3, r1
 800d7b2:	d80c      	bhi.n	800d7ce <__multiply+0x9e>
 800d7b4:	2e00      	cmp	r6, #0
 800d7b6:	dd03      	ble.n	800d7c0 <__multiply+0x90>
 800d7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d05b      	beq.n	800d878 <__multiply+0x148>
 800d7c0:	6106      	str	r6, [r0, #16]
 800d7c2:	b005      	add	sp, #20
 800d7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c8:	f843 2b04 	str.w	r2, [r3], #4
 800d7cc:	e7d8      	b.n	800d780 <__multiply+0x50>
 800d7ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800d7d2:	f1ba 0f00 	cmp.w	sl, #0
 800d7d6:	d024      	beq.n	800d822 <__multiply+0xf2>
 800d7d8:	f104 0e14 	add.w	lr, r4, #20
 800d7dc:	46a9      	mov	r9, r5
 800d7de:	f04f 0c00 	mov.w	ip, #0
 800d7e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d7ea:	fa1f fb87 	uxth.w	fp, r7
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	fb0a 330b 	mla	r3, sl, fp, r3
 800d7f4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d7f8:	f8d9 7000 	ldr.w	r7, [r9]
 800d7fc:	4463      	add	r3, ip
 800d7fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d802:	fb0a c70b 	mla	r7, sl, fp, ip
 800d806:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d810:	4572      	cmp	r2, lr
 800d812:	f849 3b04 	str.w	r3, [r9], #4
 800d816:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d81a:	d8e2      	bhi.n	800d7e2 <__multiply+0xb2>
 800d81c:	9b01      	ldr	r3, [sp, #4]
 800d81e:	f845 c003 	str.w	ip, [r5, r3]
 800d822:	9b03      	ldr	r3, [sp, #12]
 800d824:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d828:	3104      	adds	r1, #4
 800d82a:	f1b9 0f00 	cmp.w	r9, #0
 800d82e:	d021      	beq.n	800d874 <__multiply+0x144>
 800d830:	682b      	ldr	r3, [r5, #0]
 800d832:	f104 0c14 	add.w	ip, r4, #20
 800d836:	46ae      	mov	lr, r5
 800d838:	f04f 0a00 	mov.w	sl, #0
 800d83c:	f8bc b000 	ldrh.w	fp, [ip]
 800d840:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d844:	fb09 770b 	mla	r7, r9, fp, r7
 800d848:	4457      	add	r7, sl
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d850:	f84e 3b04 	str.w	r3, [lr], #4
 800d854:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d85c:	f8be 3000 	ldrh.w	r3, [lr]
 800d860:	fb09 330a 	mla	r3, r9, sl, r3
 800d864:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d868:	4562      	cmp	r2, ip
 800d86a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d86e:	d8e5      	bhi.n	800d83c <__multiply+0x10c>
 800d870:	9f01      	ldr	r7, [sp, #4]
 800d872:	51eb      	str	r3, [r5, r7]
 800d874:	3504      	adds	r5, #4
 800d876:	e799      	b.n	800d7ac <__multiply+0x7c>
 800d878:	3e01      	subs	r6, #1
 800d87a:	e79b      	b.n	800d7b4 <__multiply+0x84>
 800d87c:	0800f01e 	.word	0x0800f01e
 800d880:	0800f08f 	.word	0x0800f08f

0800d884 <__pow5mult>:
 800d884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d888:	4615      	mov	r5, r2
 800d88a:	f012 0203 	ands.w	r2, r2, #3
 800d88e:	4607      	mov	r7, r0
 800d890:	460e      	mov	r6, r1
 800d892:	d007      	beq.n	800d8a4 <__pow5mult+0x20>
 800d894:	4c25      	ldr	r4, [pc, #148]	@ (800d92c <__pow5mult+0xa8>)
 800d896:	3a01      	subs	r2, #1
 800d898:	2300      	movs	r3, #0
 800d89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d89e:	f7ff fe55 	bl	800d54c <__multadd>
 800d8a2:	4606      	mov	r6, r0
 800d8a4:	10ad      	asrs	r5, r5, #2
 800d8a6:	d03d      	beq.n	800d924 <__pow5mult+0xa0>
 800d8a8:	69fc      	ldr	r4, [r7, #28]
 800d8aa:	b97c      	cbnz	r4, 800d8cc <__pow5mult+0x48>
 800d8ac:	2010      	movs	r0, #16
 800d8ae:	f7ff fd23 	bl	800d2f8 <malloc>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	61f8      	str	r0, [r7, #28]
 800d8b6:	b928      	cbnz	r0, 800d8c4 <__pow5mult+0x40>
 800d8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800d930 <__pow5mult+0xac>)
 800d8ba:	481e      	ldr	r0, [pc, #120]	@ (800d934 <__pow5mult+0xb0>)
 800d8bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d8c0:	f000 fe94 	bl	800e5ec <__assert_func>
 800d8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8c8:	6004      	str	r4, [r0, #0]
 800d8ca:	60c4      	str	r4, [r0, #12]
 800d8cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8d4:	b94c      	cbnz	r4, 800d8ea <__pow5mult+0x66>
 800d8d6:	f240 2171 	movw	r1, #625	@ 0x271
 800d8da:	4638      	mov	r0, r7
 800d8dc:	f7ff ff12 	bl	800d704 <__i2b>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8e6:	4604      	mov	r4, r0
 800d8e8:	6003      	str	r3, [r0, #0]
 800d8ea:	f04f 0900 	mov.w	r9, #0
 800d8ee:	07eb      	lsls	r3, r5, #31
 800d8f0:	d50a      	bpl.n	800d908 <__pow5mult+0x84>
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	4622      	mov	r2, r4
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f7ff ff1a 	bl	800d730 <__multiply>
 800d8fc:	4631      	mov	r1, r6
 800d8fe:	4680      	mov	r8, r0
 800d900:	4638      	mov	r0, r7
 800d902:	f7ff fe01 	bl	800d508 <_Bfree>
 800d906:	4646      	mov	r6, r8
 800d908:	106d      	asrs	r5, r5, #1
 800d90a:	d00b      	beq.n	800d924 <__pow5mult+0xa0>
 800d90c:	6820      	ldr	r0, [r4, #0]
 800d90e:	b938      	cbnz	r0, 800d920 <__pow5mult+0x9c>
 800d910:	4622      	mov	r2, r4
 800d912:	4621      	mov	r1, r4
 800d914:	4638      	mov	r0, r7
 800d916:	f7ff ff0b 	bl	800d730 <__multiply>
 800d91a:	6020      	str	r0, [r4, #0]
 800d91c:	f8c0 9000 	str.w	r9, [r0]
 800d920:	4604      	mov	r4, r0
 800d922:	e7e4      	b.n	800d8ee <__pow5mult+0x6a>
 800d924:	4630      	mov	r0, r6
 800d926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d92a:	bf00      	nop
 800d92c:	0800f0e8 	.word	0x0800f0e8
 800d930:	0800efaf 	.word	0x0800efaf
 800d934:	0800f08f 	.word	0x0800f08f

0800d938 <__lshift>:
 800d938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d93c:	460c      	mov	r4, r1
 800d93e:	6849      	ldr	r1, [r1, #4]
 800d940:	6923      	ldr	r3, [r4, #16]
 800d942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d946:	68a3      	ldr	r3, [r4, #8]
 800d948:	4607      	mov	r7, r0
 800d94a:	4691      	mov	r9, r2
 800d94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d950:	f108 0601 	add.w	r6, r8, #1
 800d954:	42b3      	cmp	r3, r6
 800d956:	db0b      	blt.n	800d970 <__lshift+0x38>
 800d958:	4638      	mov	r0, r7
 800d95a:	f7ff fd95 	bl	800d488 <_Balloc>
 800d95e:	4605      	mov	r5, r0
 800d960:	b948      	cbnz	r0, 800d976 <__lshift+0x3e>
 800d962:	4602      	mov	r2, r0
 800d964:	4b28      	ldr	r3, [pc, #160]	@ (800da08 <__lshift+0xd0>)
 800d966:	4829      	ldr	r0, [pc, #164]	@ (800da0c <__lshift+0xd4>)
 800d968:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d96c:	f000 fe3e 	bl	800e5ec <__assert_func>
 800d970:	3101      	adds	r1, #1
 800d972:	005b      	lsls	r3, r3, #1
 800d974:	e7ee      	b.n	800d954 <__lshift+0x1c>
 800d976:	2300      	movs	r3, #0
 800d978:	f100 0114 	add.w	r1, r0, #20
 800d97c:	f100 0210 	add.w	r2, r0, #16
 800d980:	4618      	mov	r0, r3
 800d982:	4553      	cmp	r3, sl
 800d984:	db33      	blt.n	800d9ee <__lshift+0xb6>
 800d986:	6920      	ldr	r0, [r4, #16]
 800d988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d98c:	f104 0314 	add.w	r3, r4, #20
 800d990:	f019 091f 	ands.w	r9, r9, #31
 800d994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d99c:	d02b      	beq.n	800d9f6 <__lshift+0xbe>
 800d99e:	f1c9 0e20 	rsb	lr, r9, #32
 800d9a2:	468a      	mov	sl, r1
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	6818      	ldr	r0, [r3, #0]
 800d9a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d9ac:	4310      	orrs	r0, r2
 800d9ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9b6:	459c      	cmp	ip, r3
 800d9b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d9bc:	d8f3      	bhi.n	800d9a6 <__lshift+0x6e>
 800d9be:	ebac 0304 	sub.w	r3, ip, r4
 800d9c2:	3b15      	subs	r3, #21
 800d9c4:	f023 0303 	bic.w	r3, r3, #3
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	f104 0015 	add.w	r0, r4, #21
 800d9ce:	4584      	cmp	ip, r0
 800d9d0:	bf38      	it	cc
 800d9d2:	2304      	movcc	r3, #4
 800d9d4:	50ca      	str	r2, [r1, r3]
 800d9d6:	b10a      	cbz	r2, 800d9dc <__lshift+0xa4>
 800d9d8:	f108 0602 	add.w	r6, r8, #2
 800d9dc:	3e01      	subs	r6, #1
 800d9de:	4638      	mov	r0, r7
 800d9e0:	612e      	str	r6, [r5, #16]
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	f7ff fd90 	bl	800d508 <_Bfree>
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	e7c5      	b.n	800d982 <__lshift+0x4a>
 800d9f6:	3904      	subs	r1, #4
 800d9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800da00:	459c      	cmp	ip, r3
 800da02:	d8f9      	bhi.n	800d9f8 <__lshift+0xc0>
 800da04:	e7ea      	b.n	800d9dc <__lshift+0xa4>
 800da06:	bf00      	nop
 800da08:	0800f01e 	.word	0x0800f01e
 800da0c:	0800f08f 	.word	0x0800f08f

0800da10 <__mcmp>:
 800da10:	690a      	ldr	r2, [r1, #16]
 800da12:	4603      	mov	r3, r0
 800da14:	6900      	ldr	r0, [r0, #16]
 800da16:	1a80      	subs	r0, r0, r2
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	d10e      	bne.n	800da3a <__mcmp+0x2a>
 800da1c:	3314      	adds	r3, #20
 800da1e:	3114      	adds	r1, #20
 800da20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800da24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800da28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800da2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800da30:	4295      	cmp	r5, r2
 800da32:	d003      	beq.n	800da3c <__mcmp+0x2c>
 800da34:	d205      	bcs.n	800da42 <__mcmp+0x32>
 800da36:	f04f 30ff 	mov.w	r0, #4294967295
 800da3a:	bd30      	pop	{r4, r5, pc}
 800da3c:	42a3      	cmp	r3, r4
 800da3e:	d3f3      	bcc.n	800da28 <__mcmp+0x18>
 800da40:	e7fb      	b.n	800da3a <__mcmp+0x2a>
 800da42:	2001      	movs	r0, #1
 800da44:	e7f9      	b.n	800da3a <__mcmp+0x2a>
	...

0800da48 <__mdiff>:
 800da48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da4c:	4689      	mov	r9, r1
 800da4e:	4606      	mov	r6, r0
 800da50:	4611      	mov	r1, r2
 800da52:	4648      	mov	r0, r9
 800da54:	4614      	mov	r4, r2
 800da56:	f7ff ffdb 	bl	800da10 <__mcmp>
 800da5a:	1e05      	subs	r5, r0, #0
 800da5c:	d112      	bne.n	800da84 <__mdiff+0x3c>
 800da5e:	4629      	mov	r1, r5
 800da60:	4630      	mov	r0, r6
 800da62:	f7ff fd11 	bl	800d488 <_Balloc>
 800da66:	4602      	mov	r2, r0
 800da68:	b928      	cbnz	r0, 800da76 <__mdiff+0x2e>
 800da6a:	4b3f      	ldr	r3, [pc, #252]	@ (800db68 <__mdiff+0x120>)
 800da6c:	f240 2137 	movw	r1, #567	@ 0x237
 800da70:	483e      	ldr	r0, [pc, #248]	@ (800db6c <__mdiff+0x124>)
 800da72:	f000 fdbb 	bl	800e5ec <__assert_func>
 800da76:	2301      	movs	r3, #1
 800da78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da7c:	4610      	mov	r0, r2
 800da7e:	b003      	add	sp, #12
 800da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da84:	bfbc      	itt	lt
 800da86:	464b      	movlt	r3, r9
 800da88:	46a1      	movlt	r9, r4
 800da8a:	4630      	mov	r0, r6
 800da8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800da90:	bfba      	itte	lt
 800da92:	461c      	movlt	r4, r3
 800da94:	2501      	movlt	r5, #1
 800da96:	2500      	movge	r5, #0
 800da98:	f7ff fcf6 	bl	800d488 <_Balloc>
 800da9c:	4602      	mov	r2, r0
 800da9e:	b918      	cbnz	r0, 800daa8 <__mdiff+0x60>
 800daa0:	4b31      	ldr	r3, [pc, #196]	@ (800db68 <__mdiff+0x120>)
 800daa2:	f240 2145 	movw	r1, #581	@ 0x245
 800daa6:	e7e3      	b.n	800da70 <__mdiff+0x28>
 800daa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800daac:	6926      	ldr	r6, [r4, #16]
 800daae:	60c5      	str	r5, [r0, #12]
 800dab0:	f109 0310 	add.w	r3, r9, #16
 800dab4:	f109 0514 	add.w	r5, r9, #20
 800dab8:	f104 0e14 	add.w	lr, r4, #20
 800dabc:	f100 0b14 	add.w	fp, r0, #20
 800dac0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dac4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dac8:	9301      	str	r3, [sp, #4]
 800daca:	46d9      	mov	r9, fp
 800dacc:	f04f 0c00 	mov.w	ip, #0
 800dad0:	9b01      	ldr	r3, [sp, #4]
 800dad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dada:	9301      	str	r3, [sp, #4]
 800dadc:	fa1f f38a 	uxth.w	r3, sl
 800dae0:	4619      	mov	r1, r3
 800dae2:	b283      	uxth	r3, r0
 800dae4:	1acb      	subs	r3, r1, r3
 800dae6:	0c00      	lsrs	r0, r0, #16
 800dae8:	4463      	add	r3, ip
 800daea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800daee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800daf8:	4576      	cmp	r6, lr
 800dafa:	f849 3b04 	str.w	r3, [r9], #4
 800dafe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db02:	d8e5      	bhi.n	800dad0 <__mdiff+0x88>
 800db04:	1b33      	subs	r3, r6, r4
 800db06:	3b15      	subs	r3, #21
 800db08:	f023 0303 	bic.w	r3, r3, #3
 800db0c:	3415      	adds	r4, #21
 800db0e:	3304      	adds	r3, #4
 800db10:	42a6      	cmp	r6, r4
 800db12:	bf38      	it	cc
 800db14:	2304      	movcc	r3, #4
 800db16:	441d      	add	r5, r3
 800db18:	445b      	add	r3, fp
 800db1a:	461e      	mov	r6, r3
 800db1c:	462c      	mov	r4, r5
 800db1e:	4544      	cmp	r4, r8
 800db20:	d30e      	bcc.n	800db40 <__mdiff+0xf8>
 800db22:	f108 0103 	add.w	r1, r8, #3
 800db26:	1b49      	subs	r1, r1, r5
 800db28:	f021 0103 	bic.w	r1, r1, #3
 800db2c:	3d03      	subs	r5, #3
 800db2e:	45a8      	cmp	r8, r5
 800db30:	bf38      	it	cc
 800db32:	2100      	movcc	r1, #0
 800db34:	440b      	add	r3, r1
 800db36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db3a:	b191      	cbz	r1, 800db62 <__mdiff+0x11a>
 800db3c:	6117      	str	r7, [r2, #16]
 800db3e:	e79d      	b.n	800da7c <__mdiff+0x34>
 800db40:	f854 1b04 	ldr.w	r1, [r4], #4
 800db44:	46e6      	mov	lr, ip
 800db46:	0c08      	lsrs	r0, r1, #16
 800db48:	fa1c fc81 	uxtah	ip, ip, r1
 800db4c:	4471      	add	r1, lr
 800db4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800db52:	b289      	uxth	r1, r1
 800db54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800db58:	f846 1b04 	str.w	r1, [r6], #4
 800db5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800db60:	e7dd      	b.n	800db1e <__mdiff+0xd6>
 800db62:	3f01      	subs	r7, #1
 800db64:	e7e7      	b.n	800db36 <__mdiff+0xee>
 800db66:	bf00      	nop
 800db68:	0800f01e 	.word	0x0800f01e
 800db6c:	0800f08f 	.word	0x0800f08f

0800db70 <__ulp>:
 800db70:	b082      	sub	sp, #8
 800db72:	ed8d 0b00 	vstr	d0, [sp]
 800db76:	9a01      	ldr	r2, [sp, #4]
 800db78:	4b0f      	ldr	r3, [pc, #60]	@ (800dbb8 <__ulp+0x48>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800db80:	2b00      	cmp	r3, #0
 800db82:	dc08      	bgt.n	800db96 <__ulp+0x26>
 800db84:	425b      	negs	r3, r3
 800db86:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800db8a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800db8e:	da04      	bge.n	800db9a <__ulp+0x2a>
 800db90:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800db94:	4113      	asrs	r3, r2
 800db96:	2200      	movs	r2, #0
 800db98:	e008      	b.n	800dbac <__ulp+0x3c>
 800db9a:	f1a2 0314 	sub.w	r3, r2, #20
 800db9e:	2b1e      	cmp	r3, #30
 800dba0:	bfda      	itte	le
 800dba2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dba6:	40da      	lsrle	r2, r3
 800dba8:	2201      	movgt	r2, #1
 800dbaa:	2300      	movs	r3, #0
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	ec41 0b10 	vmov	d0, r0, r1
 800dbb4:	b002      	add	sp, #8
 800dbb6:	4770      	bx	lr
 800dbb8:	7ff00000 	.word	0x7ff00000

0800dbbc <__b2d>:
 800dbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc0:	6906      	ldr	r6, [r0, #16]
 800dbc2:	f100 0814 	add.w	r8, r0, #20
 800dbc6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dbca:	1f37      	subs	r7, r6, #4
 800dbcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7ff fd4b 	bl	800d66c <__hi0bits>
 800dbd6:	f1c0 0320 	rsb	r3, r0, #32
 800dbda:	280a      	cmp	r0, #10
 800dbdc:	600b      	str	r3, [r1, #0]
 800dbde:	491b      	ldr	r1, [pc, #108]	@ (800dc4c <__b2d+0x90>)
 800dbe0:	dc15      	bgt.n	800dc0e <__b2d+0x52>
 800dbe2:	f1c0 0c0b 	rsb	ip, r0, #11
 800dbe6:	fa22 f30c 	lsr.w	r3, r2, ip
 800dbea:	45b8      	cmp	r8, r7
 800dbec:	ea43 0501 	orr.w	r5, r3, r1
 800dbf0:	bf34      	ite	cc
 800dbf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dbf6:	2300      	movcs	r3, #0
 800dbf8:	3015      	adds	r0, #21
 800dbfa:	fa02 f000 	lsl.w	r0, r2, r0
 800dbfe:	fa23 f30c 	lsr.w	r3, r3, ip
 800dc02:	4303      	orrs	r3, r0
 800dc04:	461c      	mov	r4, r3
 800dc06:	ec45 4b10 	vmov	d0, r4, r5
 800dc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc0e:	45b8      	cmp	r8, r7
 800dc10:	bf3a      	itte	cc
 800dc12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dc16:	f1a6 0708 	subcc.w	r7, r6, #8
 800dc1a:	2300      	movcs	r3, #0
 800dc1c:	380b      	subs	r0, #11
 800dc1e:	d012      	beq.n	800dc46 <__b2d+0x8a>
 800dc20:	f1c0 0120 	rsb	r1, r0, #32
 800dc24:	fa23 f401 	lsr.w	r4, r3, r1
 800dc28:	4082      	lsls	r2, r0
 800dc2a:	4322      	orrs	r2, r4
 800dc2c:	4547      	cmp	r7, r8
 800dc2e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dc32:	bf8c      	ite	hi
 800dc34:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dc38:	2200      	movls	r2, #0
 800dc3a:	4083      	lsls	r3, r0
 800dc3c:	40ca      	lsrs	r2, r1
 800dc3e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dc42:	4313      	orrs	r3, r2
 800dc44:	e7de      	b.n	800dc04 <__b2d+0x48>
 800dc46:	ea42 0501 	orr.w	r5, r2, r1
 800dc4a:	e7db      	b.n	800dc04 <__b2d+0x48>
 800dc4c:	3ff00000 	.word	0x3ff00000

0800dc50 <__d2b>:
 800dc50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc54:	460f      	mov	r7, r1
 800dc56:	2101      	movs	r1, #1
 800dc58:	ec59 8b10 	vmov	r8, r9, d0
 800dc5c:	4616      	mov	r6, r2
 800dc5e:	f7ff fc13 	bl	800d488 <_Balloc>
 800dc62:	4604      	mov	r4, r0
 800dc64:	b930      	cbnz	r0, 800dc74 <__d2b+0x24>
 800dc66:	4602      	mov	r2, r0
 800dc68:	4b23      	ldr	r3, [pc, #140]	@ (800dcf8 <__d2b+0xa8>)
 800dc6a:	4824      	ldr	r0, [pc, #144]	@ (800dcfc <__d2b+0xac>)
 800dc6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800dc70:	f000 fcbc 	bl	800e5ec <__assert_func>
 800dc74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc7c:	b10d      	cbz	r5, 800dc82 <__d2b+0x32>
 800dc7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dc82:	9301      	str	r3, [sp, #4]
 800dc84:	f1b8 0300 	subs.w	r3, r8, #0
 800dc88:	d023      	beq.n	800dcd2 <__d2b+0x82>
 800dc8a:	4668      	mov	r0, sp
 800dc8c:	9300      	str	r3, [sp, #0]
 800dc8e:	f7ff fd0c 	bl	800d6aa <__lo0bits>
 800dc92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc96:	b1d0      	cbz	r0, 800dcce <__d2b+0x7e>
 800dc98:	f1c0 0320 	rsb	r3, r0, #32
 800dc9c:	fa02 f303 	lsl.w	r3, r2, r3
 800dca0:	430b      	orrs	r3, r1
 800dca2:	40c2      	lsrs	r2, r0
 800dca4:	6163      	str	r3, [r4, #20]
 800dca6:	9201      	str	r2, [sp, #4]
 800dca8:	9b01      	ldr	r3, [sp, #4]
 800dcaa:	61a3      	str	r3, [r4, #24]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	bf0c      	ite	eq
 800dcb0:	2201      	moveq	r2, #1
 800dcb2:	2202      	movne	r2, #2
 800dcb4:	6122      	str	r2, [r4, #16]
 800dcb6:	b1a5      	cbz	r5, 800dce2 <__d2b+0x92>
 800dcb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dcbc:	4405      	add	r5, r0
 800dcbe:	603d      	str	r5, [r7, #0]
 800dcc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dcc4:	6030      	str	r0, [r6, #0]
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	b003      	add	sp, #12
 800dcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcce:	6161      	str	r1, [r4, #20]
 800dcd0:	e7ea      	b.n	800dca8 <__d2b+0x58>
 800dcd2:	a801      	add	r0, sp, #4
 800dcd4:	f7ff fce9 	bl	800d6aa <__lo0bits>
 800dcd8:	9b01      	ldr	r3, [sp, #4]
 800dcda:	6163      	str	r3, [r4, #20]
 800dcdc:	3020      	adds	r0, #32
 800dcde:	2201      	movs	r2, #1
 800dce0:	e7e8      	b.n	800dcb4 <__d2b+0x64>
 800dce2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dce6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dcea:	6038      	str	r0, [r7, #0]
 800dcec:	6918      	ldr	r0, [r3, #16]
 800dcee:	f7ff fcbd 	bl	800d66c <__hi0bits>
 800dcf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dcf6:	e7e5      	b.n	800dcc4 <__d2b+0x74>
 800dcf8:	0800f01e 	.word	0x0800f01e
 800dcfc:	0800f08f 	.word	0x0800f08f

0800dd00 <__ratio>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	b085      	sub	sp, #20
 800dd06:	e9cd 1000 	strd	r1, r0, [sp]
 800dd0a:	a902      	add	r1, sp, #8
 800dd0c:	f7ff ff56 	bl	800dbbc <__b2d>
 800dd10:	9800      	ldr	r0, [sp, #0]
 800dd12:	a903      	add	r1, sp, #12
 800dd14:	ec55 4b10 	vmov	r4, r5, d0
 800dd18:	f7ff ff50 	bl	800dbbc <__b2d>
 800dd1c:	9b01      	ldr	r3, [sp, #4]
 800dd1e:	6919      	ldr	r1, [r3, #16]
 800dd20:	9b00      	ldr	r3, [sp, #0]
 800dd22:	691b      	ldr	r3, [r3, #16]
 800dd24:	1ac9      	subs	r1, r1, r3
 800dd26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dd2a:	1a9b      	subs	r3, r3, r2
 800dd2c:	ec5b ab10 	vmov	sl, fp, d0
 800dd30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfce      	itee	gt
 800dd38:	462a      	movgt	r2, r5
 800dd3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd3e:	465a      	movle	r2, fp
 800dd40:	462f      	mov	r7, r5
 800dd42:	46d9      	mov	r9, fp
 800dd44:	bfcc      	ite	gt
 800dd46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd4a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dd4e:	464b      	mov	r3, r9
 800dd50:	4652      	mov	r2, sl
 800dd52:	4620      	mov	r0, r4
 800dd54:	4639      	mov	r1, r7
 800dd56:	f7f2 fd89 	bl	800086c <__aeabi_ddiv>
 800dd5a:	ec41 0b10 	vmov	d0, r0, r1
 800dd5e:	b005      	add	sp, #20
 800dd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd64 <__copybits>:
 800dd64:	3901      	subs	r1, #1
 800dd66:	b570      	push	{r4, r5, r6, lr}
 800dd68:	1149      	asrs	r1, r1, #5
 800dd6a:	6914      	ldr	r4, [r2, #16]
 800dd6c:	3101      	adds	r1, #1
 800dd6e:	f102 0314 	add.w	r3, r2, #20
 800dd72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd7a:	1f05      	subs	r5, r0, #4
 800dd7c:	42a3      	cmp	r3, r4
 800dd7e:	d30c      	bcc.n	800dd9a <__copybits+0x36>
 800dd80:	1aa3      	subs	r3, r4, r2
 800dd82:	3b11      	subs	r3, #17
 800dd84:	f023 0303 	bic.w	r3, r3, #3
 800dd88:	3211      	adds	r2, #17
 800dd8a:	42a2      	cmp	r2, r4
 800dd8c:	bf88      	it	hi
 800dd8e:	2300      	movhi	r3, #0
 800dd90:	4418      	add	r0, r3
 800dd92:	2300      	movs	r3, #0
 800dd94:	4288      	cmp	r0, r1
 800dd96:	d305      	bcc.n	800dda4 <__copybits+0x40>
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	f853 6b04 	ldr.w	r6, [r3], #4
 800dd9e:	f845 6f04 	str.w	r6, [r5, #4]!
 800dda2:	e7eb      	b.n	800dd7c <__copybits+0x18>
 800dda4:	f840 3b04 	str.w	r3, [r0], #4
 800dda8:	e7f4      	b.n	800dd94 <__copybits+0x30>

0800ddaa <__any_on>:
 800ddaa:	f100 0214 	add.w	r2, r0, #20
 800ddae:	6900      	ldr	r0, [r0, #16]
 800ddb0:	114b      	asrs	r3, r1, #5
 800ddb2:	4298      	cmp	r0, r3
 800ddb4:	b510      	push	{r4, lr}
 800ddb6:	db11      	blt.n	800dddc <__any_on+0x32>
 800ddb8:	dd0a      	ble.n	800ddd0 <__any_on+0x26>
 800ddba:	f011 011f 	ands.w	r1, r1, #31
 800ddbe:	d007      	beq.n	800ddd0 <__any_on+0x26>
 800ddc0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ddc4:	fa24 f001 	lsr.w	r0, r4, r1
 800ddc8:	fa00 f101 	lsl.w	r1, r0, r1
 800ddcc:	428c      	cmp	r4, r1
 800ddce:	d10b      	bne.n	800dde8 <__any_on+0x3e>
 800ddd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d803      	bhi.n	800dde0 <__any_on+0x36>
 800ddd8:	2000      	movs	r0, #0
 800ddda:	bd10      	pop	{r4, pc}
 800dddc:	4603      	mov	r3, r0
 800ddde:	e7f7      	b.n	800ddd0 <__any_on+0x26>
 800dde0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dde4:	2900      	cmp	r1, #0
 800dde6:	d0f5      	beq.n	800ddd4 <__any_on+0x2a>
 800dde8:	2001      	movs	r0, #1
 800ddea:	e7f6      	b.n	800ddda <__any_on+0x30>

0800ddec <__ascii_wctomb>:
 800ddec:	4603      	mov	r3, r0
 800ddee:	4608      	mov	r0, r1
 800ddf0:	b141      	cbz	r1, 800de04 <__ascii_wctomb+0x18>
 800ddf2:	2aff      	cmp	r2, #255	@ 0xff
 800ddf4:	d904      	bls.n	800de00 <__ascii_wctomb+0x14>
 800ddf6:	228a      	movs	r2, #138	@ 0x8a
 800ddf8:	601a      	str	r2, [r3, #0]
 800ddfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfe:	4770      	bx	lr
 800de00:	700a      	strb	r2, [r1, #0]
 800de02:	2001      	movs	r0, #1
 800de04:	4770      	bx	lr

0800de06 <__ssputs_r>:
 800de06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de0a:	688e      	ldr	r6, [r1, #8]
 800de0c:	461f      	mov	r7, r3
 800de0e:	42be      	cmp	r6, r7
 800de10:	680b      	ldr	r3, [r1, #0]
 800de12:	4682      	mov	sl, r0
 800de14:	460c      	mov	r4, r1
 800de16:	4690      	mov	r8, r2
 800de18:	d82d      	bhi.n	800de76 <__ssputs_r+0x70>
 800de1a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de1e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de22:	d026      	beq.n	800de72 <__ssputs_r+0x6c>
 800de24:	6965      	ldr	r5, [r4, #20]
 800de26:	6909      	ldr	r1, [r1, #16]
 800de28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de2c:	eba3 0901 	sub.w	r9, r3, r1
 800de30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de34:	1c7b      	adds	r3, r7, #1
 800de36:	444b      	add	r3, r9
 800de38:	106d      	asrs	r5, r5, #1
 800de3a:	429d      	cmp	r5, r3
 800de3c:	bf38      	it	cc
 800de3e:	461d      	movcc	r5, r3
 800de40:	0553      	lsls	r3, r2, #21
 800de42:	d527      	bpl.n	800de94 <__ssputs_r+0x8e>
 800de44:	4629      	mov	r1, r5
 800de46:	f7ff fa81 	bl	800d34c <_malloc_r>
 800de4a:	4606      	mov	r6, r0
 800de4c:	b360      	cbz	r0, 800dea8 <__ssputs_r+0xa2>
 800de4e:	6921      	ldr	r1, [r4, #16]
 800de50:	464a      	mov	r2, r9
 800de52:	f7fe f862 	bl	800bf1a <memcpy>
 800de56:	89a3      	ldrh	r3, [r4, #12]
 800de58:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de60:	81a3      	strh	r3, [r4, #12]
 800de62:	6126      	str	r6, [r4, #16]
 800de64:	6165      	str	r5, [r4, #20]
 800de66:	444e      	add	r6, r9
 800de68:	eba5 0509 	sub.w	r5, r5, r9
 800de6c:	6026      	str	r6, [r4, #0]
 800de6e:	60a5      	str	r5, [r4, #8]
 800de70:	463e      	mov	r6, r7
 800de72:	42be      	cmp	r6, r7
 800de74:	d900      	bls.n	800de78 <__ssputs_r+0x72>
 800de76:	463e      	mov	r6, r7
 800de78:	6820      	ldr	r0, [r4, #0]
 800de7a:	4632      	mov	r2, r6
 800de7c:	4641      	mov	r1, r8
 800de7e:	f000 fb69 	bl	800e554 <memmove>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	1b9b      	subs	r3, r3, r6
 800de86:	60a3      	str	r3, [r4, #8]
 800de88:	6823      	ldr	r3, [r4, #0]
 800de8a:	4433      	add	r3, r6
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	2000      	movs	r0, #0
 800de90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de94:	462a      	mov	r2, r5
 800de96:	f000 fbdb 	bl	800e650 <_realloc_r>
 800de9a:	4606      	mov	r6, r0
 800de9c:	2800      	cmp	r0, #0
 800de9e:	d1e0      	bne.n	800de62 <__ssputs_r+0x5c>
 800dea0:	6921      	ldr	r1, [r4, #16]
 800dea2:	4650      	mov	r0, sl
 800dea4:	f7fe fea4 	bl	800cbf0 <_free_r>
 800dea8:	230c      	movs	r3, #12
 800deaa:	f8ca 3000 	str.w	r3, [sl]
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	e7e9      	b.n	800de90 <__ssputs_r+0x8a>

0800debc <_svfiprintf_r>:
 800debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec0:	4698      	mov	r8, r3
 800dec2:	898b      	ldrh	r3, [r1, #12]
 800dec4:	061b      	lsls	r3, r3, #24
 800dec6:	b09d      	sub	sp, #116	@ 0x74
 800dec8:	4607      	mov	r7, r0
 800deca:	460d      	mov	r5, r1
 800decc:	4614      	mov	r4, r2
 800dece:	d510      	bpl.n	800def2 <_svfiprintf_r+0x36>
 800ded0:	690b      	ldr	r3, [r1, #16]
 800ded2:	b973      	cbnz	r3, 800def2 <_svfiprintf_r+0x36>
 800ded4:	2140      	movs	r1, #64	@ 0x40
 800ded6:	f7ff fa39 	bl	800d34c <_malloc_r>
 800deda:	6028      	str	r0, [r5, #0]
 800dedc:	6128      	str	r0, [r5, #16]
 800dede:	b930      	cbnz	r0, 800deee <_svfiprintf_r+0x32>
 800dee0:	230c      	movs	r3, #12
 800dee2:	603b      	str	r3, [r7, #0]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	b01d      	add	sp, #116	@ 0x74
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	2340      	movs	r3, #64	@ 0x40
 800def0:	616b      	str	r3, [r5, #20]
 800def2:	2300      	movs	r3, #0
 800def4:	9309      	str	r3, [sp, #36]	@ 0x24
 800def6:	2320      	movs	r3, #32
 800def8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800defc:	f8cd 800c 	str.w	r8, [sp, #12]
 800df00:	2330      	movs	r3, #48	@ 0x30
 800df02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0a0 <_svfiprintf_r+0x1e4>
 800df06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df0a:	f04f 0901 	mov.w	r9, #1
 800df0e:	4623      	mov	r3, r4
 800df10:	469a      	mov	sl, r3
 800df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df16:	b10a      	cbz	r2, 800df1c <_svfiprintf_r+0x60>
 800df18:	2a25      	cmp	r2, #37	@ 0x25
 800df1a:	d1f9      	bne.n	800df10 <_svfiprintf_r+0x54>
 800df1c:	ebba 0b04 	subs.w	fp, sl, r4
 800df20:	d00b      	beq.n	800df3a <_svfiprintf_r+0x7e>
 800df22:	465b      	mov	r3, fp
 800df24:	4622      	mov	r2, r4
 800df26:	4629      	mov	r1, r5
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff ff6c 	bl	800de06 <__ssputs_r>
 800df2e:	3001      	adds	r0, #1
 800df30:	f000 80a7 	beq.w	800e082 <_svfiprintf_r+0x1c6>
 800df34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df36:	445a      	add	r2, fp
 800df38:	9209      	str	r2, [sp, #36]	@ 0x24
 800df3a:	f89a 3000 	ldrb.w	r3, [sl]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 809f 	beq.w	800e082 <_svfiprintf_r+0x1c6>
 800df44:	2300      	movs	r3, #0
 800df46:	f04f 32ff 	mov.w	r2, #4294967295
 800df4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df4e:	f10a 0a01 	add.w	sl, sl, #1
 800df52:	9304      	str	r3, [sp, #16]
 800df54:	9307      	str	r3, [sp, #28]
 800df56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df5c:	4654      	mov	r4, sl
 800df5e:	2205      	movs	r2, #5
 800df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df64:	484e      	ldr	r0, [pc, #312]	@ (800e0a0 <_svfiprintf_r+0x1e4>)
 800df66:	f7f2 f943 	bl	80001f0 <memchr>
 800df6a:	9a04      	ldr	r2, [sp, #16]
 800df6c:	b9d8      	cbnz	r0, 800dfa6 <_svfiprintf_r+0xea>
 800df6e:	06d0      	lsls	r0, r2, #27
 800df70:	bf44      	itt	mi
 800df72:	2320      	movmi	r3, #32
 800df74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df78:	0711      	lsls	r1, r2, #28
 800df7a:	bf44      	itt	mi
 800df7c:	232b      	movmi	r3, #43	@ 0x2b
 800df7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df82:	f89a 3000 	ldrb.w	r3, [sl]
 800df86:	2b2a      	cmp	r3, #42	@ 0x2a
 800df88:	d015      	beq.n	800dfb6 <_svfiprintf_r+0xfa>
 800df8a:	9a07      	ldr	r2, [sp, #28]
 800df8c:	4654      	mov	r4, sl
 800df8e:	2000      	movs	r0, #0
 800df90:	f04f 0c0a 	mov.w	ip, #10
 800df94:	4621      	mov	r1, r4
 800df96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df9a:	3b30      	subs	r3, #48	@ 0x30
 800df9c:	2b09      	cmp	r3, #9
 800df9e:	d94b      	bls.n	800e038 <_svfiprintf_r+0x17c>
 800dfa0:	b1b0      	cbz	r0, 800dfd0 <_svfiprintf_r+0x114>
 800dfa2:	9207      	str	r2, [sp, #28]
 800dfa4:	e014      	b.n	800dfd0 <_svfiprintf_r+0x114>
 800dfa6:	eba0 0308 	sub.w	r3, r0, r8
 800dfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	46a2      	mov	sl, r4
 800dfb4:	e7d2      	b.n	800df5c <_svfiprintf_r+0xa0>
 800dfb6:	9b03      	ldr	r3, [sp, #12]
 800dfb8:	1d19      	adds	r1, r3, #4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	9103      	str	r1, [sp, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	bfbb      	ittet	lt
 800dfc2:	425b      	neglt	r3, r3
 800dfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800dfc8:	9307      	strge	r3, [sp, #28]
 800dfca:	9307      	strlt	r3, [sp, #28]
 800dfcc:	bfb8      	it	lt
 800dfce:	9204      	strlt	r2, [sp, #16]
 800dfd0:	7823      	ldrb	r3, [r4, #0]
 800dfd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfd4:	d10a      	bne.n	800dfec <_svfiprintf_r+0x130>
 800dfd6:	7863      	ldrb	r3, [r4, #1]
 800dfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfda:	d132      	bne.n	800e042 <_svfiprintf_r+0x186>
 800dfdc:	9b03      	ldr	r3, [sp, #12]
 800dfde:	1d1a      	adds	r2, r3, #4
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	9203      	str	r2, [sp, #12]
 800dfe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfe8:	3402      	adds	r4, #2
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0b0 <_svfiprintf_r+0x1f4>
 800dff0:	7821      	ldrb	r1, [r4, #0]
 800dff2:	2203      	movs	r2, #3
 800dff4:	4650      	mov	r0, sl
 800dff6:	f7f2 f8fb 	bl	80001f0 <memchr>
 800dffa:	b138      	cbz	r0, 800e00c <_svfiprintf_r+0x150>
 800dffc:	9b04      	ldr	r3, [sp, #16]
 800dffe:	eba0 000a 	sub.w	r0, r0, sl
 800e002:	2240      	movs	r2, #64	@ 0x40
 800e004:	4082      	lsls	r2, r0
 800e006:	4313      	orrs	r3, r2
 800e008:	3401      	adds	r4, #1
 800e00a:	9304      	str	r3, [sp, #16]
 800e00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e010:	4824      	ldr	r0, [pc, #144]	@ (800e0a4 <_svfiprintf_r+0x1e8>)
 800e012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e016:	2206      	movs	r2, #6
 800e018:	f7f2 f8ea 	bl	80001f0 <memchr>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d036      	beq.n	800e08e <_svfiprintf_r+0x1d2>
 800e020:	4b21      	ldr	r3, [pc, #132]	@ (800e0a8 <_svfiprintf_r+0x1ec>)
 800e022:	bb1b      	cbnz	r3, 800e06c <_svfiprintf_r+0x1b0>
 800e024:	9b03      	ldr	r3, [sp, #12]
 800e026:	3307      	adds	r3, #7
 800e028:	f023 0307 	bic.w	r3, r3, #7
 800e02c:	3308      	adds	r3, #8
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	4433      	add	r3, r6
 800e034:	9309      	str	r3, [sp, #36]	@ 0x24
 800e036:	e76a      	b.n	800df0e <_svfiprintf_r+0x52>
 800e038:	fb0c 3202 	mla	r2, ip, r2, r3
 800e03c:	460c      	mov	r4, r1
 800e03e:	2001      	movs	r0, #1
 800e040:	e7a8      	b.n	800df94 <_svfiprintf_r+0xd8>
 800e042:	2300      	movs	r3, #0
 800e044:	3401      	adds	r4, #1
 800e046:	9305      	str	r3, [sp, #20]
 800e048:	4619      	mov	r1, r3
 800e04a:	f04f 0c0a 	mov.w	ip, #10
 800e04e:	4620      	mov	r0, r4
 800e050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e054:	3a30      	subs	r2, #48	@ 0x30
 800e056:	2a09      	cmp	r2, #9
 800e058:	d903      	bls.n	800e062 <_svfiprintf_r+0x1a6>
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0c6      	beq.n	800dfec <_svfiprintf_r+0x130>
 800e05e:	9105      	str	r1, [sp, #20]
 800e060:	e7c4      	b.n	800dfec <_svfiprintf_r+0x130>
 800e062:	fb0c 2101 	mla	r1, ip, r1, r2
 800e066:	4604      	mov	r4, r0
 800e068:	2301      	movs	r3, #1
 800e06a:	e7f0      	b.n	800e04e <_svfiprintf_r+0x192>
 800e06c:	ab03      	add	r3, sp, #12
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	462a      	mov	r2, r5
 800e072:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ac <_svfiprintf_r+0x1f0>)
 800e074:	a904      	add	r1, sp, #16
 800e076:	4638      	mov	r0, r7
 800e078:	f7fc fe74 	bl	800ad64 <_printf_float>
 800e07c:	1c42      	adds	r2, r0, #1
 800e07e:	4606      	mov	r6, r0
 800e080:	d1d6      	bne.n	800e030 <_svfiprintf_r+0x174>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	065b      	lsls	r3, r3, #25
 800e086:	f53f af2d 	bmi.w	800dee4 <_svfiprintf_r+0x28>
 800e08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e08c:	e72c      	b.n	800dee8 <_svfiprintf_r+0x2c>
 800e08e:	ab03      	add	r3, sp, #12
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	462a      	mov	r2, r5
 800e094:	4b05      	ldr	r3, [pc, #20]	@ (800e0ac <_svfiprintf_r+0x1f0>)
 800e096:	a904      	add	r1, sp, #16
 800e098:	4638      	mov	r0, r7
 800e09a:	f7fd f8fb 	bl	800b294 <_printf_i>
 800e09e:	e7ed      	b.n	800e07c <_svfiprintf_r+0x1c0>
 800e0a0:	0800f1e8 	.word	0x0800f1e8
 800e0a4:	0800f1f2 	.word	0x0800f1f2
 800e0a8:	0800ad65 	.word	0x0800ad65
 800e0ac:	0800de07 	.word	0x0800de07
 800e0b0:	0800f1ee 	.word	0x0800f1ee

0800e0b4 <__sfputc_r>:
 800e0b4:	6893      	ldr	r3, [r2, #8]
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	b410      	push	{r4}
 800e0bc:	6093      	str	r3, [r2, #8]
 800e0be:	da08      	bge.n	800e0d2 <__sfputc_r+0x1e>
 800e0c0:	6994      	ldr	r4, [r2, #24]
 800e0c2:	42a3      	cmp	r3, r4
 800e0c4:	db01      	blt.n	800e0ca <__sfputc_r+0x16>
 800e0c6:	290a      	cmp	r1, #10
 800e0c8:	d103      	bne.n	800e0d2 <__sfputc_r+0x1e>
 800e0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0ce:	f7fd bdde 	b.w	800bc8e <__swbuf_r>
 800e0d2:	6813      	ldr	r3, [r2, #0]
 800e0d4:	1c58      	adds	r0, r3, #1
 800e0d6:	6010      	str	r0, [r2, #0]
 800e0d8:	7019      	strb	r1, [r3, #0]
 800e0da:	4608      	mov	r0, r1
 800e0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <__sfputs_r>:
 800e0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	460f      	mov	r7, r1
 800e0e8:	4614      	mov	r4, r2
 800e0ea:	18d5      	adds	r5, r2, r3
 800e0ec:	42ac      	cmp	r4, r5
 800e0ee:	d101      	bne.n	800e0f4 <__sfputs_r+0x12>
 800e0f0:	2000      	movs	r0, #0
 800e0f2:	e007      	b.n	800e104 <__sfputs_r+0x22>
 800e0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f8:	463a      	mov	r2, r7
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7ff ffda 	bl	800e0b4 <__sfputc_r>
 800e100:	1c43      	adds	r3, r0, #1
 800e102:	d1f3      	bne.n	800e0ec <__sfputs_r+0xa>
 800e104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e108 <_vfiprintf_r>:
 800e108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e10c:	460d      	mov	r5, r1
 800e10e:	b09d      	sub	sp, #116	@ 0x74
 800e110:	4614      	mov	r4, r2
 800e112:	4698      	mov	r8, r3
 800e114:	4606      	mov	r6, r0
 800e116:	b118      	cbz	r0, 800e120 <_vfiprintf_r+0x18>
 800e118:	6a03      	ldr	r3, [r0, #32]
 800e11a:	b90b      	cbnz	r3, 800e120 <_vfiprintf_r+0x18>
 800e11c:	f7fd fc7a 	bl	800ba14 <__sinit>
 800e120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e122:	07d9      	lsls	r1, r3, #31
 800e124:	d405      	bmi.n	800e132 <_vfiprintf_r+0x2a>
 800e126:	89ab      	ldrh	r3, [r5, #12]
 800e128:	059a      	lsls	r2, r3, #22
 800e12a:	d402      	bmi.n	800e132 <_vfiprintf_r+0x2a>
 800e12c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e12e:	f7fd fef2 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800e132:	89ab      	ldrh	r3, [r5, #12]
 800e134:	071b      	lsls	r3, r3, #28
 800e136:	d501      	bpl.n	800e13c <_vfiprintf_r+0x34>
 800e138:	692b      	ldr	r3, [r5, #16]
 800e13a:	b99b      	cbnz	r3, 800e164 <_vfiprintf_r+0x5c>
 800e13c:	4629      	mov	r1, r5
 800e13e:	4630      	mov	r0, r6
 800e140:	f7fd fde4 	bl	800bd0c <__swsetup_r>
 800e144:	b170      	cbz	r0, 800e164 <_vfiprintf_r+0x5c>
 800e146:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e148:	07dc      	lsls	r4, r3, #31
 800e14a:	d504      	bpl.n	800e156 <_vfiprintf_r+0x4e>
 800e14c:	f04f 30ff 	mov.w	r0, #4294967295
 800e150:	b01d      	add	sp, #116	@ 0x74
 800e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e156:	89ab      	ldrh	r3, [r5, #12]
 800e158:	0598      	lsls	r0, r3, #22
 800e15a:	d4f7      	bmi.n	800e14c <_vfiprintf_r+0x44>
 800e15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e15e:	f7fd fedb 	bl	800bf18 <__retarget_lock_release_recursive>
 800e162:	e7f3      	b.n	800e14c <_vfiprintf_r+0x44>
 800e164:	2300      	movs	r3, #0
 800e166:	9309      	str	r3, [sp, #36]	@ 0x24
 800e168:	2320      	movs	r3, #32
 800e16a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e16e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e172:	2330      	movs	r3, #48	@ 0x30
 800e174:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e324 <_vfiprintf_r+0x21c>
 800e178:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e17c:	f04f 0901 	mov.w	r9, #1
 800e180:	4623      	mov	r3, r4
 800e182:	469a      	mov	sl, r3
 800e184:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e188:	b10a      	cbz	r2, 800e18e <_vfiprintf_r+0x86>
 800e18a:	2a25      	cmp	r2, #37	@ 0x25
 800e18c:	d1f9      	bne.n	800e182 <_vfiprintf_r+0x7a>
 800e18e:	ebba 0b04 	subs.w	fp, sl, r4
 800e192:	d00b      	beq.n	800e1ac <_vfiprintf_r+0xa4>
 800e194:	465b      	mov	r3, fp
 800e196:	4622      	mov	r2, r4
 800e198:	4629      	mov	r1, r5
 800e19a:	4630      	mov	r0, r6
 800e19c:	f7ff ffa1 	bl	800e0e2 <__sfputs_r>
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f000 80a7 	beq.w	800e2f4 <_vfiprintf_r+0x1ec>
 800e1a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1a8:	445a      	add	r2, fp
 800e1aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f000 809f 	beq.w	800e2f4 <_vfiprintf_r+0x1ec>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c0:	f10a 0a01 	add.w	sl, sl, #1
 800e1c4:	9304      	str	r3, [sp, #16]
 800e1c6:	9307      	str	r3, [sp, #28]
 800e1c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1ce:	4654      	mov	r4, sl
 800e1d0:	2205      	movs	r2, #5
 800e1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d6:	4853      	ldr	r0, [pc, #332]	@ (800e324 <_vfiprintf_r+0x21c>)
 800e1d8:	f7f2 f80a 	bl	80001f0 <memchr>
 800e1dc:	9a04      	ldr	r2, [sp, #16]
 800e1de:	b9d8      	cbnz	r0, 800e218 <_vfiprintf_r+0x110>
 800e1e0:	06d1      	lsls	r1, r2, #27
 800e1e2:	bf44      	itt	mi
 800e1e4:	2320      	movmi	r3, #32
 800e1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ea:	0713      	lsls	r3, r2, #28
 800e1ec:	bf44      	itt	mi
 800e1ee:	232b      	movmi	r3, #43	@ 0x2b
 800e1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fa:	d015      	beq.n	800e228 <_vfiprintf_r+0x120>
 800e1fc:	9a07      	ldr	r2, [sp, #28]
 800e1fe:	4654      	mov	r4, sl
 800e200:	2000      	movs	r0, #0
 800e202:	f04f 0c0a 	mov.w	ip, #10
 800e206:	4621      	mov	r1, r4
 800e208:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20c:	3b30      	subs	r3, #48	@ 0x30
 800e20e:	2b09      	cmp	r3, #9
 800e210:	d94b      	bls.n	800e2aa <_vfiprintf_r+0x1a2>
 800e212:	b1b0      	cbz	r0, 800e242 <_vfiprintf_r+0x13a>
 800e214:	9207      	str	r2, [sp, #28]
 800e216:	e014      	b.n	800e242 <_vfiprintf_r+0x13a>
 800e218:	eba0 0308 	sub.w	r3, r0, r8
 800e21c:	fa09 f303 	lsl.w	r3, r9, r3
 800e220:	4313      	orrs	r3, r2
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	46a2      	mov	sl, r4
 800e226:	e7d2      	b.n	800e1ce <_vfiprintf_r+0xc6>
 800e228:	9b03      	ldr	r3, [sp, #12]
 800e22a:	1d19      	adds	r1, r3, #4
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	9103      	str	r1, [sp, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	bfbb      	ittet	lt
 800e234:	425b      	neglt	r3, r3
 800e236:	f042 0202 	orrlt.w	r2, r2, #2
 800e23a:	9307      	strge	r3, [sp, #28]
 800e23c:	9307      	strlt	r3, [sp, #28]
 800e23e:	bfb8      	it	lt
 800e240:	9204      	strlt	r2, [sp, #16]
 800e242:	7823      	ldrb	r3, [r4, #0]
 800e244:	2b2e      	cmp	r3, #46	@ 0x2e
 800e246:	d10a      	bne.n	800e25e <_vfiprintf_r+0x156>
 800e248:	7863      	ldrb	r3, [r4, #1]
 800e24a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e24c:	d132      	bne.n	800e2b4 <_vfiprintf_r+0x1ac>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	1d1a      	adds	r2, r3, #4
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	9203      	str	r2, [sp, #12]
 800e256:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e25a:	3402      	adds	r4, #2
 800e25c:	9305      	str	r3, [sp, #20]
 800e25e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e334 <_vfiprintf_r+0x22c>
 800e262:	7821      	ldrb	r1, [r4, #0]
 800e264:	2203      	movs	r2, #3
 800e266:	4650      	mov	r0, sl
 800e268:	f7f1 ffc2 	bl	80001f0 <memchr>
 800e26c:	b138      	cbz	r0, 800e27e <_vfiprintf_r+0x176>
 800e26e:	9b04      	ldr	r3, [sp, #16]
 800e270:	eba0 000a 	sub.w	r0, r0, sl
 800e274:	2240      	movs	r2, #64	@ 0x40
 800e276:	4082      	lsls	r2, r0
 800e278:	4313      	orrs	r3, r2
 800e27a:	3401      	adds	r4, #1
 800e27c:	9304      	str	r3, [sp, #16]
 800e27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e282:	4829      	ldr	r0, [pc, #164]	@ (800e328 <_vfiprintf_r+0x220>)
 800e284:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e288:	2206      	movs	r2, #6
 800e28a:	f7f1 ffb1 	bl	80001f0 <memchr>
 800e28e:	2800      	cmp	r0, #0
 800e290:	d03f      	beq.n	800e312 <_vfiprintf_r+0x20a>
 800e292:	4b26      	ldr	r3, [pc, #152]	@ (800e32c <_vfiprintf_r+0x224>)
 800e294:	bb1b      	cbnz	r3, 800e2de <_vfiprintf_r+0x1d6>
 800e296:	9b03      	ldr	r3, [sp, #12]
 800e298:	3307      	adds	r3, #7
 800e29a:	f023 0307 	bic.w	r3, r3, #7
 800e29e:	3308      	adds	r3, #8
 800e2a0:	9303      	str	r3, [sp, #12]
 800e2a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2a4:	443b      	add	r3, r7
 800e2a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2a8:	e76a      	b.n	800e180 <_vfiprintf_r+0x78>
 800e2aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2ae:	460c      	mov	r4, r1
 800e2b0:	2001      	movs	r0, #1
 800e2b2:	e7a8      	b.n	800e206 <_vfiprintf_r+0xfe>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	3401      	adds	r4, #1
 800e2b8:	9305      	str	r3, [sp, #20]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	f04f 0c0a 	mov.w	ip, #10
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2c6:	3a30      	subs	r2, #48	@ 0x30
 800e2c8:	2a09      	cmp	r2, #9
 800e2ca:	d903      	bls.n	800e2d4 <_vfiprintf_r+0x1cc>
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d0c6      	beq.n	800e25e <_vfiprintf_r+0x156>
 800e2d0:	9105      	str	r1, [sp, #20]
 800e2d2:	e7c4      	b.n	800e25e <_vfiprintf_r+0x156>
 800e2d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2d8:	4604      	mov	r4, r0
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e7f0      	b.n	800e2c0 <_vfiprintf_r+0x1b8>
 800e2de:	ab03      	add	r3, sp, #12
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	462a      	mov	r2, r5
 800e2e4:	4b12      	ldr	r3, [pc, #72]	@ (800e330 <_vfiprintf_r+0x228>)
 800e2e6:	a904      	add	r1, sp, #16
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	f7fc fd3b 	bl	800ad64 <_printf_float>
 800e2ee:	4607      	mov	r7, r0
 800e2f0:	1c78      	adds	r0, r7, #1
 800e2f2:	d1d6      	bne.n	800e2a2 <_vfiprintf_r+0x19a>
 800e2f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2f6:	07d9      	lsls	r1, r3, #31
 800e2f8:	d405      	bmi.n	800e306 <_vfiprintf_r+0x1fe>
 800e2fa:	89ab      	ldrh	r3, [r5, #12]
 800e2fc:	059a      	lsls	r2, r3, #22
 800e2fe:	d402      	bmi.n	800e306 <_vfiprintf_r+0x1fe>
 800e300:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e302:	f7fd fe09 	bl	800bf18 <__retarget_lock_release_recursive>
 800e306:	89ab      	ldrh	r3, [r5, #12]
 800e308:	065b      	lsls	r3, r3, #25
 800e30a:	f53f af1f 	bmi.w	800e14c <_vfiprintf_r+0x44>
 800e30e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e310:	e71e      	b.n	800e150 <_vfiprintf_r+0x48>
 800e312:	ab03      	add	r3, sp, #12
 800e314:	9300      	str	r3, [sp, #0]
 800e316:	462a      	mov	r2, r5
 800e318:	4b05      	ldr	r3, [pc, #20]	@ (800e330 <_vfiprintf_r+0x228>)
 800e31a:	a904      	add	r1, sp, #16
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7fc ffb9 	bl	800b294 <_printf_i>
 800e322:	e7e4      	b.n	800e2ee <_vfiprintf_r+0x1e6>
 800e324:	0800f1e8 	.word	0x0800f1e8
 800e328:	0800f1f2 	.word	0x0800f1f2
 800e32c:	0800ad65 	.word	0x0800ad65
 800e330:	0800e0e3 	.word	0x0800e0e3
 800e334:	0800f1ee 	.word	0x0800f1ee

0800e338 <__sflush_r>:
 800e338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e340:	0716      	lsls	r6, r2, #28
 800e342:	4605      	mov	r5, r0
 800e344:	460c      	mov	r4, r1
 800e346:	d454      	bmi.n	800e3f2 <__sflush_r+0xba>
 800e348:	684b      	ldr	r3, [r1, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	dc02      	bgt.n	800e354 <__sflush_r+0x1c>
 800e34e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	dd48      	ble.n	800e3e6 <__sflush_r+0xae>
 800e354:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e356:	2e00      	cmp	r6, #0
 800e358:	d045      	beq.n	800e3e6 <__sflush_r+0xae>
 800e35a:	2300      	movs	r3, #0
 800e35c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e360:	682f      	ldr	r7, [r5, #0]
 800e362:	6a21      	ldr	r1, [r4, #32]
 800e364:	602b      	str	r3, [r5, #0]
 800e366:	d030      	beq.n	800e3ca <__sflush_r+0x92>
 800e368:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e36a:	89a3      	ldrh	r3, [r4, #12]
 800e36c:	0759      	lsls	r1, r3, #29
 800e36e:	d505      	bpl.n	800e37c <__sflush_r+0x44>
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	1ad2      	subs	r2, r2, r3
 800e374:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e376:	b10b      	cbz	r3, 800e37c <__sflush_r+0x44>
 800e378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e37a:	1ad2      	subs	r2, r2, r3
 800e37c:	2300      	movs	r3, #0
 800e37e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e380:	6a21      	ldr	r1, [r4, #32]
 800e382:	4628      	mov	r0, r5
 800e384:	47b0      	blx	r6
 800e386:	1c43      	adds	r3, r0, #1
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	d106      	bne.n	800e39a <__sflush_r+0x62>
 800e38c:	6829      	ldr	r1, [r5, #0]
 800e38e:	291d      	cmp	r1, #29
 800e390:	d82b      	bhi.n	800e3ea <__sflush_r+0xb2>
 800e392:	4a2a      	ldr	r2, [pc, #168]	@ (800e43c <__sflush_r+0x104>)
 800e394:	410a      	asrs	r2, r1
 800e396:	07d6      	lsls	r6, r2, #31
 800e398:	d427      	bmi.n	800e3ea <__sflush_r+0xb2>
 800e39a:	2200      	movs	r2, #0
 800e39c:	6062      	str	r2, [r4, #4]
 800e39e:	04d9      	lsls	r1, r3, #19
 800e3a0:	6922      	ldr	r2, [r4, #16]
 800e3a2:	6022      	str	r2, [r4, #0]
 800e3a4:	d504      	bpl.n	800e3b0 <__sflush_r+0x78>
 800e3a6:	1c42      	adds	r2, r0, #1
 800e3a8:	d101      	bne.n	800e3ae <__sflush_r+0x76>
 800e3aa:	682b      	ldr	r3, [r5, #0]
 800e3ac:	b903      	cbnz	r3, 800e3b0 <__sflush_r+0x78>
 800e3ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800e3b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3b2:	602f      	str	r7, [r5, #0]
 800e3b4:	b1b9      	cbz	r1, 800e3e6 <__sflush_r+0xae>
 800e3b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3ba:	4299      	cmp	r1, r3
 800e3bc:	d002      	beq.n	800e3c4 <__sflush_r+0x8c>
 800e3be:	4628      	mov	r0, r5
 800e3c0:	f7fe fc16 	bl	800cbf0 <_free_r>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3c8:	e00d      	b.n	800e3e6 <__sflush_r+0xae>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	47b0      	blx	r6
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	1c50      	adds	r0, r2, #1
 800e3d4:	d1c9      	bne.n	800e36a <__sflush_r+0x32>
 800e3d6:	682b      	ldr	r3, [r5, #0]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d0c6      	beq.n	800e36a <__sflush_r+0x32>
 800e3dc:	2b1d      	cmp	r3, #29
 800e3de:	d001      	beq.n	800e3e4 <__sflush_r+0xac>
 800e3e0:	2b16      	cmp	r3, #22
 800e3e2:	d11e      	bne.n	800e422 <__sflush_r+0xea>
 800e3e4:	602f      	str	r7, [r5, #0]
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	e022      	b.n	800e430 <__sflush_r+0xf8>
 800e3ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3ee:	b21b      	sxth	r3, r3
 800e3f0:	e01b      	b.n	800e42a <__sflush_r+0xf2>
 800e3f2:	690f      	ldr	r7, [r1, #16]
 800e3f4:	2f00      	cmp	r7, #0
 800e3f6:	d0f6      	beq.n	800e3e6 <__sflush_r+0xae>
 800e3f8:	0793      	lsls	r3, r2, #30
 800e3fa:	680e      	ldr	r6, [r1, #0]
 800e3fc:	bf08      	it	eq
 800e3fe:	694b      	ldreq	r3, [r1, #20]
 800e400:	600f      	str	r7, [r1, #0]
 800e402:	bf18      	it	ne
 800e404:	2300      	movne	r3, #0
 800e406:	eba6 0807 	sub.w	r8, r6, r7
 800e40a:	608b      	str	r3, [r1, #8]
 800e40c:	f1b8 0f00 	cmp.w	r8, #0
 800e410:	dde9      	ble.n	800e3e6 <__sflush_r+0xae>
 800e412:	6a21      	ldr	r1, [r4, #32]
 800e414:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e416:	4643      	mov	r3, r8
 800e418:	463a      	mov	r2, r7
 800e41a:	4628      	mov	r0, r5
 800e41c:	47b0      	blx	r6
 800e41e:	2800      	cmp	r0, #0
 800e420:	dc08      	bgt.n	800e434 <__sflush_r+0xfc>
 800e422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e42a:	81a3      	strh	r3, [r4, #12]
 800e42c:	f04f 30ff 	mov.w	r0, #4294967295
 800e430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e434:	4407      	add	r7, r0
 800e436:	eba8 0800 	sub.w	r8, r8, r0
 800e43a:	e7e7      	b.n	800e40c <__sflush_r+0xd4>
 800e43c:	dfbffffe 	.word	0xdfbffffe

0800e440 <_fflush_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	690b      	ldr	r3, [r1, #16]
 800e444:	4605      	mov	r5, r0
 800e446:	460c      	mov	r4, r1
 800e448:	b913      	cbnz	r3, 800e450 <_fflush_r+0x10>
 800e44a:	2500      	movs	r5, #0
 800e44c:	4628      	mov	r0, r5
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	b118      	cbz	r0, 800e45a <_fflush_r+0x1a>
 800e452:	6a03      	ldr	r3, [r0, #32]
 800e454:	b90b      	cbnz	r3, 800e45a <_fflush_r+0x1a>
 800e456:	f7fd fadd 	bl	800ba14 <__sinit>
 800e45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d0f3      	beq.n	800e44a <_fflush_r+0xa>
 800e462:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e464:	07d0      	lsls	r0, r2, #31
 800e466:	d404      	bmi.n	800e472 <_fflush_r+0x32>
 800e468:	0599      	lsls	r1, r3, #22
 800e46a:	d402      	bmi.n	800e472 <_fflush_r+0x32>
 800e46c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e46e:	f7fd fd52 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800e472:	4628      	mov	r0, r5
 800e474:	4621      	mov	r1, r4
 800e476:	f7ff ff5f 	bl	800e338 <__sflush_r>
 800e47a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e47c:	07da      	lsls	r2, r3, #31
 800e47e:	4605      	mov	r5, r0
 800e480:	d4e4      	bmi.n	800e44c <_fflush_r+0xc>
 800e482:	89a3      	ldrh	r3, [r4, #12]
 800e484:	059b      	lsls	r3, r3, #22
 800e486:	d4e1      	bmi.n	800e44c <_fflush_r+0xc>
 800e488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e48a:	f7fd fd45 	bl	800bf18 <__retarget_lock_release_recursive>
 800e48e:	e7dd      	b.n	800e44c <_fflush_r+0xc>

0800e490 <__swhatbuf_r>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	460c      	mov	r4, r1
 800e494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e498:	2900      	cmp	r1, #0
 800e49a:	b096      	sub	sp, #88	@ 0x58
 800e49c:	4615      	mov	r5, r2
 800e49e:	461e      	mov	r6, r3
 800e4a0:	da0d      	bge.n	800e4be <__swhatbuf_r+0x2e>
 800e4a2:	89a3      	ldrh	r3, [r4, #12]
 800e4a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4a8:	f04f 0100 	mov.w	r1, #0
 800e4ac:	bf14      	ite	ne
 800e4ae:	2340      	movne	r3, #64	@ 0x40
 800e4b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	6031      	str	r1, [r6, #0]
 800e4b8:	602b      	str	r3, [r5, #0]
 800e4ba:	b016      	add	sp, #88	@ 0x58
 800e4bc:	bd70      	pop	{r4, r5, r6, pc}
 800e4be:	466a      	mov	r2, sp
 800e4c0:	f000 f862 	bl	800e588 <_fstat_r>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	dbec      	blt.n	800e4a2 <__swhatbuf_r+0x12>
 800e4c8:	9901      	ldr	r1, [sp, #4]
 800e4ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4d2:	4259      	negs	r1, r3
 800e4d4:	4159      	adcs	r1, r3
 800e4d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4da:	e7eb      	b.n	800e4b4 <__swhatbuf_r+0x24>

0800e4dc <__smakebuf_r>:
 800e4dc:	898b      	ldrh	r3, [r1, #12]
 800e4de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4e0:	079d      	lsls	r5, r3, #30
 800e4e2:	4606      	mov	r6, r0
 800e4e4:	460c      	mov	r4, r1
 800e4e6:	d507      	bpl.n	800e4f8 <__smakebuf_r+0x1c>
 800e4e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	6123      	str	r3, [r4, #16]
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	6163      	str	r3, [r4, #20]
 800e4f4:	b003      	add	sp, #12
 800e4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4f8:	ab01      	add	r3, sp, #4
 800e4fa:	466a      	mov	r2, sp
 800e4fc:	f7ff ffc8 	bl	800e490 <__swhatbuf_r>
 800e500:	9f00      	ldr	r7, [sp, #0]
 800e502:	4605      	mov	r5, r0
 800e504:	4639      	mov	r1, r7
 800e506:	4630      	mov	r0, r6
 800e508:	f7fe ff20 	bl	800d34c <_malloc_r>
 800e50c:	b948      	cbnz	r0, 800e522 <__smakebuf_r+0x46>
 800e50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e512:	059a      	lsls	r2, r3, #22
 800e514:	d4ee      	bmi.n	800e4f4 <__smakebuf_r+0x18>
 800e516:	f023 0303 	bic.w	r3, r3, #3
 800e51a:	f043 0302 	orr.w	r3, r3, #2
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	e7e2      	b.n	800e4e8 <__smakebuf_r+0xc>
 800e522:	89a3      	ldrh	r3, [r4, #12]
 800e524:	6020      	str	r0, [r4, #0]
 800e526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e52a:	81a3      	strh	r3, [r4, #12]
 800e52c:	9b01      	ldr	r3, [sp, #4]
 800e52e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e532:	b15b      	cbz	r3, 800e54c <__smakebuf_r+0x70>
 800e534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e538:	4630      	mov	r0, r6
 800e53a:	f000 f837 	bl	800e5ac <_isatty_r>
 800e53e:	b128      	cbz	r0, 800e54c <__smakebuf_r+0x70>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	f023 0303 	bic.w	r3, r3, #3
 800e546:	f043 0301 	orr.w	r3, r3, #1
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	89a3      	ldrh	r3, [r4, #12]
 800e54e:	431d      	orrs	r5, r3
 800e550:	81a5      	strh	r5, [r4, #12]
 800e552:	e7cf      	b.n	800e4f4 <__smakebuf_r+0x18>

0800e554 <memmove>:
 800e554:	4288      	cmp	r0, r1
 800e556:	b510      	push	{r4, lr}
 800e558:	eb01 0402 	add.w	r4, r1, r2
 800e55c:	d902      	bls.n	800e564 <memmove+0x10>
 800e55e:	4284      	cmp	r4, r0
 800e560:	4623      	mov	r3, r4
 800e562:	d807      	bhi.n	800e574 <memmove+0x20>
 800e564:	1e43      	subs	r3, r0, #1
 800e566:	42a1      	cmp	r1, r4
 800e568:	d008      	beq.n	800e57c <memmove+0x28>
 800e56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e572:	e7f8      	b.n	800e566 <memmove+0x12>
 800e574:	4402      	add	r2, r0
 800e576:	4601      	mov	r1, r0
 800e578:	428a      	cmp	r2, r1
 800e57a:	d100      	bne.n	800e57e <memmove+0x2a>
 800e57c:	bd10      	pop	{r4, pc}
 800e57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e586:	e7f7      	b.n	800e578 <memmove+0x24>

0800e588 <_fstat_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	4d07      	ldr	r5, [pc, #28]	@ (800e5a8 <_fstat_r+0x20>)
 800e58c:	2300      	movs	r3, #0
 800e58e:	4604      	mov	r4, r0
 800e590:	4608      	mov	r0, r1
 800e592:	4611      	mov	r1, r2
 800e594:	602b      	str	r3, [r5, #0]
 800e596:	f7f5 fb7a 	bl	8003c8e <_fstat>
 800e59a:	1c43      	adds	r3, r0, #1
 800e59c:	d102      	bne.n	800e5a4 <_fstat_r+0x1c>
 800e59e:	682b      	ldr	r3, [r5, #0]
 800e5a0:	b103      	cbz	r3, 800e5a4 <_fstat_r+0x1c>
 800e5a2:	6023      	str	r3, [r4, #0]
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200011fc 	.word	0x200011fc

0800e5ac <_isatty_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	@ (800e5c8 <_isatty_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f5 fb79 	bl	8003cae <_isatty>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_isatty_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_isatty_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	200011fc 	.word	0x200011fc

0800e5cc <_sbrk_r>:
 800e5cc:	b538      	push	{r3, r4, r5, lr}
 800e5ce:	4d06      	ldr	r5, [pc, #24]	@ (800e5e8 <_sbrk_r+0x1c>)
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4608      	mov	r0, r1
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	f7f5 fb82 	bl	8003ce0 <_sbrk>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_sbrk_r+0x1a>
 800e5e0:	682b      	ldr	r3, [r5, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_sbrk_r+0x1a>
 800e5e4:	6023      	str	r3, [r4, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	200011fc 	.word	0x200011fc

0800e5ec <__assert_func>:
 800e5ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4b09      	ldr	r3, [pc, #36]	@ (800e618 <__assert_func+0x2c>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	4605      	mov	r5, r0
 800e5f8:	68d8      	ldr	r0, [r3, #12]
 800e5fa:	b954      	cbnz	r4, 800e612 <__assert_func+0x26>
 800e5fc:	4b07      	ldr	r3, [pc, #28]	@ (800e61c <__assert_func+0x30>)
 800e5fe:	461c      	mov	r4, r3
 800e600:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e604:	9100      	str	r1, [sp, #0]
 800e606:	462b      	mov	r3, r5
 800e608:	4905      	ldr	r1, [pc, #20]	@ (800e620 <__assert_func+0x34>)
 800e60a:	f000 f84f 	bl	800e6ac <fiprintf>
 800e60e:	f000 f85f 	bl	800e6d0 <abort>
 800e612:	4b04      	ldr	r3, [pc, #16]	@ (800e624 <__assert_func+0x38>)
 800e614:	e7f4      	b.n	800e600 <__assert_func+0x14>
 800e616:	bf00      	nop
 800e618:	200001b4 	.word	0x200001b4
 800e61c:	0800f234 	.word	0x0800f234
 800e620:	0800f206 	.word	0x0800f206
 800e624:	0800f1f9 	.word	0x0800f1f9

0800e628 <_calloc_r>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	fba1 5402 	umull	r5, r4, r1, r2
 800e62e:	b93c      	cbnz	r4, 800e640 <_calloc_r+0x18>
 800e630:	4629      	mov	r1, r5
 800e632:	f7fe fe8b 	bl	800d34c <_malloc_r>
 800e636:	4606      	mov	r6, r0
 800e638:	b928      	cbnz	r0, 800e646 <_calloc_r+0x1e>
 800e63a:	2600      	movs	r6, #0
 800e63c:	4630      	mov	r0, r6
 800e63e:	bd70      	pop	{r4, r5, r6, pc}
 800e640:	220c      	movs	r2, #12
 800e642:	6002      	str	r2, [r0, #0]
 800e644:	e7f9      	b.n	800e63a <_calloc_r+0x12>
 800e646:	462a      	mov	r2, r5
 800e648:	4621      	mov	r1, r4
 800e64a:	f7fd fbb5 	bl	800bdb8 <memset>
 800e64e:	e7f5      	b.n	800e63c <_calloc_r+0x14>

0800e650 <_realloc_r>:
 800e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e654:	4680      	mov	r8, r0
 800e656:	4615      	mov	r5, r2
 800e658:	460c      	mov	r4, r1
 800e65a:	b921      	cbnz	r1, 800e666 <_realloc_r+0x16>
 800e65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e660:	4611      	mov	r1, r2
 800e662:	f7fe be73 	b.w	800d34c <_malloc_r>
 800e666:	b92a      	cbnz	r2, 800e674 <_realloc_r+0x24>
 800e668:	f7fe fac2 	bl	800cbf0 <_free_r>
 800e66c:	2400      	movs	r4, #0
 800e66e:	4620      	mov	r0, r4
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	f000 f833 	bl	800e6de <_malloc_usable_size_r>
 800e678:	4285      	cmp	r5, r0
 800e67a:	4606      	mov	r6, r0
 800e67c:	d802      	bhi.n	800e684 <_realloc_r+0x34>
 800e67e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e682:	d8f4      	bhi.n	800e66e <_realloc_r+0x1e>
 800e684:	4629      	mov	r1, r5
 800e686:	4640      	mov	r0, r8
 800e688:	f7fe fe60 	bl	800d34c <_malloc_r>
 800e68c:	4607      	mov	r7, r0
 800e68e:	2800      	cmp	r0, #0
 800e690:	d0ec      	beq.n	800e66c <_realloc_r+0x1c>
 800e692:	42b5      	cmp	r5, r6
 800e694:	462a      	mov	r2, r5
 800e696:	4621      	mov	r1, r4
 800e698:	bf28      	it	cs
 800e69a:	4632      	movcs	r2, r6
 800e69c:	f7fd fc3d 	bl	800bf1a <memcpy>
 800e6a0:	4621      	mov	r1, r4
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	f7fe faa4 	bl	800cbf0 <_free_r>
 800e6a8:	463c      	mov	r4, r7
 800e6aa:	e7e0      	b.n	800e66e <_realloc_r+0x1e>

0800e6ac <fiprintf>:
 800e6ac:	b40e      	push	{r1, r2, r3}
 800e6ae:	b503      	push	{r0, r1, lr}
 800e6b0:	4601      	mov	r1, r0
 800e6b2:	ab03      	add	r3, sp, #12
 800e6b4:	4805      	ldr	r0, [pc, #20]	@ (800e6cc <fiprintf+0x20>)
 800e6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6ba:	6800      	ldr	r0, [r0, #0]
 800e6bc:	9301      	str	r3, [sp, #4]
 800e6be:	f7ff fd23 	bl	800e108 <_vfiprintf_r>
 800e6c2:	b002      	add	sp, #8
 800e6c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6c8:	b003      	add	sp, #12
 800e6ca:	4770      	bx	lr
 800e6cc:	200001b4 	.word	0x200001b4

0800e6d0 <abort>:
 800e6d0:	b508      	push	{r3, lr}
 800e6d2:	2006      	movs	r0, #6
 800e6d4:	f000 f834 	bl	800e740 <raise>
 800e6d8:	2001      	movs	r0, #1
 800e6da:	f7f5 fa88 	bl	8003bee <_exit>

0800e6de <_malloc_usable_size_r>:
 800e6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6e2:	1f18      	subs	r0, r3, #4
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bfbc      	itt	lt
 800e6e8:	580b      	ldrlt	r3, [r1, r0]
 800e6ea:	18c0      	addlt	r0, r0, r3
 800e6ec:	4770      	bx	lr

0800e6ee <_raise_r>:
 800e6ee:	291f      	cmp	r1, #31
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	460c      	mov	r4, r1
 800e6f6:	d904      	bls.n	800e702 <_raise_r+0x14>
 800e6f8:	2316      	movs	r3, #22
 800e6fa:	6003      	str	r3, [r0, #0]
 800e6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e700:	bd38      	pop	{r3, r4, r5, pc}
 800e702:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e704:	b112      	cbz	r2, 800e70c <_raise_r+0x1e>
 800e706:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e70a:	b94b      	cbnz	r3, 800e720 <_raise_r+0x32>
 800e70c:	4628      	mov	r0, r5
 800e70e:	f000 f831 	bl	800e774 <_getpid_r>
 800e712:	4622      	mov	r2, r4
 800e714:	4601      	mov	r1, r0
 800e716:	4628      	mov	r0, r5
 800e718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e71c:	f000 b818 	b.w	800e750 <_kill_r>
 800e720:	2b01      	cmp	r3, #1
 800e722:	d00a      	beq.n	800e73a <_raise_r+0x4c>
 800e724:	1c59      	adds	r1, r3, #1
 800e726:	d103      	bne.n	800e730 <_raise_r+0x42>
 800e728:	2316      	movs	r3, #22
 800e72a:	6003      	str	r3, [r0, #0]
 800e72c:	2001      	movs	r0, #1
 800e72e:	e7e7      	b.n	800e700 <_raise_r+0x12>
 800e730:	2100      	movs	r1, #0
 800e732:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e736:	4620      	mov	r0, r4
 800e738:	4798      	blx	r3
 800e73a:	2000      	movs	r0, #0
 800e73c:	e7e0      	b.n	800e700 <_raise_r+0x12>
	...

0800e740 <raise>:
 800e740:	4b02      	ldr	r3, [pc, #8]	@ (800e74c <raise+0xc>)
 800e742:	4601      	mov	r1, r0
 800e744:	6818      	ldr	r0, [r3, #0]
 800e746:	f7ff bfd2 	b.w	800e6ee <_raise_r>
 800e74a:	bf00      	nop
 800e74c:	200001b4 	.word	0x200001b4

0800e750 <_kill_r>:
 800e750:	b538      	push	{r3, r4, r5, lr}
 800e752:	4d07      	ldr	r5, [pc, #28]	@ (800e770 <_kill_r+0x20>)
 800e754:	2300      	movs	r3, #0
 800e756:	4604      	mov	r4, r0
 800e758:	4608      	mov	r0, r1
 800e75a:	4611      	mov	r1, r2
 800e75c:	602b      	str	r3, [r5, #0]
 800e75e:	f7f5 fa36 	bl	8003bce <_kill>
 800e762:	1c43      	adds	r3, r0, #1
 800e764:	d102      	bne.n	800e76c <_kill_r+0x1c>
 800e766:	682b      	ldr	r3, [r5, #0]
 800e768:	b103      	cbz	r3, 800e76c <_kill_r+0x1c>
 800e76a:	6023      	str	r3, [r4, #0]
 800e76c:	bd38      	pop	{r3, r4, r5, pc}
 800e76e:	bf00      	nop
 800e770:	200011fc 	.word	0x200011fc

0800e774 <_getpid_r>:
 800e774:	f7f5 ba23 	b.w	8003bbe <_getpid>

0800e778 <_init>:
 800e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e77a:	bf00      	nop
 800e77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e77e:	bc08      	pop	{r3}
 800e780:	469e      	mov	lr, r3
 800e782:	4770      	bx	lr

0800e784 <_fini>:
 800e784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e786:	bf00      	nop
 800e788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e78a:	bc08      	pop	{r3}
 800e78c:	469e      	mov	lr, r3
 800e78e:	4770      	bx	lr
